<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS 기초</title>
    <url>/2021/07/21/CSS_Basic/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>선택자 안에 속성과 값을 정의한다.</p>
<h3 id="선택자-selector"><a href="#선택자-selector" class="headerlink" title="선택자 (selector)"></a>선택자 (selector)</h3><p>선택자는 HTML에 CSS를 적용하기 위한 HTML의 특정한 요소를 선택하여 명시해주는  역할을 한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>다음과 같이 사용할 수 있다.</p>
<h3 id="클래스-선택자"><a href="#클래스-선택자" class="headerlink" title="클래스 선택자"></a>클래스 선택자</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* class.css */</span></span><br><span class="line"><span class="comment">/* class=&quot;title&quot; */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-text</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html file  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span> title <span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;main-text&quot;</span>&gt;</span> main text <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>. 을 이용해서 클래스임을 나타낸다.</p>
<p>선택자 없이 인라인 방식으로 직접 작성 할 수있다</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>직접 손으로 작성할 때 코드가 길어질 수록  하드코딩 해야하고 수정시 굉장히 번거로워 질 수있어서 지양해야한다.</p>
<h3 id="HTML에-Embed하기"><a href="#HTML에-Embed하기" class="headerlink" title="HTML에 Embed하기"></a>HTML에 Embed하기</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">		<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">			속성: 값;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>content 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>content 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>content 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML-외부에서-불러오기-link-태그-이용"><a href="#HTML-외부에서-불러오기-link-태그-이용" class="headerlink" title="HTML 외부에서 불러오기 ( link 태그 이용)"></a>HTML 외부에서 불러오기 ( link 태그 이용)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/main.css&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.css */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">color</span> :red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rel은 현재 HTML의 문서와 불러오는 문서와의 관계를 나타내며 href는 그 문서의 경로이다. </p>
<p>CSS를 외부에서 불러올 경우 재사용에 용이하다.</p>
<h2 id="속성-Properties-과-값-Value"><a href="#속성-Properties-과-값-Value" class="headerlink" title="속성(Properties)과 값(Value)"></a>속성(Properties)과 값(Value)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	속성<span class="number">1</span>: 값;</span><br><span class="line">	속성<span class="number">2</span>: 값;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.notion.so/f15d9b6e6cb0493cbdf1d2aff4413b80">속성과 값의 종류</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Web</tag>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloud Computing AWS 시작하기</title>
    <url>/2021/07/21/Cloud-Computing-AWS-EC2/</url>
    <content><![CDATA[<h1 id="AWS-Amazon-Web-Service"><a href="#AWS-Amazon-Web-Service" class="headerlink" title="AWS(Amazon Web Service)"></a>AWS(Amazon Web Service)</h1><h2 id="EC2-elastic-computer-생성하기"><a href="#EC2-elastic-computer-생성하기" class="headerlink" title="EC2(elastic computer) 생성하기"></a>EC2(elastic computer) 생성하기</h2><ol>
<li>Region은 서울로 설정</li>
</ol>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled.png"></p>
<ul>
<li>생성했던 지역에서 다른지역으로 옮기면 EC2가 보이지 않는다.</li>
</ul>
<ol>
<li>EC2 검색</li>
</ol>
<p>  <img src="/image/Cloud-Computing-AWS-EC2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7_2021-07-22_%EC%98%A4%ED%9B%84_3.34.22.png"></p>
<ol start="2">
<li>인스턴스 시작</li>
</ol>
<p>  <img src="/image/Cloud-Computing-AWS-EC2/Untitled1.png"></p>
<ul>
<li><p>설치할 이미지 선택</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled2.png"></p>
</li>
<li><p>체험판 인스턴스 유형 선택</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled3.png"></p>
</li>
</ul>
<ul>
<li><p>스토리지 추가</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled4.png"></p>
<p>체험판은 최대 스토리지를 30GB까지 사용 가능하므로 30GB로 설정.</p>
</li>
<li><p>보안 그룹 설정</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled5.png"></p>
<pre><code>    SSH로 접속하기위해 프로토콜과 포트범위를 정한다.
</code></pre>
</li>
<li><p>인스턴스 시작 검토</p>
<p>  인스턴스에 대한 세부정보를 확인 할 수 있다.</p>
</li>
<li><p>키페어 생성</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled6.png"></p>
<p>최초접속시에는 새 키페어 생성을 해주며 다운받은 키페어는 유출에 유의하여 저장한다.</p>
</li>
</ul>
<ol>
<li><p>고정IP로 변경</p>
<p> 동적IP를 사용할 경우 요금이 부과 될 수 있다.</p>
</li>
</ol>
<ul>
<li><p>자신의 콘솔로 로그인하여 EC2 메뉴 접속 및 IP주소 할당</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled7.png"></p>
<p>대시보드의 Elastic IP(탄력적 IP)선택후 새 IP주소를 할당한다.</p>
</li>
<li><p>할당받은 IP주소와 자신의 인스턴스와 연결</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled8.png"></p>
<p>인스턴스를 입력하고 연결한다.</p>
</li>
</ul>
<ol>
<li>대시보드의 인스턴스 메뉴를 통해 인스턴스를 확인 할 수 있다.</li>
</ol>
<p>  <img src="/image/Cloud-Computing-AWS-EC2/Untitled9.png"></p>
<ol>
<li>Terminal을 사용하여 AWS에 접속</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 400 &#123;pemfile&#125;.pem // 보안을위해 퍼미션을 제한.</span><br><span class="line">ssh -i &#123;pemfile&#125;.pem ubuntu@&#123;public IPv4 Address&#125;</span><br></pre></td></tr></table></figure>

<p>  <img src="/image/Cloud-Computing-AWS-EC2/Untitled10.png"></p>
<p>접속이 된것을 확인 할 수 있다.</p>
]]></content>
      <categories>
        <category>Cloud Computing</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 기초</title>
    <url>/2021/07/21/HTML_Basic/</url>
    <content><![CDATA[<h1 id="HTML-기초"><a href="#HTML-기초" class="headerlink" title="HTML 기초"></a>HTML 기초</h1><h2 id="HTML의-기본형태"><a href="#HTML의-기본형태" class="headerlink" title="HTML의 기본형태"></a>HTML의 기본형태</h2><p>HTML의 TAG</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TAG</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">TAG</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>이러한 형태를 요소(Element)라고하는데 TAG와 크게 구분짓지 않는다. 앞쪽의 태그는 open 또는 start 뒤쪽의태그는 close 또는 end라고 한다.</li>
</ul>
<p>TAG는 각 의미를 가진다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> Element <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>태그에는 속성(Attribute)과 값(Value) 을 추가 할 수 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TAG</span> 속성=<span class="string">&quot;값&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">TAG</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 예시 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image_directory.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;alternate text&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>위의 img태그의 경우 닫히는 태그가 없는데 이것을 빈 태그 (Empty Tag)라고 한다.</p>
<h3 id="빈태그"><a href="#빈태그" class="headerlink" title="빈태그"></a>빈태그</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /가 없는 빈 태그 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TAG</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- /가 있는 빈태그 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TAG</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TAG</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>/는 붙이거나 안붙이거나 큰 차이는 없지만 혼용하지만 않으면 된다.</p>
<p>빈태그의 경우 “속성”과 “값”을 가지는 경우가 많다.</p>
<h3 id="부모와-자식-요소"><a href="#부모와-자식-요소" class="headerlink" title="부모와 자식 요소"></a>부모와 자식 요소</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;부모&gt;</span><br><span class="line">	&lt;자식&gt;&lt;/자식&gt;</span><br><span class="line">&lt;/부모&gt;</span><br></pre></td></tr></table></figure>

<p>하나의 태그가 다른태그의 콘텐츠로 사용되면 부모 자식 관계를 가진다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;animal&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>동물 목록<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>사자<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>호랑이<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>개<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>다음 HTML에서 섹션의 자식은 h1과 ul이며 동물목록의 부모는 section이 된다.</p>
<h1 id="HTML-문서의-범위"><a href="#HTML-문서의-범위" class="headerlink" title="HTML 문서의 범위"></a>HTML 문서의 범위</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;이름&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;사이트 설명&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>사이트의 이름<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/main.css&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scripte</span> <span class="attr">src</span>=<span class="string">&quot;./js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>html태그는 해당 문서의 시작과 끝을 가리킨다.</p>
<h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h3><p>DOCTYPE(DTD, Document Type Definition)은 HTML문서를 어떤 버전의 해석방식을 구조화하면 되는지 알려준다. 위의 경우 HTML 5이다.</p>
<h2 id="head-tag"><a href="#head-tag" class="headerlink" title="head tag"></a>head tag</h2><p>  head태그에는 문서에대한 정보를 가진다.</p>
<h3 id="Meta"><a href="#Meta" class="headerlink" title="Meta"></a>Meta</h3><p>해당 HTML문서의 인코딩 방식, 제작자, 내용, 키워드등을 검색엔진이나 브라우저에 제공하는 빈 태그이다.</p>
<p><a href="https://www.notion.so/8349936cddce4a7a96fef529f1b9e199">meta</a></p>
<h3 id="LINK-CSS-불러오기"><a href="#LINK-CSS-불러오기" class="headerlink" title="LINK(CSS 불러오기)"></a>LINK(CSS 불러오기)</h3><p>html, css , favicon(아이콘), Java Script 등 외부 문서를 연결할 때 사용하는 빈태그 이다.</p>
<p><a href="https://www.notion.so/39e41ea57beb411e8dd5cc814449bd1b">link</a></p>
<h3 id="STYLE-CSS-작성"><a href="#STYLE-CSS-작성" class="headerlink" title="STYLE(CSS 작성)"></a>STYLE(CSS 작성)</h3><p>외부에서 CSS를 가져오지 않고 내부 문서내에서 스타일을 작성 할 수있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SCRIPTE-Java-Script-불러오거나-작성"><a href="#SCRIPTE-Java-Script-불러오거나-작성" class="headerlink" title="SCRIPTE(Java Script 불러오거나 작성)"></a>SCRIPTE(Java Script 불러오거나 작성)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 외부에서 불러오기 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scripte</span> <span class="attr">src</span>=<span class="string">&quot;./js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 문서 내부에서 직접 작성하기 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">	function foo(event) &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		<span class="comment">&lt;!-- TODO --&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">	&#125; </span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="body-tag"><a href="#body-tag" class="headerlink" title="body tag"></a>body tag</h2><p>HTML 문서의 구조를 나타내는 태그들을 담고있다.</p>
<h3 id="DIV"><a href="#DIV" class="headerlink" title="DIV"></a>DIV</h3><p>division의 약자로 분할을 뜻한다 문서의 부분이나 섹션을 정의하나 명확한 의미를 가지지 않기때문에 특정범위를 묶는 용도로 사용한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IMG"><a href="#IMG" class="headerlink" title="IMG"></a>IMG</h3><p><img>는 html에 이미지를 삽입할때 사용하는 태그이다. </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;alternative text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>위에서 살펴봤듯이 img태그는 빈태그이기때문에 이미지를 삽입한다는 의미를 가지기때문에 실질적인 명시가 없기 때문에 <strong>이미지의 경로와 댁체텍스트</strong>를 <strong>반드시</strong>(웹표준) 설정해주어야 한다.</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>TIL</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux - Shell basic</title>
    <url>/2021/07/22/Linux%20-%20Shell%20Basic/</url>
    <content><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="Shell은-사용자와-하드웨어-또는-OS간의-인터페이스이다"><a href="#Shell은-사용자와-하드웨어-또는-OS간의-인터페이스이다" class="headerlink" title="Shell은 사용자와 하드웨어 또는 OS간의 인터페이스이다."></a>Shell은 사용자와 하드웨어 또는 OS간의 인터페이스이다.</h2><p>![](/image/Linux Shell Basic/R800x0.jpeg)</p>
<ul>
<li>명령어를 해석하여 커널에 명령어를 요청하여 프로그램을 실행</li>
</ul>
<h2 id="Shell-명령어"><a href="#Shell-명령어" class="headerlink" title="Shell 명령어"></a>Shell 명령어</h2><h3 id="다중사용자에-관한-명령어"><a href="#다중사용자에-관한-명령어" class="headerlink" title="다중사용자에 관한 명령어"></a>다중사용자에 관한 명령어</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ whoami <span class="comment">#로그인되어있는 사용자 ID를 출력</span></span><br><span class="line">ubuntu</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ passwd <span class="comment">#현재 사용자의 비밀번호 변경</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#두 명령어엔 기본 설정에 대한 차이가 존재한다.</span></span><br><span class="line">$ useradd <span class="comment">#사용자 기본 설정을 해야한다.</span></span><br><span class="line">$ adduser <span class="comment">#기본설정을 자동으로 수행</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#su: 사용자 변경</span></span><br><span class="line">su root <span class="comment"># 현재 사용자의 환경설정 기반으로 root로 변경</span></span><br><span class="line">su - root <span class="comment">#변경되는 사용자의 환경설정을 기반으로 root로 전환</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#사용자의 홈 디렉토리에 있는 .bashrc 와 .profile에는 환경설정이 존재한다.</span></span><br></pre></td></tr></table></figure>

<h2 id="권한에-관한-명령어"><a href="#권한에-관한-명령어" class="headerlink" title="권한에 관한 명령어"></a>권한에 관한 명령어</h2><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>root 계정에 로그인 하지 않은 상태에서 root권한으로 명령어를 실행</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim sudoers </span><br></pre></td></tr></table></figure>

<p>User privilege specification 밑에 자신의 계정과 권한을 입력한다.</p>
<p><img src="/image/Linux%20Shell%20Basic/Untitled.png"><br><img src="/image/Linux%20Shell%20Basic/Untitled%201.png"><br>권한거부없이 sudoers를 수정 할 수 있다</p>
<p>sudo를 매번 입력하는 것이 번거로워 root계정으로 로그인하여 작업을 할 수도 있지만<br>그럴 경우 시스템상에 큰 영향을 끼칠수 있는 명령을 했을때 경고없이 실행되므로 되돌릴 수 없는 명령을 할 수도 있다.<br>ex) rm -rf * #디렉토리와 파일과 하위 디렉토리까지 모두 삭제</p>
<h2 id="파일-권한"><a href="#파일-권한" class="headerlink" title="파일 권한"></a>파일 권한</h2><p>ls -al 명령어를 통해 파일 목록과 파일에대한 소유자,소유자그룹  기타사용자를 포함한 권한 정보를 살펴 볼 수 있다.</p>
<p><img src="/image/Linux%20Shell%20Basic/Untitled%202.png"></p>
<ul>
<li><p>권한에 대한 설명</p>
<p>  1 | 3 | 3 | 3 글자씩 의미를 가지는데 </p>
<p>  첫번째 영역은 파일인지 디렉토리인지를 나타내고</p>
<p>  나머지 세 영역은 소유자, 그룹, 기타사용자에관한 권한을 나타낸다.</p>
<p>  r w x는 각각 읽기 , 쓰기 , 실행을 의미한다.</p>
</li>
</ul>
<h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><ul>
<li><p>파일 권한 변경 명령어로 두가지 방식으로 사용할 수있다.</p>
</li>
<li><p>명령어 기호</p>
<p>  <a href="https://www.notion.so/a32632cdbdf64bc1a70133ab8a0c9765">Untitled</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod g+rx file.a <span class="comment"># file.a라는 파일에대해서 그룹사용자에게 읽기와 실행권한을 추가</span></span><br><span class="line">$ chmod ug+rw file.a <span class="comment"># file.a라는 파일에 유저와 그룹에 읽기와 쓰기 권한을 준다.</span></span><br><span class="line">$ chmod u=rwx, o=rx test.c</span><br></pre></td></tr></table></figure>

<ul>
<li><p>숫자를 사용</p>
<p>  r=2^2 w=2^1 x=2^0</p>
<p>  3비트 이진법을 사용하여 소유자/그룹/기타의 권한을 각각 읽기 쓰기 실행권한을 설정할 수 있다.</p>
<p>  ex)chmod 777 file : 소유자 그룹 다른사용자에게 읽기 쓰기 실행권한 부여 </p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod 400 isudev.pem <span class="comment"># 소유자에게만 읽기권한만 설정</span></span><br><span class="line">$ chmod -R 777 directory <span class="comment"># 하위디렉토리를 포함하여 권한 부여</span></span><br></pre></td></tr></table></figure>

<h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><ul>
<li>소유자 변경 명령어</li>
<li>chown [옵션] [소유자:소유그룹] [파일]</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chown root:root file</span><br><span class="line">$ chown root: file</span><br><span class="line">$ chown :root file</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="파일에-관한-명령어"><a href="#파일에-관한-명령어" class="headerlink" title="파일에 관한 명령어"></a>파일에 관한 명령어</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span> <span class="comment"># print working directory의 약어, 현재 작업중인 디렉토리를 출력</span></span><br><span class="line">/<span class="built_in">pwd</span>/devisu</span><br><span class="line">$ <span class="built_in">cd</span> <span class="comment">#change directory 디렉토리 이동</span></span><br><span class="line">$ ls <span class="comment"># list directory contents의 약어 </span></span><br><span class="line">		 <span class="comment"># -al옵션을 추가해서 숨김파일을 볼 수 있다.</span></span><br><span class="line">/etc$ ls host*  <span class="comment"># *나 ?같은 와일드카드를 이용하여 쉽게 list할 수 있다.</span></span><br><span class="line">host.conf  hostname  hosts  hosts.allow  hosts.deny</span><br></pre></td></tr></table></figure>

<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul>
<li>파일의 내용을 출력한다</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.c</span><br></pre></td></tr></table></figure>

<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><ul>
<li>파일의 첫 10줄을 출력한다</li>
</ul>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><ul>
<li>head의 반대로 끝 10줄을 출력</li>
</ul>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><ul>
<li>한 화면에 출력하고 넘겨가며 표기</li>
</ul>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul>
<li>파일을 삭제하는 명령어</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm test.c <span class="comment"># 파일 삭제</span></span><br><span class="line">$ rm -rf directory <span class="comment"># 디렉토리를 삭제하고 -r:하위 디렉토리도 모두 삭제  -f: 묻지않고 강제 삭제</span></span><br></pre></td></tr></table></figure>

<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ul>
<li>검색명령어</li>
<li>grep [-옵션] [패턴] [파일]</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep banana ./fruits.txt</span><br></pre></td></tr></table></figure>

<p>현재 디렉토리에있는 fruits.txt에 있는 banana가 써있는 Line만 출력</p>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 사용법 1</title>
    <url>/2021/07/22/Linux%20-%20Shell%20%EC%82%AC%EC%9A%A9%EB%B2%95%20/</url>
    <content><![CDATA[<h1 id="Shell-사용법"><a href="#Shell-사용법" class="headerlink" title="Shell 사용법"></a>Shell 사용법</h1><h2 id="Standard-Stream-표준-입출력"><a href="#Standard-Stream-표준-입출력" class="headerlink" title="Standard Stream (표준 입출력)"></a>Standard Stream (표준 입출력)</h2><ul>
<li>리눅스환경에서는  command로 실행되는 프로세스는 세가지 스트림을 가진다<ul>
<li>표준 입력 스트림 - stdin</li>
<li>표준 출력 스트림 - stdout</li>
<li>표준 오류 스트림 - stderr</li>
</ul>
</li>
</ul>
<p><img src="/image/Linux-Shell%20%EC%82%AC%EC%9A%A9%EB%B2%95/Untitled.png"></p>
<p>ex) ls -al 은 stdin에 해당하고 stdout은 그에따른 결과에 해당한다고 할 수 있다.</p>
<hr>
<h2 id="Redirection-리디렉션"><a href="#Redirection-리디렉션" class="headerlink" title="Redirection (리디렉션)"></a>Redirection (리디렉션)</h2><ul>
<li><p>표준 스트림을 바꿔 줄 수 있다.</p>
<p>   [ &lt; , &gt; , &lt;&lt; , &gt;&gt; ]를 사용한다.</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls &gt; file.txt <span class="comment"># 출력내용을 터미널의 console에 출력이 아닌 file.txt에 저장시킴</span></span><br><span class="line"></span><br><span class="line">head &lt; file.txt <span class="comment"># file.txt내용의 10줄이 입력으로 사용 된다.ead &lt; files.txt &gt; files2.txt</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ head &lt;.bashrc &gt; test.txt </span><br></pre></td></tr></table></figure>

<ul>
<li>이 명령어는 다음과 같이 작동한다.<ol>
<li>head &lt; .bashrc</li>
<li>1의 결과 &gt; test.txt에 저장</li>
</ol>
<ul>
<li>출력화면</li>
</ul>
</li>
</ul>
<p><img src="/image/Linux-Shell%20%EC%82%AC%EC%9A%A9%EB%B2%95/Untitled%201.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -al &gt;&gt; test1.txt <span class="comment"># 기존의 내용을 삭제하지않고 추가한다.</span></span><br></pre></td></tr></table></figure>

<h2 id="Pipe-파이프"><a href="#Pipe-파이프" class="headerlink" title="Pipe (파이프)"></a>Pipe (파이프)</h2><ul>
<li><p>여러개의 프로세스 사이에서 앞의 프로세스의 출력을 그 뒤의 프로세스의 입력으로 사용 하는 것.</p>
<p>  [ | ] 를 사용한다.</p>
</li>
</ul>
<p><img src="/image/Linux-Shell%20%EC%82%AC%EC%9A%A9%EB%B2%95/%ED%8C%8C%EC%9D%B4%ED%94%84.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat .bashrc | grep <span class="keyword">case</span></span><br><span class="line"><span class="keyword">case</span> $- <span class="keyword">in</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">	<span class="comment"># a case would tend to support setf rather than setaf.)</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure>

<ol>
<li>cat 명령을 통한 출력내용이 grep 명령의 입력 스트림으로 들어간다.</li>
<li>grep case 는 grep 명령의 입력스을 검색해서 cat의 출력내용에 case가 있는 라인만 출력한다</li>
</ol>
]]></content>
      <categories>
        <category>Shell</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux의 파일 시스템</title>
    <url>/2021/07/23/Linux-FileSystem/</url>
    <content><![CDATA[<h1 id="Linux-파일-시스템"><a href="#Linux-파일-시스템" class="headerlink" title="Linux 파일 시스템"></a>Linux 파일 시스템</h1><p>리눅스는 모든 것은 파일이라는 철학에따라 모든 인터랙션은 파일을 읽고 쓰는 것처럼 이루어져있다.<br>따라서 모든 자원에 대한 추상화 인터페이스로 파일 인터페이스를 활용한다.</p>
<p>네트워크,마우스,키보드, 저장매체들과 운영체제간에 IO로 이루어져있어<br>가장 간단한 인터페이스인 File Interface를 추상화하여 다룬다.</p>
<p>##File namespace</p>
<ul>
<li>Linux는 전역 네임스페이스를 사용한다</li>
<li>/directory1/sub/image.jpg</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat tty <span class="comment"># 가상파일 시스템 인터페이스 - 가상터미널환경 - input(키보드)</span></span><br></pre></td></tr></table></figure>

<h2 id="슈퍼블록-inode"><a href="#슈퍼블록-inode" class="headerlink" title="슈퍼블록 , inode"></a>슈퍼블록 , inode</h2><h3 id="슈퍼블록"><a href="#슈퍼블록" class="headerlink" title="슈퍼블록"></a>슈퍼블록</h3><ul>
<li>파일 시스템에 관한 정보(전체사이즈, 어떤 FS Algorithms을 썻는지 등)</li>
</ul>
<h3 id="파일"><a href="#파일" class="headerlink" title="파일"></a>파일</h3><ul>
<li>프로세스는 pid와 매핑되어있는 것 처럼 각각의 파일은 inode와 매핑이 되어있다.</li>
<li>파일시스템에서는 inode를 기반으로 파일을 엑세스함</li>
<li>프로세스의 정보를 저장해놓은 PCB처럼 inode의 정보를 기반으로 요약해놓은 정보를 메타데이터라고 함</li>
</ul>
<p><img src="/image/Linux-FileSystem/52dcd856.png"></p>
<p><em>inode 기반 메타 데이터</em></p>
<ol>
<li>Mode 소유자</li>
<li>Owner info 소유자 정보</li>
<li>Size 파일의 사이즈</li>
<li>Timestamps 생성시간</li>
<li>Direct Blocks 파일을 블록이라는 작은단위로 나눈 것을 엑세스 할 수 있는 첫번쨰 주소를 저장해놓음</li>
<li>indirect blocks , double indirect , triple indirect 간접적으로 블록에 접근할 수 있는 주소</li>
</ol>
<h2 id="File-inode"><a href="#File-inode" class="headerlink" title="File inode"></a>File inode</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/ubuntu/link.txt <span class="comment"># &#x27;/&#x27; 가 덴트리이다.</span></span><br></pre></td></tr></table></figure>
<p>dentry(directory entry)</p>
<ul>
<li>각 덴트리는 해당 디렉토리 파일과 정보를 가지고 있다</li>
<li>탐색할때 각 덴트리에서 inode를 찾아 계층적으로 탐색한다</li>
</ul>
<h2 id="Hard-Link-VS-Soft-Link"><a href="#Hard-Link-VS-Soft-Link" class="headerlink" title="Hard Link VS Soft Link"></a>Hard Link VS Soft Link</h2><ul>
<li>다른 디렉토리에서 접근 할 수 있게끔 파일에 연결하는 것을 link라고하는데<br>방법에따라 Hard Link와 Soft Link로 나뉜다.</li>
</ul>
<p><img src="/image/Linux-FileSystem/hardsoftlink.png"></p>
<h3 id="Hard-link"><a href="#Hard-link" class="headerlink" title="Hard link"></a>Hard link</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ln [Original File] [Link File]</span><br></pre></td></tr></table></figure>
<p>Hard link를 하게되면 파일이 생기는데 그때의 inode의 번호는 Original File을 따라간다. </p>
<p><img src="/image/Linux-FileSystem/hardlink.png"></p>
<p>Original File을 삭제해도 inode구조는 삭제되지 않기때문에<br>Hard Link한 파일은 여전히 접근 가능하다.<br>w</p>
<h3 id="Soft-Link-Symbolic-Link"><a href="#Soft-Link-Symbolic-Link" class="headerlink" title="Soft Link (Symbolic Link)"></a>Soft Link (Symbolic Link)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s [File1] [File2]</span><br></pre></td></tr></table></figure>
<p><img src="/image/Linux-FileSystem/softlink_.png"></p>
<ul>
<li>Windows OS의 바로가기와 기능상 동일하다.</li>
<li>Soft link의 inode구조체에는 원본파일의 주소가 있어 리디렉션을해 원본파일이 삭제되면 접근할 수 없게된다.<h3 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h3></li>
</ul>
<p>copy의경우 파일의 내용 전체를 복사하기때문에 그만큼 용량도 두배로 늘어나게 된다.</p>
<hr>
<h2 id="특수파일"><a href="#특수파일" class="headerlink" title="특수파일"></a>특수파일</h2><h3 id="디바이스"><a href="#디바이스" class="headerlink" title="디바이스"></a>디바이스</h3><ul>
<li>블록디바이스 <ul>
<li>HDD같이 블록이나 섹터 등 정해진 단위로 데이터 전송</li>
</ul>
</li>
<li>캐릭터 디바이스<ul>
<li>키보드 마우스등 byte 단위 데이터 전송 </li>
</ul>
</li>
</ul>
<hr>
<p>출처: 본 내용은 패스트 캠퍼스 수업내용을 기반으로 작성되었음을 알립니다.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 사용법 2</title>
    <url>/2021/07/23/Linux-How_to_use_shell/</url>
    <content><![CDATA[<p>#Shell 사용법</p>
<h2 id="Process-VS-Binary"><a href="#Process-VS-Binary" class="headerlink" title="Process VS Binary"></a>Process VS Binary</h2><ul>
<li>바이너리는 실행할 수 있는 파일</li>
<li>프로세스는 실행시킨 바이너리 프로그램의 정보를 갖고있다.<ul>
<li>메모리와 관련된 상태정보 (PCB)</li>
<li>시스템 리소스</li>
<li>스케쥴링 단위</li>
</ul>
</li>
</ul>
<h2 id="foreground-process-amp-background-process"><a href="#foreground-process-amp-background-process" class="headerlink" title="foreground process &amp; background process"></a>foreground process &amp; background process</h2><h3 id="foreground-process"><a href="#foreground-process" class="headerlink" title="foreground process"></a>foreground process</h3><ul>
<li>사용자가 직접적으로 실행한 후 작업을 완전히 수행할떄까지 기다려야하는 작업이나 명령이다.</li>
<li>화면에 표시되어 유저와 상호작용을 하게 되는 프로세스</li>
</ul>
<h3 id="background-process"><a href="#background-process" class="headerlink" title="background process"></a>background process</h3><ul>
<li>쉘은 더 많은 프로세스를 실행하기전 background process가 끝날때 까지 기다릴 필요 없다.</li>
<li>가용가능한 메모리 안에서 백그라운드 작업은 이루어진다.</li>
<li>서버 데몬, 백신 프로그램, etc..</li>
</ul>
<p><span style="color:gray">데몬 프로세스는 사용자 모르게 시스템 관리를 위해 실행되는 프로세스로 시스템이 부팅될떄 자동 실행된다</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -name <span class="string">&#x27;*.py&#x27;</span> &gt; list.txt &amp;</span><br><span class="line">[job number] process ID <span class="comment">## result</span></span><br></pre></td></tr></table></figure>
<p><span style="color:gray">프로세스 실행시 &amp;를 붙여준다.</span></p>
<h3 id="process-제어"><a href="#process-제어" class="headerlink" title="process 제어"></a>process 제어</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">^Z <span class="comment">## 실행중인 포어그라운드  프로세스 중단 not kill</span></span><br><span class="line">^C <span class="comment">## 포어그라운드 프로세스 종료</span></span><br><span class="line"><span class="built_in">jobs</span> <span class="comment">## 실행중인 백그라운드 프로세스와 상태정보 출력</span></span><br><span class="line">ps <span class="comment">## 실행중인 프로세스 출력 </span></span><br><span class="line"><span class="built_in">kill</span> -9 [PID] <span class="comment">## PID해당하는 프로세스 죽이기</span></span><br></pre></td></tr></table></figure>

<p><img src="/image/Linux-How_to_use_shell2/command_ps_result.png"></p>
<hr>
<p>출처: 본 내용은 패스트 캠퍼스 수업내용을 기반으로 작성되었음을 알립니다.</p>
<p><a href="https://www.lifewire.com/multitasking-background-foreground-process-2180219">lifewire: foreground&amp;background</a> </p>
]]></content>
      <categories>
        <category>Shell</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>객체 지향 프로그래밍 - Basic 1</title>
    <url>/2021/08/12/OOP-java-1/</url>
    <content><![CDATA[<h1 id="객체지향-프로그래밍-Object-Oriented-Programming"><a href="#객체지향-프로그래밍-Object-Oriented-Programming" class="headerlink" title="객체지향 프로그래밍(Object Oriented Programming)"></a>객체지향 프로그래밍(Object Oriented Programming)</h1><h2 id="객체지향-프로그래밍"><a href="#객체지향-프로그래밍" class="headerlink" title="객체지향 프로그래밍?"></a>객체지향 프로그래밍?</h2><ul>
<li><p>순서대로 실행되는 절차지향적인 C언어와 달리<br>객체의 관점에서 프로그래밍 하는 것 </p>
</li>
<li><p>여기서 객체란 의사나 행위가 미치는 대상이며 즉, 구체적 추상적 데이터의 단위이다.</p>
</li>
<li><p>객체지향의 목적은 추상화, 캡슐화, 상속 ,다형성을 특징으로 가진다</p>
</li>
<li><p>OOP는 5가지의 원칙을 준수해야한다</p>
<ol>
<li>SRP (single responsibility principle) : 단일 책임 원칙, 한 클래스는 한가지의 책임만 갖고있어야 한다</li>
<li>OCP (Open/Closed Principle) : 개방 폐쇄 원칙, 확장에는 열려있고 변경에는 닫혀있어야 한다</li>
<li>LSP (Liskov’s Substitution Principle) 리스코프 치환 법칙, 서브타입은 언제나 부모 타입으로 교체 될 수 있어야 한다</li>
<li>ISP (interface segregation principle): 인터페이스 분리원칙, 자신이 사용하지 않는 인터페이스는 구현하지 않아야함</li>
<li>DIP (Dependency Inversion Principle): 의존성 역전 원칙, 하위 레벨 모듈의 변경이 상위 레벨 변경을 요구하는 위계관계를 끊는 의미의 역전</li>
</ol>
</li>
</ul>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><ul>
<li><p>어떠한 객체를 추상화하여 해당 사물이 가져야하는 속성(feild)나 행위(method)로 구성된다.</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> studentNumber;</span><br><span class="line">    String studentName;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Convention"><a href="#Convention" class="headerlink" title="Convention"></a>Convention</h3><ul>
<li>협력을 위해 다음과 같은 관습이 존재한다.</li>
</ul>
<ol>
<li>Class는 대문자로 시작한다</li>
<li>한 java파일 하나에 클래스는 여러개가 있을 수 있지만 public class는 하나이고 그 클래스와 .java파일의 이름을 동일하</li>
<li>camel notation 방식으로 명명한다</li>
<li>변수이름과 메소드는 소문자로 시작한다</li>
</ol>
<h2 id="함수-Function"><a href="#함수-Function" class="headerlink" title="함수 (Function)"></a>함수 (Function)</h2><ul>
<li><p>하나의 기능을 수행하는 일련의 코드</p>
</li>
<li><p>구현된 함수는 여러 곳에서 동일한 방식으로 호출되어 사용 할 수있음</p>
</li>
<li><p>모듈화를 위해 낮은 결합도와 높은 응집도를 갖도록 설계하기위해 기능별로 구현하는 것이 좋다</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> nmu1, <span class="keyword">int</span> num2)</span> </span>&#123; <span class="comment">// 반환 데이터 함수이름 파라미터순으로 작성한다</span></span><br><span class="line">    <span class="keyword">int</span> result; </span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">//반환 값이 있는경우</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">helloWolrd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello Wolrd!&quot;</span>); <span class="comment">// 반환 값이 없는경우</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
<li><p>함수가 호출될 때 지역 변수들은 스택에 쌓인다. 함수 수행이 끝나면 자동으로 반환된다.</p>
</li>
</ul>
<h2 id="메소드-Method"><a href="#메소드-Method" class="headerlink" title="메소드 (Method)"></a>메소드 (Method)</h2><ul>
<li><p>객체의 기능을 구현하기 위해 클래스 내부에 구현되는 함수</p>
</li>
<li><p>멤버함수라고도 한다</p>
</li>
<li><p>메소드의 이름은 객체에 맞게 짓는 것이 좋다 ex) setID(param1),getID()…</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> studentNumber;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStudentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentNumber</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentName = name;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>oop</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>oop</tag>
      </tags>
  </entry>
  <entry>
    <title>객체지향 프로그래밍 - Interface</title>
    <url>/2021/08/18/OOP-java-10/</url>
    <content><![CDATA[<h1 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h1><h2 id="인터페이스의-특징"><a href="#인터페이스의-특징" class="headerlink" title="인터페이스의 특징"></a>인터페이스의 특징</h2><ul>
<li>인터페이스는 모든 메소드가 추상메소드로 구성되어있음</li>
<li>모든 변수는 상수로 선언됨 public static final</li>
<li>인터페이스는 상속이 아닌 구현이라 표현한다</li>
<li>키워드는 implements로 인터페이스를 구현한다</li>
</ul>
<h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calc</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">  <span class="keyword">int</span> ERROR = -<span class="number">999999999</span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>다음과 같이 인터페이스의 모든 메소드는 선언만하고 구현하지 않는다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">implements</span> <span class="title">Calc</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>구현하는 클래스는 인터페이스의 모든 추상메소드를 구현하거나</li>
<li>그렇지 않으면 추상 클래스가 되어야한다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> interfacetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteCalc</span> <span class="keyword">extends</span> <span class="title">Calculator</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 * num2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (num2 == <span class="number">0</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">return</span> num1 / num2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>상속 받은 하위 클래스는 나머지 추상메소드를 반드시 구현해야한다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalcTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calc calc = <span class="keyword">new</span> CompleteCalc();</span><br><span class="line">        System.out.println(calc.mul(<span class="number">3</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>인터페이스를 구현한 클래스는 인터페이스 형으로 선언한 변수형으로 형변환 할 수 있다</p>
</li>
<li><p>추상클래스와 다르게 인터페이스는 <strong>다중구현</strong>이 가능하다.</p>
</li>
<li><p>인터페이스형으로 형 변환 된경우 인터페이스에 있는 메소드만 사용가능하다.</p>
</li>
</ul>
<h2 id="인터페이스를-쓰는-이유"><a href="#인터페이스를-쓰는-이유" class="headerlink" title="인터페이스를 쓰는 이유"></a>인터페이스를 쓰는 이유</h2><ul>
<li>클래스나 프로그램이 제공하는 기능을 명시적으로 선언</li>
<li>클라이언트는 모듈이 어떠한 인터페이스를 구현했는지를 보고 명세할 수 있다</li>
<li>어떤 객체가 인터페이스 타입이라는 것은 그 클래스가 인터페이스의 모든 메소드를 구현했다는 것을 뜻한다</li>
<li>따라서 클라이언트는 인터페이스를 보고 그것을 구현한 다양한 객체들을 사용 할 수 있음 (다형성)</li>
<li>ex)JDBC 인터페이스 (oracle , mysql , mssql)</li>
</ul>
<pre class="mermaid">graph BT;
Q[Quick Sort] -.-> S[Sorting]
B[Buuble Sort] -.-> S
H[Heap Sort] -.-> S</pre>

<h2 id="인터페이스를-활용해서-DAO-구현하기"><a href="#인터페이스를-활용해서-DAO-구현하기" class="headerlink" title="인터페이스를 활용해서 DAO 구현하기"></a>인터페이스를 활용해서 DAO 구현하기</h2><pre class="mermaid">graph BT;
A[USER] -- Uses --> B[Userinfo]

subgraph one [DAO]
C1[oracle] --implement--> B
C2[mysql] --> B
C3[mssql] --> B
end</pre>

<ul>
<li>DB에 회원 정보를 넣는 data access object를 여러 종류의 DB제품이 지원될 수 있게 구현</li>
<li>환경파일에서 DB의 종류를 읽고 그에 맞게 dao 인스턴스를 생성 &amp; 실행</li>
</ul>
<h3 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h3><ul>
<li>Hierarchy <img src="/image/OOP-java-10_images/hier.png"></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUserinfo</span><span class="params">(UserInfo userInfo)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUserinfo</span><span class="params">(UserInfo userInfo)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUserinfo</span><span class="params">(UserInfo userInfo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>interface에서는 추상메소드만 선언한다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoOracleDao</span> <span class="keyword">implements</span> <span class="title">UserInfoDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUserinfo</span><span class="params">(UserInfo userInfo)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Insert into ORACLE DB userID - &quot;</span> + userInfo.getUserID());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserinfo</span><span class="params">(UserInfo userInfo)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Delete into ORACLE DB userID - &quot;</span> + userInfo.getUserID());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserinfo</span><span class="params">(UserInfo userInfo)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Update into ORACLE DB userID - &quot;</span> + userInfo.getUserID());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userID;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserID</span><span class="params">(String userID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userID = userID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(fis);</span><br><span class="line"></span><br><span class="line">        String dbType = prop.getProperty(<span class="string">&quot;DBTYPE&quot;</span>);</span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">        userInfo.setUserID(<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        userInfo.setUserName(<span class="string">&quot;Kim&quot;</span>);</span><br><span class="line">        userInfo.setPassword(<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line"></span><br><span class="line">        UserInfoDao userInfoDao = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(dbType.equals(<span class="string">&quot;ORACLE&quot;</span>)) &#123;</span><br><span class="line">            userInfoDao = <span class="keyword">new</span> UserInfoOracleDao();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dbType.equals(<span class="string">&quot;MYSQL&quot;</span>)) &#123;</span><br><span class="line">            userInfoDao = <span class="keyword">new</span> UserInfoMySqlDao();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        userInfoDao.insertUserinfo(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>client 에서는 구현된 interface 변수를 생성하고 propties에 맞게 인스턴스를 생성하고 메소드를 사용한다.</li>
</ul>
<h2 id="인터페이스의-여러요소"><a href="#인터페이스의-여러요소" class="headerlink" title="인터페이스의 여러요소"></a>인터페이스의 여러요소</h2><ul>
<li>Static Method : 인스턴스 유무와 관계없이 사용할 수 있는 메소드 <code>Interface.StaticMethod();</code> 방식으로 사용가능 </li>
<li>Default Method : 추상메소드와 달리 구현부를 가지며 구현하는 클래스가 재정의를 하지 않아도 인터페이스 인스턴스 실행 할 수있다. 재정의 하지않을 경우 이 메소드가 실행 된다.</li>
<li>private Method : 재정의 할 수없으며 인터페이스 내에서만 사용할 수 있는 메소드</li>
</ul>
<h2 id="인터페이스-다중구현-amp-상속"><a href="#인터페이스-다중구현-amp-상속" class="headerlink" title="인터페이스 다중구현 &amp; 상속"></a>인터페이스 다중구현 &amp; 상속</h2><ul>
<li>클래스는 <a href="https://en.wikipedia.org/wiki/Multiple_inheritance">Diamond Problem</a>과 같은문제로 인하여 다중상속을 할 수 없지만</li>
<li>인터페이스의 경우 다중구현이 가능하다 하지만 Default Method가 중복되는경우 재정의가 필요하다</li>
<li>인터페이스도 상속이 가능하다 클래스와 마찬가지로 <code>extends</code> 키워드를 사용<ul>
<li>또한 인터페이스는 다중 상속이 가능하고 구현 코드의 상속이 아니므로 타입상속이라고 한다.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">x</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Y</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">y</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> <span class="keyword">extends</span> <span class="title">X</span>,<span class="title">Y</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">X</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> 2021/08/18  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Y</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> 2021/08/18  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> 2021/08/18  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="클래스-상속과-인터페이스-동시-구현"><a href="#클래스-상속과-인터페이스-동시-구현" class="headerlink" title="클래스 상속과 인터페이스 동시 구현"></a>클래스 상속과 인터페이스 동시 구현</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shelf</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> ArrayList&lt;Book&gt; shelf;</span><br><span class="line"></span><br><span class="line">    Shelf() &#123;</span><br><span class="line">        shelf = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title">getShelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shelf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shelf.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(T item)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">deQueue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span> <span class="keyword">extends</span> <span class="title">Shelf</span> <span class="keyword">implements</span> <span class="title">Queue</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(Object item)</span> </span>&#123;</span><br><span class="line">        shelf.add((Book)item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shelf.remove(<span class="number">0</span>).getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookShelfTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BookShelf bookQueue = <span class="keyword">new</span> BookShelf();</span><br><span class="line">        bookQueue.enQueue(<span class="keyword">new</span> Book(<span class="string">&quot;책1&quot;</span>));</span><br><span class="line">        bookQueue.enQueue(<span class="keyword">new</span> Book(<span class="string">&quot;책2&quot;</span>));</span><br><span class="line">        bookQueue.enQueue(<span class="keyword">new</span> Book(<span class="string">&quot;책3&quot;</span>));</span><br><span class="line">        bookQueue.enQueue(<span class="keyword">new</span> Book(<span class="string">&quot;책4&quot;</span>));</span><br><span class="line">        bookQueue.enQueue(<span class="keyword">new</span> Book(<span class="string">&quot;책5&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(bookQueue.deQueue());</span><br><span class="line">        System.out.println(bookQueue.deQueue());</span><br><span class="line">        System.out.println(bookQueue.deQueue());</span><br><span class="line">        System.out.println(bookQueue.deQueue());</span><br><span class="line">        System.out.println(bookQueue.deQueue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>oop</category>
      </categories>
      <tags>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title>Java - Object Class</title>
    <url>/2021/08/18/OOP-java-11/</url>
    <content><![CDATA[<h1 id="Object-Class"><a href="#Object-Class" class="headerlink" title="Object Class"></a>Object Class</h1><h2 id="Object-Class-1"><a href="#Object-Class-1" class="headerlink" title="Object Class"></a><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html">Object Class</a></h2><ul>
<li>Object 클래스는 가장 상위클래스이다.</li>
<li>즉 모든 클래스들은 Object클래스를 상속받고 필요에 의해 Object Class의 Method를 재정의하여 사용할 수 있다.</li>
<li>Compiler는 Compile시에 Extends Object를 추가한다</li>
</ul>
<h3 id="Object-Class-Method"><a href="#Object-Class-Method" class="headerlink" title="Object Class Method"></a>Object Class Method</h3><h4 id="override-toString"><a href="#override-toString" class="headerlink" title="override toString()"></a>override toString()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal dog = <span class="keyword">new</span> Animal(<span class="string">&quot;Dog&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        String test = <span class="keyword">new</span> String(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        System.out.println(dog);</span><br><span class="line">        System.out.println(test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>코드의 결과는 다음과 같다 <img src="/image/OOP-java-11_images/animaltest.png"></p>
</li>
<li><p>test의 toString()은 이미 재정의 되어있기때문에 test를 바로 출력하지만</p>
</li>
<li><p>Animal 클래스는 그렇지않기때문에 16진수의 주소값을 출력한다.<br><img src="/image/OOP-java-11_images/tostringoveride.png"></p>
</li>
<li><p>따라서 Animal class 또한 object를 상속받았기때문에 toString()을 오버라이드 할 수 있다.</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Animal&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-11_images/2a3ceefb.png"></p>
<h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html#equals(java.lang.Object)">equals()</a></h4><ul>
<li>equals() 메소드는 두 인스턴스 주소 값을 비교하여 True/False를 반환한다</li>
<li>인스턴스가 달라도 논리적으로 같다면 true를 반환할 수 있도록 재정의가 가능하다.</li>
</ul>
<h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html#hashCode()">hashCode()</a></h4><ul>
<li>Java에서는 Heap메모리를 관리할때 Hash함수를 이용한다.</li>
<li>hasCode()는 인스턴스에대한 저장 주소를 반환한다</li>
<li>equals()를 위와같이 재정의 할때 hash Key값을 Primary Key같은 것으로 사용한다</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>class</tag>
        <tag>object</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA - Collection Framework</title>
    <url>/2021/08/19/OOP-java-12/</url>
    <content><![CDATA[<h1 id="JAVA-Collection-Framework"><a href="#JAVA-Collection-Framework" class="headerlink" title="JAVA Collection Framework"></a>JAVA Collection Framework</h1><ul>
<li>컬렉션 프레임워크란 자료구조를 정의해 놓은 JDK 라이브러리 이다</li>
<li>java.util 패키지에 구현되어있다</li>
</ul>
<pre class="mermaid">
graph BT
ArrayList --> List
Vector --> List
LinkedList --> List
HashSet --> Set
TreeSet --> Set
List --> Collection
Set --> Collection

HashTable --> Map
TreeMap --> Map
HashMap --> Map</pre>

<h2 id="Collection-Interface"><a href="#Collection-Interface" class="headerlink" title="Collection Interface"></a>Collection Interface</h2><ul>
<li>객체를 관리하기위한 메소드들이 선언된 인터페이스</li>
<li>List와 Set인터페이스가 있다</li>
</ul>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html">List</a></h3><ul>
<li>객체를 <strong>순서</strong>에따라 저장하고 관리하는데 필요한 메소드가 선언되어있는 인터페이스이다</li>
<li>중복을 허용한다</li>
<li>ArrayList, Vetor, Stack, Queue 등 자료구조리스트를 구현하기위한 인터페이스이다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Member.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 생략...getter/setter </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MemberArrayList.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberArrayList</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Member&gt; arrayList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberArrayList</span> <span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        arrayList.add(member);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeMember</span><span class="params">(<span class="keyword">int</span> memberID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arrayList.size() &lt; i++) &#123;</span><br><span class="line">            Member member = arrayList.get(i);</span><br><span class="line">            <span class="keyword">int</span> tempId = member.getMemberId();</span><br><span class="line">            <span class="keyword">if</span> (tempId == memberID) &#123;</span><br><span class="line">                arrayList.remove(i);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul>
<li><strong>순서와 관계없이 중복을 허용하지 않고</strong> 유일한 값을 관리하는데 필요한 메소드가 선언되어있는 인터페이스이다.</li>
<li>출력시 순서가 일정하지 않음</li>
<li>HashSet , TreeSet 등이 있음</li>
</ul>
<h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">Iterator</a></h4><ul>
<li>컬렉션 프레임워크에 저장된 요소들을 순회 참조하기 위하여 사용됨</li>
<li>Set의 경우 index가 없으므로 iterator를 이용하여 순회해야한다</li>
<li>Iterator 객체의 <code>boolean hasNext()</code> 와 <code>E next()</code> 를 사용한다</li>
</ul>
<h4 id="HashSet-Class"><a href="#HashSet-Class" class="headerlink" title="HashSet Class"></a>HashSet Class</h4><ul>
<li>Set은 객체의 중복을 허용하지 않기때문에 인스턴스의 동일성을 확인해야 한다</li>
<li>동일성을 확인하기위해 equals()와 hashCode() 메소드를 재정의 해야한다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MemberHashSet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberHashSet</span>  </span>&#123;</span><br><span class="line">    HashSet&lt;Member&gt; hashSet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberHashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        hashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberHashSet</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        hashSet = <span class="keyword">new</span> HashSet&lt;&gt;(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        hashSet.add(member);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAllMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator&lt;Member&gt; ir = hashSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (ir.hasNext()) &#123;</span><br><span class="line">            Member member = ir.next();</span><br><span class="line">            System.out.println(member);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MemberHashSetTest.java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberHashSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MemberHashSet hashSet = <span class="keyword">new</span> MemberHashSet();</span><br><span class="line">        hashSet.addMember(<span class="keyword">new</span> Member(<span class="number">1000</span>, <span class="string">&quot;Apple&quot;</span>));</span><br><span class="line">        hashSet.addMember(<span class="keyword">new</span> Member(<span class="number">1000</span>, <span class="string">&quot;Apple&quot;</span>));</span><br><span class="line">        hashSet.addMember(<span class="keyword">new</span> Member(<span class="number">1002</span>, <span class="string">&quot;Grape&quot;</span>));</span><br><span class="line">        hashSet.addMember(<span class="keyword">new</span> Member(<span class="number">1003</span>, <span class="string">&quot;Peach&quot;</span>));</span><br><span class="line"></span><br><span class="line">        hashSet.showAllMember();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>코드의 결과는 다음과 같다 </li>
<li><code>[Member&#123;ID=1000, name=&#39;Apple&#39;&#125;, Member&#123;ID=1003, name=&#39;Peach&#39;&#125;, Member&#123;ID=1000, name=&#39;Apple&#39;&#125;, Member&#123;ID=1002, name=&#39;Grape&#39;&#125;]</code></li>
<li>정렬없이 중복해서 1000과 Apple 맴버객체가 들어있는데 이 이유는 생성된 인스턴스의 hashCode가 다르기 떄문이다</li>
<li>이를 위해서 equals()와 hashCode()를 Override해줄 필요가 있다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Member.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Member member = (Member) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(ID, member.ID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(ID);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>다음과 같이 ID를 Hash한 값이 같으면 같은 객체임을 구현해주면 해결할 수 있다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Member&#123;ID=<span class="number">1000</span>, name=<span class="string">&#x27;Apple&#x27;</span>&#125;</span><br><span class="line">Member&#123;ID=<span class="number">1002</span>, name=<span class="string">&#x27;Grape&#x27;</span>&#125;</span><br><span class="line">Member&#123;ID=<span class="number">1003</span>, name=<span class="string">&#x27;Peach&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Tree-Set"><a href="#Tree-Set" class="headerlink" title="Tree Set"></a>Tree Set</h4><ul>
<li>객체의 정렬을 위해 사용되는 클래스이고 내부적으로는 이진 검색트리로 구현되어있다.</li>
<li>객체의 비교를 위해 객채에 Comparable 또는 Comparator 인터페이스를 구현햐애햐 한다.</li>
</ul>
<h5 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MemberTreeSet.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberTreeSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TreeSet&lt;Member&gt; treeSet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberTreeSet</span><span class="params">()</span> </span>&#123; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        treeSet.add(member);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeMember</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;Member&gt; ir = treeSet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(ir.hasNext()) &#123;</span><br><span class="line">            Member member = ir.next();</span><br><span class="line">            <span class="keyword">if</span>(member.getID() == id) &#123;</span><br><span class="line">                treeSet.remove(member);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAllMember</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Member member : treeSet ) &#123;</span><br><span class="line">            System.out.println(member);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MemberTreeSetTest.java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberTreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MemberTreeSet treeSet = <span class="keyword">new</span> MemberTreeSet();</span><br><span class="line"></span><br><span class="line">        treeSet.addMember(<span class="keyword">new</span> Member(<span class="number">1004</span>,<span class="string">&quot;Apple&quot;</span>));</span><br><span class="line">        treeSet.addMember(<span class="keyword">new</span> Member(<span class="number">1001</span>,<span class="string">&quot;kiwi&quot;</span>));</span><br><span class="line">        treeSet.addMember(<span class="keyword">new</span> Member(<span class="number">1000</span>,<span class="string">&quot;Melon&quot;</span>));</span><br><span class="line">        treeSet.addMember(<span class="keyword">new</span> Member(<span class="number">1000</span>,<span class="string">&quot;Peach&quot;</span>));</span><br><span class="line">        treeSet.addMember(<span class="keyword">new</span> Member(<span class="number">1005</span>,<span class="string">&quot;Grape&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        treeSet.showAllMember();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>다음 테스트 코드의 결과는 <code>Exception in thread &quot;main&quot; java.lang.ClassCastException: class treesetexample.Member cannot be cast to class java.lang.Comparable (treesetexample.Member is in unnamed module of loader &#39;app&#39;; java.lang.Comparable is in module java.base of loader &#39;bootstrap&#39;) </code> 이러한 오류가 발생하는데</p>
</li>
<li><p>addMember할때 비교할 객체에대한 비교가 명시되어있지 않기 때문이다.</p>
</li>
<li><p>따라서 Member.java에서 Comparable 인터페이스를 구현해야한다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Member</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id - member.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>자신과 들어온 argument와 비교를해서 자신보다 큰경우 양수, 작으면 음수 같으면 0을 반환한다</p>
</li>
</ul>
<h5 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h5><ul>
<li><p>Comparator 인터페이스를 사용할때도 마찬가지로 객체클래스에서 구현해주면 된다.</p>
</li>
<li><p>이때는 Compare(arg1 ,arg2) 메소드를 오버라이드 해준다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Member.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Member</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Member o1, Member o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o1.getID() - o2.getID();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>이렇게 구현 후 실행하면 <code>Exception in thread &quot;main&quot; java.lang.ClassCastException: class treesetexample.Member cannot be cast to class java.lang.Comparable (treesetexample.Member is in unnamed module of loader &#39;app&#39;; java.lang.Comparable is in module java.base of loader &#39;bootstrap&#39;) </code> 다음과 같은 오류가 발생한다 </p>
</li>
<li><p>TreeSet의 인스턴스를 생성할때 <code>Comparator</code>를 구현한 클래스를 명시해주어야한다</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MemberTreeSet.java</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberTreeSet</span><span class="params">()</span> </span>&#123; treeSet = <span class="keyword">new</span> TreeSet&lt;Member&gt;(<span class="keyword">new</span> Member());&#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Member&#123;ID=<span class="number">1000</span>, name=<span class="string">&#x27;Melon&#x27;</span>&#125;</span><br><span class="line">Member&#123;ID=<span class="number">1001</span>, name=<span class="string">&#x27;kiwi&#x27;</span>&#125;</span><br><span class="line">Member&#123;ID=<span class="number">1004</span>, name=<span class="string">&#x27;Apple&#x27;</span>&#125;</span><br><span class="line">Member&#123;ID=<span class="number">1005</span>, name=<span class="string">&#x27;Grape&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h6 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h6><ul>
<li>String의 경우 java내부에서 이미 comparator 인터페이스가 구현이 되어있는데 다른 방식으로도 구현할 수 있다.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Overide</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.compare(s2) * -<span class="number">1</span>; <span class="comment">// 결과 값의 부호반대 =&gt; 역순</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html">Map</a></h3><ul>
<li>Key 와 Value 쌍으로 이루어진 객체를 관리하는데 사용하는 메서드들이 선언된 인터페이스</li>
<li>Key를 이용하여 Value를 꺼내오는 방식</li>
<li>Key는 중복을 허용하지 않음<ul>
<li>따라서 Key의 유일성 비교를 위한 equals()와 hashCode() 메소드의 구현이 요구된다.</li>
</ul>
</li>
<li>put(K ,V)로 값을 넣을 수 있다.</li>
<li>key를 set로 불러오는 keySet()과 values()를 이용해 Collection 형태로 값을 불러올 수 있다.</li>
<li>HashTable, HashMap,TreeMap 등이 Map 인터페이스를 구현한다</li>
</ul>
<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MemberHashMap.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberHashMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, Member&gt; hashMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        hashMap.put(member.getID(),member);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeMember</span><span class="params">(<span class="keyword">int</span> memberID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hashMap.containsKey(memberID)) &#123;</span><br><span class="line">            hashMap.remove(memberID);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeMember</span><span class="params">(Integer key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hashMap.containsKey(key)) &#123;</span><br><span class="line">            hashMap.remove(key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAllMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator&lt;Integer&gt; ir = hashMap.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(ir.hasNext()) &#123;</span><br><span class="line">            Integer key = ir.next();</span><br><span class="line">            Member member = hashMap.get(key);</span><br><span class="line">            System.out.println(member);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><ul>
<li>Tree Map 클래스는 key에 대한 정렬을 구현할 수 있다</li>
<li>key가 되는 클래스에 Comparable이나 Comparator 인터페이스를 구현해서 key값으로 기준으로 정렬할 수 있다.</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java - 자바의 내부 클래스</title>
    <url>/2021/08/23/OOP-java-13/</url>
    <content><![CDATA[<h1 id="Inner-Class"><a href="#Inner-Class" class="headerlink" title="Inner Class"></a>Inner Class</h1><ul>
<li>내부 클래스는 클래스 내부에 선언한 클래스이고 감싸고있는 외부클래스가 아닌 다른 클래스가 사용할 일이 적다</li>
<li>내부 클래스의 종류<ul>
<li>Instance inner class, Static inner class, local inner class , anonymous inner class</li>
</ul>
</li>
</ul>
<h2 id="Instance-Inner-Class"><a href="#Instance-Inner-Class" class="headerlink" title="Instance Inner Class"></a>Instance Inner Class</h2><ul>
<li><p>내부적으로 사용할 클래스를 선언하여 사용</p>
</li>
<li><p>외부 클래스가 생성된 후에 생성된다.</p>
</li>
<li><p>private이 아닌 경우 다른 외부클래스에서도 생성할 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OutClass.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer outInt = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Integer outStaticInt = <span class="number">10000</span>;</span><br><span class="line">  <span class="keyword">private</span> InstanceInnerClass instanceInnerClass;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OutClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      instanceInnerClass = <span class="keyword">new</span> InstanceInnerClass();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceInnerClass</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> Integer inInt = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">inClassFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          System.out.println(outInt + <span class="string">&quot;외부 클래스의 Private Instance 변수&quot;</span>);</span><br><span class="line">          System.out.println(outStaticInt + <span class="string">&quot;외부 클래스의 Private Static 변수&quot;</span>);</span><br><span class="line">          System.out.println(inInt + <span class="string">&quot;내부 클래스의 Private Instance 변수&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outClassFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      instanceInnerClass.inClassFunc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    OutClass outClass = <span class="keyword">new</span> OutClass();</span><br><span class="line">    outClass.outClassFunc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Static-Inner-Class"><a href="#Static-Inner-Class" class="headerlink" title="Static Inner Class"></a>Static Inner Class</h2><ul>
<li><p>외부 클래스의 생성과 무관하게 사용할 수 있다</p>
</li>
<li><p>정적변수와 정적 메소드를 사용한다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer inInt = <span class="number">501</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer staticinInt = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">staticClassFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(outInt + &quot;외부 클래스의 Private Instance 변수&quot;); 외부 클래스의 생성과 관련이 없기떄문에 인스턴스 변수는 사용할 수 없다.</span></span><br><span class="line">        System.out.println(outStaticInt + <span class="string">&quot;외부 클래스의 Private Static 변수&quot;</span>);</span><br><span class="line">        System.out.println(inInt + <span class="string">&quot;정적 내부 클래스의 Private Instance 변수&quot;</span>);</span><br><span class="line">        System.out.println(staticinInt + <span class="string">&quot;정적 내부 클래스의 Private Static Instance 변수&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Local-Inner-Class-amp-Anonymous-InnerClass"><a href="#Local-Inner-Class-amp-Anonymous-InnerClass" class="headerlink" title="Local Inner Class &amp; Anonymous InnerClass"></a>Local Inner Class &amp; Anonymous InnerClass</h2><h3 id="Local-Inner-Class"><a href="#Local-Inner-Class" class="headerlink" title="Local Inner Class"></a>Local Inner Class</h3><ul>
<li><p>메소드 내부에 정의하는 클래스 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OUtClass</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function">Runnable <span class="title">getRunnable</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    Integer num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">      Integer localNum = <span class="number">1000</span>;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">        System.out.println(<span class="string">&quot;localNum = &quot;</span> + localNum);</span><br><span class="line">        System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line">        System.out.println(<span class="string">&quot;outInt = &quot;</span> + outInt);</span><br><span class="line">        System.out.println(<span class="string">&quot;OutClass.outStaticInt = &quot;</span> + OutClass.outStaticInt);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyRunnable();</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>메소드 내 지역변수와 매개변수 i 는 메소드 호출될떄 스택메모리에 생성이된다.</p>
</li>
<li><p>따라서 내부클래스에서 이 지역변수들을 사용할 수있지만 할당은 불가능하다</p>
<ul>
<li>그 이유는 메소드가 호출되는 시점과 클래스의 생성주기가 다르기 때문이다<br>getRunnable()함수가 호출이 끝나고나면 로컬변수와 argument들은 사라지는데 메소드안에 내부 클래스안의 메소드는 다시 호출 될 수있다<br>그때 i와 num이 없을 수 있다 따라서 내부적으로 <code>final</code>로 처리하게 된다.</li>
</ul>
</li>
</ul>
<h3 id="Anonymous-Inner-Class"><a href="#Anonymous-Inner-Class" class="headerlink" title="Anonymous Inner Class"></a>Anonymous Inner Class</h3><ul>
<li><p>위 처럼 사용할 경우 다른 곳에서 해당 클래스를 사용할 필요가 없다 따라서 클래스의 이름을 아얘 지워버리는<br>Anonymous Inner Class가 있다.</p>
</li>
<li><p>클래스의 이름을 생략하고 주로 하나의 인터페이스나 하나의 추상클래스를 구현하여 반환 (ex: Runnable) </p>
</li>
<li><p>안드로이드 widget의 이벤트 핸들러에 활용된다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Runnable <span class="title">getRunnable</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  Integer num = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      Integer localNum = <span class="number">1000</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">      System.out.println(<span class="string">&quot;localNum = &quot;</span> + localNum);</span><br><span class="line">      System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line">      System.out.println(<span class="string">&quot;outInt = &quot;</span> + outInt);</span><br><span class="line">      System.out.println(<span class="string">&quot;OutClass.outStaticInt = &quot;</span> + OutClass.outStaticInt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>inner class</tag>
      </tags>
  </entry>
  <entry>
    <title>Java - Lambda Expression</title>
    <url>/2021/08/23/OOP-java-14/</url>
    <content><![CDATA[<h1 id="람다식"><a href="#람다식" class="headerlink" title="람다식"></a>람다식</h1><h2 id="함수형-프로그래밍"><a href="#함수형-프로그래밍" class="headerlink" title="함수형 프로그래밍"></a>함수형 프로그래밍</h2><ul>
<li>함수는 받아온 매개변수를 기반으로 구현하고 실행됨으로써 <code>Side Effect</code>가 발생하지 않도록 하는 방식이다</li>
<li>이러한 함수를 기반으로 하는 프로그래밍이고 입력 받은 자료 이외에 외부 자료를 사용하지 않아 여러 자료를 동시에<br>수행되는 병렬 처리가 가능하다. </li>
</ul>
<h2 id="람다식-문법"><a href="#람다식-문법" class="headerlink" title="람다식 문법"></a>람다식 문법</h2><ul>
<li><p>함수 이름없이 매개 변수와 매개변수를 이용한 실행문 <code>(매개변수) -&gt; &#123;실행문;&#125;</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123;<span class="keyword">return</span> x+y;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>매개 변수가 하나인 경우 자료형과 괄호 생략이 가능</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str -&gt;  &#123;System.out.println(str);&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>실행문이 한 문장인 경우 중괄호도 생략이 가능하다</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str -&gt; System.out.println(str);</span><br></pre></td></tr></table></figure>
<ul>
<li>그러나 <code>return</code>은 중괄호 생략 불가<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//str -&gt; return str.length(); ❌</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>실행문이 한 문장의 반환문인 경우엔 return과 중괄호 모두 생략 가능</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(x,y) -&gt; x+y;</span><br><span class="line">str -&gt; str.length();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="람다식-구현하기"><a href="#람다식-구현하기" class="headerlink" title="람다식 구현하기"></a>람다식 구현하기</h2><ul>
<li><p>자바에서는 클래스없이 메소드만 선언할 수 없으므로 랃다식을 위한 인터페이스에 메소드를 선언한다</p>
</li>
<li><p>이것을 <strong>Functional Interface</strong>라고 한다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add.java</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Add</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>이렇게 람다식을 선언하기 위한 함수형 인터페이스는 익명 함수와 매개변수만으로 구현되므로<br>인터페이스는 <strong>☝️단 하나만의 메소드</strong>만 선언해야함 </p>
</li>
<li><p><code>@FunctionalInterface</code> Annotation을 이용하여 명시해준다</p>
</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AddTest.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Add add = (x, y) -&gt; &#123;<span class="keyword">return</span> x+y;&#125;;</span><br><span class="line">        System.out.println(add.add(<span class="number">3</span>,<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>람다식 사용시 함수영 인터페이스의 인스턴스에 람다식을 할당해 사용할 수 있다.</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Java - Stream</title>
    <url>/2021/08/24/OOP-java-15/</url>
    <content><![CDATA[<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html">Stream</a></h1><ul>
<li><p>스트림이란 자료의 대상과 관계없이 동일한 연산을 제공하는 것</p>
</li>
<li><p>배열이나 컬렉션 대상으로 연산을 수행함</p>
</li>
<li><p>한번 사용된 스트림은 재사용 할 수 없고 다른 연산을 수행하려면 다시 스트림을 생성해야한다</p>
</li>
<li><p>스트림 연산은 중간 연산과 최종연산으로 구분됨</p>
<ul>
<li>중간연산은 여러개의 연산이 적용됨</li>
<li>최종연산은 마지막에 한번만 적용되며 최종연산이 호출되어야 중간 연산에 대한 수행이 이루어지고 결과가 나타남</li>
<li>따라서 중간에 연산결과를 알 수 없음</li>
<li>이러한 방식을 <strong>Lazy Evaluation</strong>이라 한다</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntArrayStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        for (int num : arr) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(num);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        IntStream is = Arrays.stream(arr);</span><br><span class="line">        is.forEach(n -&gt; &#123; System.out.println(n); &#125;);</span><br><span class="line">        <span class="comment">// is.forEach(n -&gt; &#123; System.out.println(n); &#125;); 한번 사용된 스트림은 재사용 ❌</span></span><br><span class="line">        is = Arrays.stream(arr);</span><br><span class="line">        <span class="keyword">int</span> sum = is.sum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>Arrays.stream()</code>은 해당 배열에대한 <em>Stream</em>을 반환한다<br>  <img src="/image/OOP-java-15_images/streamresult.png"></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">is = Arrays.stream(arr);</span><br><span class="line"><span class="keyword">int</span> sum = is.sum();</span><br><span class="line">System.out.println(sum);</span><br><span class="line"><span class="keyword">long</span> count = Arrays.stream(arr).count();</span><br><span class="line">System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="중간연산-amp-최종연산"><a href="#중간연산-amp-최종연산" class="headerlink" title="중간연산 &amp; 최종연산"></a>중간연산 &amp; 최종연산</h2><ul>
<li>중간연산은 filter(), map(), sorted()… 이있다.<ul>
<li>👀필터와 맵의 차이점은 map 다양한 문자,숫자,배열등 다양한 타입을 반환하는 것이 가능하지만 filter 경우 boolean타입으로만 반환한다는 점이다.</li>
</ul>
</li>
<li>ex: <code>Arrays.stream(arr).filter(num -&gt; num &lt; 3).forEach(num-&gt; System.out.println(num));</code><ul>
<li><code>filter</code>는 중간연산 <code>forEach</code>는 최종연산에 해당된다</li>
</ul>
</li>
<li>최종연산은 forEach() , count(), sum(), reduce()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; sList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sList.add(<span class="string">&quot;kim&quot;</span>);</span><br><span class="line">        sList.add(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">        sList.add(<span class="string">&quot;jeong&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Stream&lt;String&gt; stream = sList.stream();</span><br><span class="line"></span><br><span class="line">        stream.filter(s -&gt; s.contains(<span class="string">&quot;k&quot;</span>)).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        stream = sList.stream();</span><br><span class="line">        <span class="keyword">long</span> count = stream.filter(s -&gt; s.contains(<span class="string">&quot;a&quot;</span>)).count();</span><br><span class="line"></span><br><span class="line">        stream = sList.stream();</span><br><span class="line">        stream.map(s -&gt; s.length()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        stream = sList.stream();</span><br><span class="line">        stream.sorted().forEach(System.out::println);</span><br><span class="line">        System.out.println(sList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="../image/OOP-java-15_images/47770e11.png"></p>
<ul>
<li>해당 예제에서 sorted()를 사용했어도 원래 리스트에서는 값이 변하지 않는다</li>
</ul>
<h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce()"></a>Reduce()</h3><ul>
<li>정의된 연산이 아닌 프로그래머가 직접 구현한 연산을 적용</li>
<li><code>T reduce (T identify, BinaryOperator&lt;T&gt; accumulator)</code> </li>
<li>첫번째 인자는 초기값, 두번째 인자는 람다식</li>
<li><em>accumulator</em>에 람다식을 직접구현하거나 람다식이 길어질경우 BinaryOperator를 구현한 클래스를 사용한다</li>
</ul>
<p>가장 긴 문자열 찾기 예제</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ReduceTest.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String[] fruits = &#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Avocado&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>, <span class="string">&quot;Tomato&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(Arrays.stream(fruits).reduce(<span class="string">&quot;&quot;</span>,(s, s2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> s.length() &gt; s2.length() ? s : s2;</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>BinaryOperator를 구현하여 사용해도 같은 결과가 나온다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FindLongString.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.function.BinaryOperator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindLongString</span> <span class="keyword">implements</span> <span class="title">BinaryOperator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String s, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &gt; s2.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> s2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] fruits = &#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Avocado&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>, <span class="string">&quot;Tomato&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(Arrays.stream(fruits).reduce(&quot;&quot;,(s, s2) -&gt; &#123;return s.length() &gt; s2.length() ? s : s2;&#125;));</span></span><br><span class="line">        System.out.println(Arrays.stream(fruits).reduce(<span class="keyword">new</span> FindLongString()).get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><img src="../image/OOP-java-15_images/68826378.png">  인자가 하나일 경우엔 Accmulator를 받는다</p>
</li>
</ul>
<p>예제</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TravelCustomer.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TravelCustomer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Constrctor</span></span><br><span class="line">  <span class="meta">@Getter</span></span><br><span class="line">  <span class="meta">@Setter</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//TravelCustomerTest.java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TravelCustomerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TravelCustomer kim = <span class="keyword">new</span> TravelCustomer(<span class="string">&quot;Kim&quot;</span>,<span class="number">40</span>, <span class="number">100</span>);</span><br><span class="line">    TravelCustomer park = <span class="keyword">new</span> TravelCustomer(<span class="string">&quot;Park&quot;</span>,<span class="number">20</span>, <span class="number">200</span>);</span><br><span class="line">    TravelCustomer jeong = <span class="keyword">new</span> TravelCustomer(<span class="string">&quot;Jeong&quot;</span>,<span class="number">13</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;TravelCustomer&gt; cList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    cList.add(kim);</span><br><span class="line">    cList.add(park);</span><br><span class="line">    cList.add(jeong);</span><br><span class="line"></span><br><span class="line">    cList.stream().map(travelCustomer -&gt; travelCustomer.getName().toUpperCase()).forEach(System.out::println);</span><br><span class="line">    Integer sum = <span class="number">0</span>;</span><br><span class="line">    System.out.println(cList.stream().mapToInt(c-&gt; c.getPrice()).sum());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;20세 미만고객&quot;</span>);</span><br><span class="line">    cList.stream().filter(travelCustomer -&gt; travelCustomer.getAge() &lt; <span class="number">20</span>).map(c -&gt; c.getName().toUpperCase()).sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>Java - Exception Handling</title>
    <url>/2021/08/25/OOP-java-16/</url>
    <content><![CDATA[<h1 id="예외-처리"><a href="#예외-처리" class="headerlink" title="예외 처리"></a>예외 처리</h1><h2 id="Error-amp-Exception"><a href="#Error-amp-Exception" class="headerlink" title="Error &amp; Exception"></a>Error &amp; Exception</h2><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul>
<li>발생하게되면 복구 할 수 없는 심각한 오류 (메모리오류, 스택오버플로우, etc..)</li>
<li>Compile Error :프로그램 코드 작성중 발생하는 Syntax 오류 IDE에서 대부분 감지할 수 있다.</li>
<li>Run Time Error : <strong>실행중인</strong> 프로그램이 의도 하지 않은 동작을 하거나 프로그램이 중지되는 오류<h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Exception.html">Exception</a></h3></li>
<li>사용자에 의해 발생할 수 있는 의도치 않은 것으로 프로그램에서 제어 할 수 있는 오류이다</li>
</ul>
<pre class="mermaid">graph RL;
Throwable --> Object
Error --> Throwable;
Exception --> Throwable;</pre>

<ul>
<li>모든 예외 클래스의 최상위 클래스는 <strong>Exception</strong> 클래스이다.<br>  <img src="/image/OOP-java-16_images/kindofException.png"></li>
</ul>
<h2 id="예외-처리-1"><a href="#예외-처리-1" class="headerlink" title="예외 처리"></a>예외 처리</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">// 예외가 발생할 수 있는 부분</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (처리할 예외 타입 e) &#123;</span><br><span class="line"><span class="comment">// try블록 안에서 예외가 발생 했을때 예외처리할 부o</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="배열의-오류처리"><a href="#배열의-오류처리" class="headerlink" title="배열의 오류처리"></a>배열의 오류처리</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayExceptionHandling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ; i &lt;= <span class="number">5</span> ; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>해당코드를 실행하게 되면 <img src="/image/OOP-java-16_images/aiobe1.png"> 다음과 같은 오류가 예외가 발생한다</li>
<li>배열의 크기는 5인데 4를 넘어선 인덱스에 접근했기 때문에 발생한 것이다 따라서 <code>ArrayIndexOutOfBoundsException</code> 에 대한 예외처리를 진행해야한다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayExceptionHandling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류가 발생했습니다.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>try-catch를 통해 exception handling할 경우 오류가 나더라도 abort되지않고 실행된다</li>
</ul>
<h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><ul>
<li>try가 블럭이 수행 되는 경우 finally 블럭은 항상 (즉, <code>return</code>이 있어도) 수행된다</li>
<li>파일을 닫거나 리소스를 해제할때 사용된다 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileExceptionHandling</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = nul;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Enter the Argument&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Final sentence&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="/image/OOP-java-16_images/3ef562d5.png">다음 결과와 같이 예외가 발생하여 catch구문에서 return;이 실행되었음에도<br> 불구하고 finally 블럭을 실행한다.</p>
<h3 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h3><ul>
<li>위의 try-catch-finally문은 가독성이떨어지고 지저분하다</li>
<li>JAVA7부터 지원하는 <strong>try-with-resource</strong>를 사용하면 리소르를 사용하는 경우 close()를 사용하지 않아도 자동으로 해제 되도록한다</li>
<li><code>resource()</code>는 try내부에서 선언해야한다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileExceptionHandling</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>])) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>FileInputStream은 Autocloseable이라는 Interface를 구현했기때문에 예외처리와 관계없이 close()가 실행된다.</li>
</ul>
<h3 id="Autocloseable-Interface"><a href="#Autocloseable-Interface" class="headerlink" title="Autocloseable Interface"></a>Autocloseable Interface</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AutocloseableObj.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutocloseableObj</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Closing....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AutoCloseableObjTest.java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutocloseableObjTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AutocloseableObj obj = <span class="keyword">new</span> AutocloseableObj();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(obj) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Occurred Exception!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-16_images/65ef7c4b.png"></p>
<h2 id="예외-처리-미루기"><a href="#예외-처리-미루기" class="headerlink" title="예외 처리 미루기"></a>예외 처리 미루기</h2><ul>
<li>try-catch방식과 다르게 <code>Throw</code>를 통하여 메소드를 사용하는 쪽에서 예외처리를 핸들링함으로써 미룰 수 있다.</li>
<li>Error Detection이나 Log를 남기기 유리한 쪽에서 방식을 선택하는 것이 좋다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">loadClass</span><span class="params">(String fileName, String className)</span> <span class="keyword">throws</span> ClassNotFoundException, FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Exception을 발생시키기 위한 의미없는 코드</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">        Class c = Class.forName(className);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThrowException te = <span class="keyword">new</span> ThrowException();</span><br><span class="line"></span><br><span class="line">        te.loadClass(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>다음과 같이 작성하면 <img src="../image/OOP-java-16_images/5048cd8d.png"> 핸들링되지않은 예외가 있다고 오류가 발생한다</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThrowException te = <span class="keyword">new</span> ThrowException();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        te.loadClass(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>다음과 같이 예외처리를 할 수 있다.</p>
</li>
</ul>
<h2 id="여러개의-Exception을-한번에-처리하기"><a href="#여러개의-Exception을-한번에-처리하기" class="headerlink" title="여러개의 Exception을 한번에 처리하기"></a>여러개의 Exception을 한번에 처리하기</h2><ul>
<li>| 연산자를 통해서 여러 예외를 처리할 수 있다.  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    te.loadClass(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException | FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Default-Exception"><a href="#Default-Exception" class="headerlink" title="Default Exception"></a>Default Exception</h2><ul>
<li>어떤 예외가 발생할지 모르겠지만 예외를 처리하고싶을 때  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception E) &#123; </span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Exception은 최상위 클래스이므로 업스캐팅되기때문에 가장 밑에있어야 한다 </li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>exception</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>Java - Exception Handling2</title>
    <url>/2021/08/25/OOP-java-17/</url>
    <content><![CDATA[<h1 id="Exception-활용"><a href="#Exception-활용" class="headerlink" title="Exception 활용"></a>Exception 활용</h1><ul>
<li>자바에서 제공되는 여러 Exception Class들이 존재하지만 사용자가 직접 정의하여 사용 할 수 있다.</li>
<li>최상위 Exception 클래스를 상속받거나 유사한 Exception 클래스를 상속받아 예외 클래스를 정의할 수 있다</li>
</ul>
<h2 id="패스워드에-대한-예외-처리"><a href="#패스워드에-대한-예외-처리" class="headerlink" title="패스워드에 대한 예외 처리"></a>패스워드에 대한 예외 처리</h2><ul>
<li><p>암호는 여러 가지 요구조건을 만족해야 한다.</p>
<ol>
<li>암호는 Not null이어야 한다.</li>
<li>암호는 5글자 이상이어야 한다.</li>
<li>암호는 영문으로만 구성될 수 없다.</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span> <span class="params">(String pw)</span> <span class="keyword">throws</span> PasswordException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pw == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PasswordException(<span class="string">&quot;패스워드는 Null일 수 없다&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pw.length() &lt; <span class="number">5</span> )&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PasswordException(<span class="string">&quot;패스워드는 5자 이상이어야 한다&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pw.matches(<span class="string">&quot;[a-zAZ]+&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PasswordException(<span class="string">&quot;패스워드는 숫자를 포함해야한다&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.password = pw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PasswordTest passwordTest = <span class="keyword">new</span> PasswordTest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            passwordTest.setPassword(<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류 없음!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PasswordException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-17_images/317bb89d.png"></p>
<h1 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h1><h2 id="오류를-Log로-남기기"><a href="#오류를-Log로-남기기" class="headerlink" title="오류를 Log로 남기기"></a>오류를 Log로 남기기</h2><ul>
<li>프로그램에서의 오류는 재현이 힘들다 따라서 시스템 운영에 대한 기록을 남겨서 오류가 발생했을 때 그 기록을 확인하여 디버깅을 해야한다</li>
<li>디버깅,에러 추적, 성능 향상들을 위해 사용된다</li>
<li>로그가 너무 적거나 많으면 시스템 상황을 파악하기 어려우니 꼭 필요한 정보만 로깅하도록 한다</li>
</ul>
<h2 id="java-util-logging"><a href="#java-util-logging" class="headerlink" title="java.util.logging"></a>java.util.logging</h2><ul>
<li>자바에서는 기본적으로 제공되는 log 패키지가 있다</li>
<li>이 패키지에서 제공하는 로그레벨은 severe, warning, info, config, finer, finest가 있다</li>
<li>기본 패키지 이외에 log4j(log for java)라는 오픈소스가 있다 </li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>exception</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA - IO Stream - Byte단위 스트림</title>
    <url>/2021/08/26/OOP-java-18/</url>
    <content><![CDATA[<h1 id="입출력을-위한-I-O-Stream"><a href="#입출력을-위한-I-O-Stream" class="headerlink" title="입출력을 위한 I/O Stream"></a>입출력을 위한 I/O Stream</h1><h2 id="입출력-스트림-특징"><a href="#입출력-스트림-특징" class="headerlink" title="입출력 스트림 특징"></a>입출력 스트림 특징</h2><ul>
<li>자바는 다양한 입출력(File Disk, 키보드 , 마우스 , 네트워크 등)에 대하여  일관성 있는 입출력 스트림을 제공한다.</li>
<li>대상 기준은 입력 스트림과 출력 스트림으로 구분되고 IO를 동시에 할 순없음</li>
<li>자료의 종류는 단위를 어떻게 핸들링 하냐에 따라바이트 스트림과 문자 스트림으로 구분된다 </li>
<li>기능적으로 실제적으로 입출력기능을하는 기반 스트림과 보조 스트림으로 구분된다</li>
</ul>
<h3 id="입력-스트림과-출력-스트림"><a href="#입력-스트림과-출력-스트림" class="headerlink" title="입력 스트림과 출력 스트림"></a>입력 스트림과 출력 스트림</h3><ul>
<li>입력 스트림 : 대상으로부터 자료를 읽어 들이는 스트림 </li>
<li>출력 스트림 : 대상으로 자료를 출력하는 스트림</li>
</ul>
<pre class="mermaid">graph LR;
JAVA -- Output Stream --> File
File -- input Stream --> JAVA</pre>
<table>
<thead>
<tr>
<th>종류</th>
<th>예시</th>
</tr>
</thead>
<tbody><tr>
<td>입력 스트림</td>
<td>FileInputStream, BufferedInputStream, BufferedReader 등</td>
</tr>
<tr>
<td>출력 스트림</td>
<td>FileOutputStream, BufferedOutputStream, BufferedWriter 등</td>
</tr>
</tbody></table>
<ul>
<li>이름을 보면 어떤 방식인지 직관적으로 알 수 있다</li>
</ul>
<h3 id="바이트-단위-스트림과-문자-단위-스트림"><a href="#바이트-단위-스트림과-문자-단위-스트림" class="headerlink" title="바이트 단위 스트림과 문자 단위 스트림"></a>바이트 단위 스트림과 문자 단위 스트림</h3><ul>
<li>바이트 단위 : 동영상,음악,실행 파일등의 자료를 읽거나 쓸때 사용</li>
<li>문자 단위 : 바이트단위로 자료를 처리할경우 문자는 깨지게되므로 2바이트 이상으로 처리하도록 구현된 스트림</li>
</ul>
<table>
<thead>
<tr>
<th>종류</th>
<th>예시</th>
</tr>
</thead>
<tbody><tr>
<td>바이트 스트림</td>
<td>FileInputStream, FileOutputStream , BufferedInputStream, BufferedOutputStream 등</td>
</tr>
<tr>
<td>문자 스트림</td>
<td>FileReader, FileWriter, BufferedReader, BufferedWriter 등</td>
</tr>
</tbody></table>
<ul>
<li>이름에서 알 수 있듯이 문자스트림에는 stream이 붙지 않음</li>
</ul>
<h3 id="기반-스트림과-보조-스트림"><a href="#기반-스트림과-보조-스트림" class="headerlink" title="기반 스트림과 보조 스트림"></a>기반 스트림과 보조 스트림</h3><ul>
<li>기반 스트림 : 대상에 직접 자료를 읽고씀</li>
<li>보조 스트림 : 직접 읽고스는 기능은 없지만 추가적인 기능을 더해주는 스트림<ul>
<li>직접 읽고 쓰는 기능이 없으므로 기반 스트림이나 다른 보조 스트림을 생성자의 매개 변수로 포함함</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>종류</th>
<th>예시</th>
</tr>
</thead>
<tbody><tr>
<td>기반 스트림</td>
<td>FileInputStream, FileOutputStream , FileReader, FileWriter 등</td>
</tr>
<tr>
<td>보조 스트림</td>
<td>InputStreamReader, OutputStreamReader, BufferedInputStream, BufferedOutputStream</td>
</tr>
</tbody></table>
<h2 id="Standard-IO-Stream"><a href="#Standard-IO-Stream" class="headerlink" title="Standard IO Stream"></a>Standard IO Stream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PrintStream out;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InputStream in;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PrintStream err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>자바 내에서 static 메소드로 정의되어있어서 인스턴스 생성없이 사용 할 수 있다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((i  = System.in.read()) != <span class="string">&#x27;\n&#x27;</span> ) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-18_images/7e0e8e06.png"><br><img src="/image/OOP-java-18_images/63601e51.png"></p>
<ul>
<li>한글을 입력했을 때 깨지는 이유는 System.in 한바이트씩 읽기 때문이다.</li>
<li>보조 스트림 (InputStreamReader)을 이용하여 스트림을 감싸서 해결 할 수 있다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">  <span class="keyword">while</span> ((i  = isr.read()) != <span class="string">&#x27;\n&#x27;</span> ) &#123;</span><br><span class="line">      System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-18_images/1cba350b.png"></p>
<h3 id="Input-Stream"><a href="#Input-Stream" class="headerlink" title="Input Stream"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html">Input Stream</a></h3><ul>
<li>Byte단위 입력 스트림의 최상위 추상 클래스</li>
<li>AudioInputStream, ByteArrayInputStream, FileInputStream, FilterInputStream, InputStream 등 있다<ul>
<li>주요 메소드<table>
<thead>
<tr>
<th>메소드</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>int read()</td>
<td>입력 스트림으로부터 한 바이트의 자료를 읽어 자료의 바이트 수를 반환, EOF일 경우 -1을 반환</td>
</tr>
<tr>
<td>int read(byte[])</td>
<td>입력 스트림으로 부터 b[] 크기의 자료를 b[]에 읽어 읽은 자료의 바이트 수를 반환한다.</td>
</tr>
<tr>
<td>int read(byte[], int offset, int len)</td>
<td>offset 부터 len 만큼 읽기</td>
</tr>
<tr>
<td>void close()</td>
<td>입력 스트림과 연결된 대상 리소스를 닫습니다.</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FileInputStreamTest.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/streamtest/input.txt&quot;</span>);</span><br><span class="line">      System.out.println((<span class="keyword">char</span>) fis.read());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// FileNotFoundException은 IOEXception의 하위</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        fis.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;<span class="comment">// File이 Null일경우의 Exception Handling</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">        System.out.println(e2);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/streamtest/input.txt&quot;</span>);)&#123; <span class="comment">// Auto close를 이용</span></span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">while</span>((i = fis.read() )!= -<span class="number">1</span> ) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>) fis.read());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// FileNotFoundException은 IOEXception의 하위</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>바이트 배열로 파일 읽기</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileIInputStream2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/streamtest/input.txt&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">while</span>  ((i = fis.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> ch : bs) &#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>)ch);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot; : &quot;</span> + i + <span class="string">&quot; 바이트 읽음&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-18_images/dc1d7663.png"></p>
<p>이렇게 qrst가 다시 출력되는 이유는 배열에 인덱스 0 ~ 5까지는 uvwxyz가 들어가지만 그뒤 6 ~ 9까지는 새로운 바이트가 들어오지 않아 다시 출력된다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span> ; index &lt; i ; index++) &#123;</span><br><span class="line">  System.out.print((<span class="keyword">char</span>)bs[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for문을 read의 반환값만큼 실행함으로써 해결할 수있다.</p>
<p><img src="/image/OOP-java-18_images/a11f82f8.png"></p>
<h3 id="Output-Stream"><a href="#Output-Stream" class="headerlink" title="Output Stream"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html">Output Stream</a></h3><ul>
<li><p>Byte 단위 출력 스트림의 최상위 추상 클래스</p>
</li>
<li><p>주요 하위 클래스</p>
<table>
<thead>
<tr>
<th>Stream Class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>FileOutputStream</td>
<td>파일에서 바이트 단위로 자료를 쓴다</td>
</tr>
<tr>
<td>ByteArrayOutputStream</td>
<td>byte 배열 메모리에서 바이트 단위로 자료를 쓴다</td>
</tr>
<tr>
<td>FilterOutputStream</td>
<td>스트림 자료를 쓸 떄 추가 기능을 제공하는 보조 스트림의 상위 클래스</td>
</tr>
</tbody></table>
</li>
<li><p>주요 메소드</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>void write(int c)</td>
<td>출력 스트림으로 한 문자(2byte)를 전달</td>
</tr>
<tr>
<td>void write(byte[] buf)</td>
<td>출력 스트림으로 주어진 문자 배열 cbuf를 모두 전달</td>
</tr>
<tr>
<td>void flush()</td>
<td>버퍼에 남아있는 모든 문자열을 출력</td>
</tr>
<tr>
<td>void close()</td>
<td>출력 스트림과 연결된 대상 리소스를 닫으며 출력 버퍼가 비워진다</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/streamtest/input.txt&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// path, append(Default:false)</span></span><br><span class="line">            fos.write(<span class="number">65</span>);</span><br><span class="line">            fos.write(<span class="number">66</span>);</span><br><span class="line">            fos.write(<span class="number">67</span>);</span><br><span class="line">            fos.write(<span class="number">68</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/streamtest/output.txt&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">try</span> (fos)&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;O&#x27;</span>&#125;;</span><br><span class="line">            fos.write(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-18_images/5ebf020b.png"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>io stream</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA - IO Stream - 문자단위 스트림</title>
    <url>/2021/08/31/OOP-java-19/</url>
    <content><![CDATA[<h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><ul>
<li><p>문자 단위 입력 스트림의 최상위 추상 클래스 </p>
</li>
<li><p>주요 하위 클래스</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>FileReader</td>
<td>파일에서 문자 단위로 읽는 스트림 클래스</td>
</tr>
<tr>
<td>InputStreamReader</td>
<td>바이트 단위의 자료를 문자로 변환해주는 보조 스트림 클래스</td>
</tr>
<tr>
<td>BufferReader</td>
<td>문자로 읽을 때 배열을 제공하여 한번에 읽을 수 있는 기능을 제공하는 보조 스트림 클래스</td>
</tr>
</tbody></table>
</li>
<li><p>주요 메소드</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>int read()</td>
<td>한 문자씩 읽어들임</td>
</tr>
<tr>
<td>void close()</td>
<td>입력 스트림과 연결된 대상 리소스를 닫음</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(FileReader fis = <span class="keyword">new</span> FileReader(<span class="string">&quot;src/streamtest/reader.txt&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> i ;</span><br><span class="line">            <span class="keyword">while</span> ( ( i = fis.read()) != -<span class="number">1</span>)  &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h2><ul>
<li><p>문자 단위 출력 스트림의 최상위 추상 클래스</p>
</li>
<li><p>주요 하위 클래스</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>FileWriter</td>
<td>파일에서 문자 단위로 출력하는 스트림 클래스</td>
</tr>
<tr>
<td>InputStreamReader</td>
<td>바이트 단위의 자료를 문자로 변환해 출력하는 보조 스트림 클래스</td>
</tr>
<tr>
<td>BufferReader</td>
<td>문자로 쓸 때 배열을 제공하여 한번에 읽을 수 있는 기능을 제공하는 보조 스트림 클래스</td>
</tr>
</tbody></table>
</li>
<li><p>주요 메소드</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>void write(int c)</td>
<td>한 문자를 파일에 쓴다</td>
</tr>
<tr>
<td>void write(char[] cbuf,int off, int len)</td>
<td>받아온 cbuf를 off부터 len개 파일에 쓴다</td>
</tr>
<tr>
<td>void flush()</td>
<td>버퍼에 있는 데이터를 모두 파일로 옮김</td>
</tr>
<tr>
<td>void close()</td>
<td>출력 스트림과 연결된 대상 리소스를 닫음</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;src/streamtest/writer.txt&quot;</span>,<span class="keyword">true</span>)) &#123;</span><br><span class="line">            fw.write(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">            <span class="keyword">char</span>[] cbuf = &#123;<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;O&#x27;</span>&#125;;</span><br><span class="line">            String s = <span class="string">&quot;WORLD&quot;</span>;</span><br><span class="line">            fw.write(cbuf);</span><br><span class="line">            fw.write(s);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>객체 지향 프로그래밍 - Basic 2</title>
    <url>/2021/08/12/OOP-java-2/</url>
    <content><![CDATA[<h1 id="인스턴스-생성과-힙-메모리"><a href="#인스턴스-생성과-힙-메모리" class="headerlink" title="인스턴스 생성과 힙 메모리"></a>인스턴스 생성과 힙 메모리</h1><h2 id="인스턴스-Instance"><a href="#인스턴스-Instance" class="headerlink" title="인스턴스 (Instance)"></a>인스턴스 (Instance)</h2><ul>
<li><p>객체의 속성과 기능을 구현한 상태의 클래스를 기반으로 생성된 객체를 인스턴스라고한다</p>
</li>
<li><p>각 인스턴스는 서로 다른 멤버 변수 값을 가질 수 있음</p>
</li>
<li><p>new 키워드를 사용하여 인스턴스 생성</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student bob = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="힙-메모리-Heap-Memory"><a href="#힙-메모리-Heap-Memory" class="headerlink" title="힙 메모리 (Heap Memory)"></a>힙 메모리 (Heap Memory)</h2><ul>
<li>생성된 인스턴스는 동적 메모리에 할당된다</li>
<li>자바는 가비지 컬렉터가 쓰지않는 메모리를 해제한다</li>
<li>각 인스턴스는 다른 메모리 주소를 갖는다</li>
</ul>
<h2 id="생성자-Constructor"><a href="#생성자-Constructor" class="headerlink" title="생성자 (Constructor)"></a>생성자 (Constructor)</h2><ul>
<li><p>객체를 생성할 때 사용되는 함수</p>
</li>
<li><p>객체가 생성될 때 객체의 속성을 초기화 하거나 다른 기능을 수행하는 메소드를 호출함</p>
</li>
<li><p>생성자는 반환값이 없고 클래스 이름과 동일함</p>
</li>
<li><p>생성자를 구현하지 않았을 때에는 Default Constructor가 호출된다</p>
</li>
<li><p>생성자는 메소도 오버로딩을 하여 구현할 수 있다</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> StudentNumber;</span><br><span class="line">    <span class="keyword">private</span> String StudentName;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123; <span class="comment">// Default Constructor</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span> <span class="params">(<span class="keyword">int</span> num, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.StudentNumber = num;</span><br><span class="line">        <span class="keyword">this</span>.StudentName = name;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>oop</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>oop</tag>
        <tag>heap</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA - IO Stream - 보조 스트림</title>
    <url>/2021/08/31/OOP-java-20/</url>
    <content><![CDATA[<h2 id="보조-스트림"><a href="#보조-스트림" class="headerlink" title="보조 스트림"></a>보조 스트림</h2><ul>
<li><p>실제 읽고 쓰는 스트림이 아닌 추가적인 기능을 제공하는 스트림</p>
</li>
<li><p><code>FileterInputStream</code> , <code>FilterOutputStream</code> 추상클래스를 상속받아 구현</p>
</li>
<li><p>보조스트림은 독립적으로 실행 될 수 없기때문에 매개변수로 다른 스트림으로 받음</p>
</li>
<li><p><strong>Decorator Pattern</strong>으로 구현됨.</p>
<ul>
<li>상속의 복잡성을 피하기위해 여러개의 다양한 기능을 조합하는 디자인패턴</li>
</ul>
</li>
<li><p>상위 클래스 생성자</p>
<table>
<thead>
<tr>
<th>Constructor</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>protected FilterInputStream(InputStream in)</code></td>
<td>생성자의 매개 변수로 inputStream을 받는다.</td>
</tr>
<tr>
<td><code>public FilterOutputStream (OutputStream out)</code></td>
<td>생성자의 매개변수로 OutputStream을 받는다.</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="InputStreamReader-amp-OutputStreamWriter"><a href="#InputStreamReader-amp-OutputStreamWriter" class="headerlink" title="InputStreamReader &amp; OutputStreamWriter"></a><a href="https://docs.oracle.com/javase/7/docs/api/java/io/InputStreamReader.html">InputStreamReader</a> &amp; <a href="https://docs.oracle.com/javase/7/docs/api/java/io/OutputStreamReader.html">OutputStreamWriter</a></h3><ul>
<li>바이트 단위로 읽거나 쓰는 자료를 문자로 변환해주는 보조 스트림</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/streamtest/reader.txt&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">int</span> i ;</span><br><span class="line">            <span class="keyword">while</span> ( (i = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e ) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>FileInputStream은 Byte단위로 자료를 읽고쓰기때문에 한글을 읽을때 깨진다<br>InputStreamReader 보조스트림으로 감싸서 생성하면 해결할 수 있다</p>
<h3 id="BufferedInputStream-amp-BufferedOutputStream"><a href="#BufferedInputStream-amp-BufferedOutputStream" class="headerlink" title="BufferedInputStream &amp; BufferedOutputStream"></a><a href="https://docs.oracle.com/javase/7/docs/api/java/io/BufferedInputStream.html">BufferedInputStream</a> &amp; <a href="https://docs.oracle.com/javase/7/docs/api/java/io/BufferedOutputStream.html">BufferedOutputStream</a></h3><ul>
<li><p>입출력시 버퍼링 기능을 추가하여 빠른 동작을 제공하는 보조 스트림</p>
</li>
<li><p>FileInputStream VS Buffered</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> millisecond = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/streamtest/dummy.txt&quot;</span>); <span class="comment">// 5000 BYTE의 더미 텍스트</span></span><br><span class="line">             FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/streamtest/copy.txt&quot;</span>)) &#123;</span><br><span class="line">            millisecond = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">while</span> ( (i = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(i);</span><br><span class="line">            &#125;</span><br><span class="line">            millisecond = System.currentTimeMillis() - millisecond;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(millisecond);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/image/OOP-java-20_images/9dab73e0.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> millisecond = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/streamtest/dummy.txt&quot;</span>)); <span class="comment">// 5000 BYTE의 더미 텍스트</span></span><br><span class="line">             BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/streamtest/copy.txt&quot;</span>))) &#123;</span><br><span class="line">            millisecond = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">while</span> ( (i = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(i);</span><br><span class="line">            &#125;</span><br><span class="line">            millisecond = System.currentTimeMillis() - millisecond;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(millisecond);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-20_images/f70c4103.png"></p>
<h3 id="DataInputStream-amp-DataOutputStream"><a href="#DataInputStream-amp-DataOutputStream" class="headerlink" title="DataInputStream &amp; DataOutputStream"></a><a href="https://docs.oracle.com/javase/7/docs/api/java/io/DataInputStream.html">DataInputStream</a> &amp; <a href="https://docs.oracle.com/javase/7/docs/api/java/io/DataOutputStream.html">DataOutputStream</a></h3><ul>
<li>메모리에 저장된 상태 그대로 읽거나 쓰는 스트림</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span>(FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">				DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(fos))</span><br><span class="line">		&#123;</span><br><span class="line">		</span><br><span class="line">			dos.writeByte(<span class="number">100</span>);</span><br><span class="line">			dos.writeChar(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">			dos.writeInt(<span class="number">10</span>);</span><br><span class="line">			dos.writeFloat(<span class="number">3.14f</span>);</span><br><span class="line">			dos.writeUTF(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">				DataInputStream dis = <span class="keyword">new</span> DataInputStream(fis))</span><br><span class="line">		&#123;</span><br><span class="line">		</span><br><span class="line">			System.out.println(dis.readByte());</span><br><span class="line">			System.out.println(dis.readChar());</span><br><span class="line">			System.out.println(dis.readInt());</span><br><span class="line">			System.out.println(dis.readFloat());</span><br><span class="line">			System.out.println(dis.readUTF());</span><br><span class="line">		&#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>데이터의 형에따라 읽거나 쓰는 바이트 수가 다르기떄문에 반드시 읽거나 쓴 순서를 지켜야 한다 </li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java - Serialization</title>
    <url>/2021/08/31/OOP-java-21/</url>
    <content><![CDATA[<h1 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h1><ul>
<li>직렬화란 데이터 구조나 오브젝트 상태를 동일하거나 다른 컴퓨터 환경에 저장하고 나중에 재구성 할 수 있는 포맷으로 변환하는 과정</li>
<li>이때 저장하는 과정을 Serialization 재구성하는 것을 Deserialization이라 함</li>
<li>자바에서는 보조 스트림을 활용하여 직렬화를 제공한다<ul>
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/io/ObjectInputStream.html">ObjectInputStream</a> &amp; <a href="https://docs.oracle.com/javase/7/docs/api/java/io/ObjectOutputStream.html">ObjectOutputStream</a></li>
</ul>
</li>
</ul>
<h2 id="Serializable-Interface"><a href="#Serializable-Interface" class="headerlink" title="Serializable Interface"></a>Serializable Interface</h2><ul>
<li>직렬화는 인스턴스를 외부로 보내는 과정이기 때문에 해당 인스턴스에대한 직렬화 의도를 명시해야함</li>
<li>구현 코드가 없는 marker interface</li>
<li>transient: 직렬화 하지 않으려는 멤버 변수에 사용 (Socket 등 직렬화 할 수 없는 객체)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  String job;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String job)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person kim = <span class="keyword">new</span> Person(<span class="string">&quot;Kim&quot;</span>, <span class="string">&quot;PM&quot;</span>);</span><br><span class="line">    Person park = <span class="keyword">new</span> Person(<span class="string">&quot;Park&quot;</span>, <span class="string">&quot;Programmer&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/serializationTest/serial.txt&quot;</span>);</span><br><span class="line">         ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos)) &#123;</span><br><span class="line">      oos.writeObject(kim);</span><br><span class="line">      oos.writeObject(park);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e ) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/serializationTest/serial.txt&quot;</span>);</span><br><span class="line">         ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis) ) &#123;</span><br><span class="line">      Person pKim = (Person) ois.readObject(); <span class="comment">// readObjec할때 클래스에대한 정보가 없을 수 있으므로 CNFE 예외가 발생할 수 있다.</span></span><br><span class="line">      Person pPark = (Person) ois.readObject();</span><br><span class="line"></span><br><span class="line">      System.out.println(pPark);</span><br><span class="line">      System.out.println(pKim);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-21_images/c8ae371a.png"></p>
<ul>
<li>이러한 오류를 뿜는 이유는 <code>writeObject()</code> 할 때 인스턴스가 Serializable하지 않기 때문이다</li>
<li>따라서 Person클래스에 Serializable Interface를 명시해줘야 한다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-21_images/152f4643.png"></p>
<ul>
<li><code>Socket</code>같은 직렬화가 불가능한 멤버의 경우 transient 예약어를 사용하면 직렬화 할때 해당 멤버를 무시할 수 있다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="keyword">transient</span> String job;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/image/OOP-java-21_images/adf3e981.png"></p>
<h2 id="Externalizable-Interface"><a href="#Externalizable-Interface" class="headerlink" title="Externalizable Interface"></a>Externalizable Interface</h2><ul>
<li>프로그래머가 Object를 직접 객체를 읽고쓰는 코드를 구현할 수있다</li>
<li>writeExternal() , readExternal() 메소드를 구현해야함</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    out.writeUTF(name);</span><br><span class="line">    out.writeUTF(job);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    name = in.readUTF();</span><br><span class="line">    job = in.readUTF();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>serialization</tag>
      </tags>
  </entry>
  <entry>
    <title>객체지향 프로그래밍 - Decorator</title>
    <url>/2021/08/31/OOP-java-22/</url>
    <content><![CDATA[<h1 id="Decorator-Pattern"><a href="#Decorator-Pattern" class="headerlink" title="Decorator Pattern"></a>Decorator Pattern</h1><ul>
<li>자바 입출력 스트림은 decorator pattern으로 구현되어 있다</li>
<li>여러 decorator들을 추가하여 기능을 제공할 수 있다</li>
<li>기능확장에있어서 상속보다 유연하다</li>
<li>Decorator는 다른 Decorator나 Component(Real Object)를 포함하여야 한다<ul>
<li>decorator는 보조 스트림 Component는 기반 스트림 클래스이다.</li>
</ul>
</li>
</ul>
<p><img src="/image/OOP-java-22_images/f4c3e0b1.png"></p>
<h2 id="데코레이터-실생활-적용-예시-커피만들기"><a href="#데코레이터-실생활-적용-예시-커피만들기" class="headerlink" title="데코레이터 실생활 적용 예시 (커피만들기)"></a>데코레이터 실생활 적용 예시 (커피만들기)</h2><ul>
<li>커피라는 Component에 시럽이나 우유같은 Decorator등을 추가해서 다양한 커피를 제조 할 수있다</li>
</ul>
<p><img src="/image/OOP-java-22_images/c77689c5.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Coffee.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span>  <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Decorator.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123; <span class="comment">//혼자 사용할 수 없음, 상속용</span></span><br><span class="line"></span><br><span class="line">    Coffee coffee;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Coffee coffee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        coffee.brewing();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EtiopiaAmericano.java # Coffee의 Concrete Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EtiopiaAmericano</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Etiopia Americano&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Latte.java # Concrete Decorator</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Latte</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Latte</span><span class="params">(Coffee coffee)</span> </span>&#123; <span class="comment">// 상위클래스의 기본생성자가 구현이 안되어있으므로</span></span><br><span class="line">    <span class="keyword">super</span>(coffee);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.brewing();</span><br><span class="line">    System.out.println(<span class="string">&quot;Added Milk&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>java</category>
        <category>oop</category>
        <category>design pattern</category>
      </categories>
      <tags>
        <tag>decorator pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Java - Thread</title>
    <url>/2021/09/01/OOP-java-23/</url>
    <content><![CDATA[<h1 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h1><h2 id="Thread-1"><a href="#Thread-1" class="headerlink" title="Thread"></a>Thread</h2><ul>
<li>프로그램이 메모리를 할당받아 실행중인 상태를 프로세스라고 한다</li>
<li>Thread는 Process내에서 실제 작업을 수행하는 단위이다</li>
</ul>
<h2 id="Multi-Thread"><a href="#Multi-Thread" class="headerlink" title="Multi Thread"></a>Multi Thread</h2><ul>
<li>여러 Thread가 동시에 수행되는 프로그래밍, 여러 작업이 동시에 실행될 수 있다</li>
<li>Thread는 Context라는 각각 작업 공간을 가진다</li>
<li>static instance를 사용해 자원을 공유 할 수있음</li>
<li>여러 thread가 자원을 공유하여 작업이 수행되는 경우 race condition이 발생 할 수있다.</li>
</ul>
<h2 id="Java에서-Thread-만들기"><a href="#Java에서-Thread-만들기" class="headerlink" title="Java에서 Thread 만들기"></a>Java에서 Thread 만들기</h2><h3 id="extends-Thread"><a href="#extends-Thread" class="headerlink" title="extends Thread"></a>extends Thread</h3><ul>
<li>Thread 클래스 상속받아 Runnable 인터페이스 객체의 함수를 실행시키는 방법</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt; <span class="number">200</span> ; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread my1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread my2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        my1.start();</span><br><span class="line">        my2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="/image/OOP-java-23_images/0cb5eb30.png"></p>
<h3 id="implements-Runnable"><a href="#implements-Runnable" class="headerlink" title="implements Runnable"></a>implements Runnable</h3><ul>
<li>이미 다른 클래스의 상속을 받은 경우 Runnable Interface 구현을 통해 만들 수 있다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt; <span class="number">200</span> ; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread runnableInstance = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        Thread myThread1 = <span class="keyword">new</span> Thread(runnableInstance);</span><br><span class="line">        Thread myThread2 = <span class="keyword">new</span> Thread(runnableInstance);</span><br><span class="line"></span><br><span class="line">        myThread1.start();</span><br><span class="line">        myThread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Interface의 익명객체를 만들어 사용할수도 있다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span> ; c &lt;= <span class="string">&#x27;z&#x27;</span> ; c++) &#123;</span><br><span class="line">                    System.out.println(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread myThread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Thread의-상태"><a href="#Thread의-상태" class="headerlink" title="Thread의 상태"></a>Thread의 상태</h2><ul>
<li>Thread는 start함수를 통해 Runnable한 thread객체들이 Thread Pool에 들어가게 된다</li>
<li>프로그램이 CPU의 자원을 할당받으면 <strong>Run</strong> 상태가되며 작업이 끝나면 <strong>Dead</strong>상태가 된다</li>
<li><code>sleep()</code>,<code>wait()</code>,<code>join()</code> 함수를 통해 <strong>Not Runnable</strong>상태가 되는데 이때는 CPU의 할당을 받을 수 없다</li>
<li><code>notify()</code>,<code>notifyAll()</code>, <code>join()</code> 함수를 통해 <strong>Runnable</strong> 상태로 돌아온다</li>
</ul>
<h2 id="Thread-Methods"><a href="#Thread-Methods" class="headerlink" title="Thread Methods"></a>Thread Methods</h2><h3 id="Priority"><a href="#Priority" class="headerlink" title="Priority()"></a><code>Priority()</code></h3><ul>
<li>Thread의 우선순위를 정할 수 있는데 우선 순위가 높을 수록 CPU의 할당을 받을 <strong>확률</strong>이 높아진다 여기에서 확률이라 한 이유는 무조건적으로 높은 우선순위가<br>CPU를 점유하지 않기 때문이다</li>
<li><code>setPriority()</code> <code>getPriority()</code> 로 set/get할 수 있으며 Default는 5이다</li>
</ul>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a><code>join()</code></h3><ul>
<li>Thread가 동시 실행될때 하나의 Thread가 다른 Thread의 값을 참조해야 할때 사용한다</li>
<li><code>join()</code> 함수를 <strong>호출</strong>한 Thread가 Not Runnable 상태로 전환된다</li>
<li><code>join()</code>이 걸린 Thread의 작업이 끝나면 Runnable 상태로 되돌아간다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">int</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JoinTest</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = start; i &lt;= end ; i ++) &#123;</span><br><span class="line">            total += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JoinTest jt1 = <span class="keyword">new</span> JoinTest(<span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line">        JoinTest jt2 = <span class="keyword">new</span> JoinTest(<span class="number">51</span> ,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        jt1.start();</span><br><span class="line">        jt2.start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jt1.join();</span><br><span class="line">            jt2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(jt1.total + jt2.total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a><code>interrupt()</code></h3><ul>
<li>다른 Thread에 예외를 발생 시키는 interrupt를 보낸다</li>
<li>Non runnable 상태일때 <code>interrupt()</code> 메소드를 호출함으로써 runnable 상태로 전환 할 수 있음</li>
</ul>
<h3 id="Thread-종료하기"><a href="#Thread-종료하기" class="headerlink" title="Thread 종료하기"></a>Thread 종료하기</h3><ul>
<li>Thread가 무한 루프되는 경우 <code>while(flag)</code> 에서 <strong>flag</strong>를 false로 바꿔 종료함</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java - Multi Threads &amp; Synchronization</title>
    <url>/2021/09/01/OOP-java-24/</url>
    <content><![CDATA[<h1 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h1><h2 id="critical-section-amp-semaphore"><a href="#critical-section-amp-semaphore" class="headerlink" title="critical section &amp; semaphore"></a>critical section &amp; semaphore</h2><ul>
<li><strong>임계영역(critical section)</strong> 은 두 개 이상의 thread가 동시에 접근 하는 경우 문제가 발생 가능성이 있어 동시에 접근 할 수 없는 영역이다.</li>
<li><strong>semaphore</strong>는 임계영역에 접근 할 수 있는 권한을 주는 객체이며 get/release하는 두개 기능이 있다</li>
<li><strong>semaphore</strong>를 가진 Thread만 임계영역에 접근 가능하며 <strong>release</strong>전 까지 나머지 thread들은 <strong>block</strong>상태가 된다</li>
</ul>
<p>임계영역을 핸들링 하지 않은 경우</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bank.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Money = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depositMoney</span><span class="params">(<span class="keyword">int</span> deposit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = getMoney();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        setMoney(m + deposit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdrawMoney</span><span class="params">(<span class="keyword">int</span> withdraw)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = getMoney();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        setMoney(m - withdraw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Alice.java &amp; Bob.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alice</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Start deposit&quot;</span>);</span><br><span class="line">        SyncMain.myBank.depositMoney(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;deposit (3000) :&quot;</span> + SyncMain.myBank.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bob</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Start Withdraw&quot;</span>);</span><br><span class="line">        SyncMain.myBank.withdrawMoney(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;withdraw (1000) :&quot;</span> + SyncMain.myBank.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><img src="/image/OOP-java-24_images/394c3b08.png"> 1000원을 출금하고 3000원을 저축했음에도 13000원이라는 결과가 나왔다</p>
</li>
<li><p>Alice가 값을 저장하기전에 Bob이 값을 가져갔기때문이다</p>
</li>
<li><p>동기화가 필요한 메소드에 <strong>synchronized</strong> 키워드를 적용시킨다</p>
<ul>
<li>해당 메소드가 실행되는 동안 안에있는 인스턴스들이 lock상태가 된다 </li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bank.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">depositMoney</span><span class="params">(<span class="keyword">int</span> deposit)</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">withdrawMoney</span><span class="params">(<span class="keyword">int</span> withdraw)</span> </span>&#123; ... &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-24_images/7981f67b.png"></p>
<ul>
<li>다른 방식으로는 Synchronized block을 사용해 메소드가 실행되는동안 객체에 block을 걸 수 있다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depositMoney</span><span class="params">(<span class="keyword">int</span> deposit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = getMoney();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        setMoney(m + deposit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>synchonized(mutex)</code> mutex에 공유되는 자원을 넣는다</li>
<li>synchonized메소드를 다른 synchonized 메소드에서 호출되게 되면 Dead Lock에 빠질 수 있다.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java - Synchronization - wait()/notify()</title>
    <url>/2021/09/02/OOP-java-25/</url>
    <content><![CDATA[<h2 id="wait-notify-메소드"><a href="#wait-notify-메소드" class="headerlink" title="wait()/notify() 메소드"></a>wait()/notify() 메소드</h2><ul>
<li>자원이 어떤 조건에 의하여 더 이상 이용가능하지 않은 경우 다른 자원을 기다리기위해 해당 thread가 wait()상태가 된다</li>
<li>wait상태의 thread는 <code>notify()</code>가 호출 될 때 까지 대기한다</li>
<li>이때 <code>notify()</code>가 깨우는 thread는 무작위로 재시작한다</li>
<li>따라서 무한으로 대기하는 thread가 생길 확률이 있으므로 <code>notifyAll()</code>메소드를 권장한다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Library.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;String&gt; shelf = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Library</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        shelf.add(<span class="string">&quot;book1&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;book2&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;book3&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;book4&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;book5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lendBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread(); <span class="comment">// 메소드를 실행하고있는 스레드</span></span><br><span class="line">        String book = shelf.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; lend &quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnBook</span><span class="params">(String book)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        shelf.add(book);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot;return &quot;</span> + book);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//student.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String title = LibraryTest.library.lendBook();</span><br><span class="line">            <span class="keyword">if</span> (title == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            sleep(<span class="number">5000</span>);</span><br><span class="line">            LibraryTest.library.returnBook(title);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LibraryTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Library library = <span class="keyword">new</span> Library();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student std1 = <span class="keyword">new</span> Student(<span class="string">&quot;std1&quot;</span>);</span><br><span class="line">        Student std2 = <span class="keyword">new</span> Student(<span class="string">&quot;std2&quot;</span>);</span><br><span class="line">        Student std3 = <span class="keyword">new</span> Student(<span class="string">&quot;std3&quot;</span>);</span><br><span class="line">        Student std4 = <span class="keyword">new</span> Student(<span class="string">&quot;std4&quot;</span>);</span><br><span class="line">        Student std5 = <span class="keyword">new</span> Student(<span class="string">&quot;std5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        std1.start();</span><br><span class="line">        std2.start();</span><br><span class="line">        std3.start();</span><br><span class="line">        std4.start();</span><br><span class="line">        std5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-25_images/be9d354e.png"></p>
<ul>
<li>리소스가 풍부할때는 아무 문제가 없다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Library</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        shelf.add(<span class="string">&quot;book1&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;book2&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;book3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-25_images/0c1db0c9.png"></p>
<ul>
<li>critical scection의 문제가 아닌 자원이 부족하기때문에 <code>synchronized</code> 키워드로 해결 할 수없다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">lendBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread(); <span class="comment">// 메소드를 실행하고있는 스레드</span></span><br><span class="line">        <span class="keyword">if</span> (shelf.size() &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            String book = shelf.remove(<span class="number">0</span>);</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; lend &quot;</span> + book);</span><br><span class="line">            <span class="keyword">return</span> book;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/OOP-java-25_images/1b723d17.png"></p>
<ul>
<li>오류는 없지만 다른 학생들은 아얘 빌리지 못하는 상태가 된다</li>
<li>이때 <code>wait()</code> 메소드를 사용하여 메소드를 사용하고있는 thread를 <strong>unrunnable</strong> 상태로 만들 수 있다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">lendBook</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread(); <span class="comment">//메소드를 실행하고있는 스레드</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( shelf.size() == <span class="number">0</span> ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Waiting Thread is &quot;</span> + t.getName());</span><br><span class="line">            wait();</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot;end waiting&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shelf.size() &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        String book = shelf.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; lend &quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">returnBook</span><span class="params">(String book)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        shelf.add(book);</span><br><span class="line">        notify();</span><br><span class="line">        System.out.println(<span class="string">&quot;returned &quot;</span> + book);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; return &quot;</span> + book);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="/image/OOP-java-25_images/OOP-java-25-1630596717579.gif"></p>
<ul>
<li>다음 결과와 같이 자원이 반환될떄까지 thread가 기다렸다가 notify를 받고 다시 진행된다.</li>
<li>notifyAll() 할 경우 다른 Thread들이 모두 자원을 가져가게되면 자원을 받지 못할 경우가 생길 수 있다<br>이에대한 handling이 필요하다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">lendBook</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread(); <span class="comment">//메소드를 실행하고있는 스레드</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( shelf.size() == <span class="number">0</span> ) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Waiting Thread is &quot;</span> + t.getName());</span><br><span class="line">        wait();</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot;end waiting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shelf.size() &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        String book = shelf.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; lend &quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">returnBook</span><span class="params">(String book)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        shelf.add(book);</span><br><span class="line">        notifyAll();</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; return &quot;</span> + book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>빌리려고 꺠어났을때 책이 없을때 다시 wait()을 호출해야한다.</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>synchronization</tag>
      </tags>
  </entry>
  <entry>
    <title>객체 지향 프로그래밍 - 자료형</title>
    <url>/2021/08/12/OOP-java-3/</url>
    <content><![CDATA[<h1 id="참조-자료형-변수"><a href="#참조-자료형-변수" class="headerlink" title="참조 자료형 변수"></a>참조 자료형 변수</h1><h2 id="참조-자료형-Reference-Data-Type"><a href="#참조-자료형-Reference-Data-Type" class="headerlink" title="참조 자료형 (Reference Data Type)"></a>참조 자료형 (Reference Data Type)</h2><ul>
<li><p>자바에서의 자료형은 크게 두가지로 </p>
</li>
<li><p>byte,short,int,char,float,double,boolean과 같은 기본 자료형이 있고</p>
</li>
<li><p>String과 Date등 또는 원하는 클래스를 구현하여 참조 자료형으로 만들 수 있다.</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Subject.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    String subjectName;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> subjectID;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Student.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> StudentNumber;</span><br><span class="line">    <span class="keyword">private</span> String StudentName;</span><br><span class="line">    <span class="keyword">private</span> Subject Math = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123; <span class="comment">// Default Constructor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span> <span class="params">(<span class="keyword">int</span> num, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.StudentNumber = num;</span><br><span class="line">        <span class="keyword">this</span>.StudentName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>위 예시처럼 클래스로 만들 수 있다</p>
</li>
<li><p>참조 자료형은 new키워드로 생성한다.</p>
</li>
<li><p>따라서 스택에 직접 값을 할당하는것이 아니라 스택에는 힙영역의 주소를 참조하고있고 실제 값은 힙영역에 올라간다.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
        <category>oop</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>oop</tag>
      </tags>
  </entry>
  <entry>
    <title>객체 지향 프로그래밍 - 접근 제어자</title>
    <url>/2021/08/13/OOP-java-4/</url>
    <content><![CDATA[<h1 id="접근-제어자와-정보-은닉"><a href="#접근-제어자와-정보-은닉" class="headerlink" title="접근 제어자와 정보 은닉"></a>접근 제어자와 정보 은닉</h1><h2 id="접근-제어-지시자-access-modifier"><a href="#접근-제어-지시자-access-modifier" class="headerlink" title="접근 제어 지시자(access modifier)"></a>접근 제어 지시자(access modifier)</h2><ul>
<li><p>접근제어지시자를 통해 정보은닉을 활용한 캡슐화가 구현이 된다.</p>
</li>
<li><p>클래스의 외부에서 클래스 내의 멤버변수, 메서드 , 생성자를 사용여부를 나타내는 키워드</p>
<ul>
<li>private 같은 클래스 내부에서만 접근 가능</li>
<li>default(아무것도 안쓴경우) 같은 패키지 내부에서만 접근 가능</li>
<li>protected 같은 패키지나 상속관계의 클래스에서 접근 가능</li>
<li>public 클래스의 외부 어디서나 접근 할 수 있음</li>
</ul>
</li>
<li><p>public get()/set() 메소드를 통하여 private한 멤버변수를 접근한다</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name.length() &lt; <span class="number">10</span>) &#123; <span class="comment">// 정보를 보호함과 동시에 유효성을 검사 할 수 있다.</span></span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="정보-은닉을-활용한-캡슐화"><a href="#정보-은닉을-활용한-캡슐화" class="headerlink" title="정보 은닉을 활용한 캡슐화"></a>정보 은닉을 활용한 캡슐화</h2><ul>
<li><p>캡슐화는 슈퍼클래스로부터 자식 클래스를 외부로 은닉하는 행위</p>
</li>
<li><p>꼭 필요한 정보와 기능만 외부에 오픈함으로써 메서드나 멤버변수의 접근하면서 발생 할 수있는<br>오류를 최소화 한다.</p>
</li>
<li><p>캡슐화는 객체간 소통시 세부사항을 알 필요 없어서 낮은 결합도를 제공함</p>
</li>
</ul>
]]></content>
      <categories>
        <category>oop</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>access modifier</tag>
        <tag>capsulation</tag>
      </tags>
  </entry>
  <entry>
    <title>객체 지향 프로그래밍 - Static</title>
    <url>/2021/08/13/OOP-java-5/</url>
    <content><![CDATA[<h1 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h1><h2 id="Static-변수"><a href="#Static-변수" class="headerlink" title="Static 변수"></a>Static 변수</h2><ul>
<li><p>static은 변수앞에 붙는 키워드로 인스턴스가 생성될 떄 만들어지는 변수가 아닌 처음 프로그램이 메모리에 로딩 될때 메모리에 할당된다.</p>
</li>
<li><p>클래스 변수, 정적변수라고도 한다</p>
</li>
<li><p>메모리의 데이터영역에 저장된다. *인스턴스는 힙영역</p>
</li>
<li><p>인스턴스 생성과 상관없이 사용가능해서 클래스 이름으로 접근이 가능하다</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> staticTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> serialNum = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> employeeId;</span><br><span class="line">    <span class="keyword">private</span> String employeeName;</span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String employeeName, String department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.employeeName = employeeName;</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">        <span class="keyword">this</span>.employeeId = ++serialNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmployeeName</span><span class="params">(String employeeName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.employeeName = employeeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">(String department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmployeeName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEmployeeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> staticTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employee kim = <span class="keyword">new</span> Employee(<span class="string">&quot;kim&quot;</span>,<span class="string">&quot;hs&quot;</span>);</span><br><span class="line">        Employee woo = <span class="keyword">new</span> Employee(<span class="string">&quot;woo&quot;</span>,<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        Employee choi = <span class="keyword">new</span> Employee(<span class="string">&quot;choi&quot;</span>,<span class="string">&quot;man&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(kim.getEmployeeId());</span><br><span class="line">        System.out.println(woo.getEmployeeId());</span><br><span class="line">        System.out.println(choi.getEmployeeId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1001</p>
<p>1002</p>
<p>1003</p>
</li>
</ul>
<h2 id="Static-Method"><a href="#Static-Method" class="headerlink" title="Static Method"></a>Static Method</h2><ul>
<li><p>스태틱 메소드는 instance변수를 사용할 수 없다</p>
</li>
<li><p>스태틱 키워드는 인스턴스의 생성과 무관하게 사용할 수 있기 때문에 당연히</p>
</li>
<li><p>힙영역에 메모리가 존재하지 않아, 인스턴스를 필요로하는 일반 멤버 변수를 사용 할 수 없다.</p>
</li>
</ul>
<h2 id="Static-응용-Singleton-패턴"><a href="#Static-응용-Singleton-패턴" class="headerlink" title="Static 응용 - Singleton 패턴"></a>Static 응용 - Singleton 패턴</h2><ul>
<li><p>싱글톤 패턴이란 프로그램에서 인스턴스가 단 한개만 생성되어야 하는 경우 사용되는 디자인 패턴이다.</p>
</li>
<li><p>static 키워드를 활용하여 구현할 수 있다</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//생성자를 private로 선언</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Company</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//클래스 내부에 유일한 private 인스턴스 생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Compnay singleInstance = <span class="keyword">new</span> Company();</span><br><span class="line"><span class="comment">//외부에서 유일한 인스턴스를 참조 할 수 있는 public 메소드를 구현</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Company <span class="title">getInstace</span><span class="params">()</span></span>&#123; <span class="comment">// 외부에서 인스턴스 생성 없이 접근할 수 있어야하기때문에 static 메소드</span></span><br><span class="line">    <span class="keyword">if</span>( singleInstance == <span class="keyword">null</span> ) &#123;</span><br><span class="line">      singleInstance = <span class="keyword">new</span> Compay(); <span class="comment">// 인스턴스가 없는경우 생성</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>oop</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>oop</tag>
        <tag>static</tag>
      </tags>
  </entry>
  <entry>
    <title>객체지향 프로그래밍 - List</title>
    <url>/2021/08/14/OOP-java-6/</url>
    <content><![CDATA[<h1 id="Array-List"><a href="#Array-List" class="headerlink" title="Array List"></a>Array List</h1><h2 id="Array-List-1"><a href="#Array-List-1" class="headerlink" title="Array List"></a>Array List</h2><ul>
<li>자바에서 기본 배열은 선언 또는 사용시 길이를 정해줘야해야하며 요소가 그 길이보다 크게되면<br>배열을 재 할당하고 복사해야 하는등 불편함이 있다</li>
<li>또 배열의 요소에 추가하거나 삭제할때 요소들의 이동에 관한 구현을 해야한다</li>
</ul>
<table>
<thead>
<tr>
<th align="center">메소드</th>
<th align="left">설명</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boolean add(E e)</td>
<td align="left">배열에 요소를 추가한다</td>
</tr>
<tr>
<td align="center">int size()</td>
<td align="left">요소의 전채 개수 반환한다.</td>
</tr>
<tr>
<td align="center">E get(int index)</td>
<td align="left">해당 인덱스의 값을 반환한다.</td>
</tr>
<tr>
<td align="center">E remove(int index)</td>
<td align="left">해당 인덱스의 값을 제거하고 반환한다.</td>
</tr>
<tr>
<td align="center">boolean isEmpty()</td>
<td align="left">배열이 비어있는지 확인한다. 비어있으면 true</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;E&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;E&gt;();</span><br><span class="line"></span><br><span class="line">arrayList.add(Element);</span><br></pre></td></tr></table></figure>

<h4 id="예제-코드"><a href="#예제-코드" class="headerlink" title="예제 코드"></a>예제 코드</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> ArrayListTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> subjectScore;</span><br><span class="line">    <span class="keyword">private</span> String subjectName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Subject</span><span class="params">(<span class="keyword">int</span> subjectScore, String subjectName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subjectScore = subjectScore;</span><br><span class="line">        <span class="keyword">this</span>.subjectName = subjectName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubjectScore</span><span class="params">(<span class="keyword">int</span> subjectScore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subjectScore = subjectScore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubjectName</span><span class="params">(String subjectName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subjectName = subjectName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSubjectScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subjectScore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubjectName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subjectName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayListTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> studentID;</span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">    ArrayList&lt;Subject&gt; subjectList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> studentID, String studentName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentID = studentID;</span><br><span class="line">        <span class="keyword">this</span>.studentName = studentName;</span><br><span class="line">        subjectList = <span class="keyword">new</span> ArrayList&lt;Subject&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSubject</span><span class="params">(<span class="keyword">int</span> score, String name)</span> </span>&#123;</span><br><span class="line">        subjectList.add(<span class="keyword">new</span> Subject(score,name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAllScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(studentID + <span class="string">&quot; &quot;</span> + studentName + <span class="string">&quot;의 성적표 &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Subject subject: subjectList ) &#123;</span><br><span class="line">            System.out.println(subject.getSubjectName() + <span class="string">&quot; : &quot;</span> + subject.getSubjectScore() + <span class="string">&quot;점 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student kim = <span class="keyword">new</span> Student(<span class="number">1000</span>,<span class="string">&quot;kim&quot;</span>);</span><br><span class="line">        Student park = <span class="keyword">new</span> Student(<span class="number">1001</span>,<span class="string">&quot;park&quot;</span>);</span><br><span class="line">        Student jeong = <span class="keyword">new</span> Student(<span class="number">1002</span>,<span class="string">&quot;jeong&quot;</span>);</span><br><span class="line"></span><br><span class="line">        kim.addSubject(<span class="number">100</span>,<span class="string">&quot;수학&quot;</span>);</span><br><span class="line">        kim.addSubject(<span class="number">80</span>,<span class="string">&quot;영어&quot;</span>);</span><br><span class="line">        kim.printAllScore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>oop</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>list</tag>
        <tag>array list</tag>
      </tags>
  </entry>
  <entry>
    <title>객체지향 프로그래밍 - Inheritance</title>
    <url>/2021/08/17/OOP-java-7/</url>
    <content><![CDATA[<h1 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h1><h2 id="클래스-상속"><a href="#클래스-상속" class="headerlink" title="클래스 상속"></a>클래스 상속</h2><ul>
<li><p>상속이란 단어 뜻 그대로 상속이란 물려받는 것을 의미 한다.</p>
</li>
<li><p>부모클래스가 상속을 하게되면 필드와 메소드를 자식클래스에게 물려주게 된다.</p>
</li>
<li><p>자바에서는 안정성을 위해서 다중 상속을 받는 것은 불가능하다.</p>
</li>
<li><p><code>class ChildClass extends ParentClass</code> 와 같은 형식으로 사용한다</p>
</li>
</ul>
<h2 id="상속의-특징과-장점"><a href="#상속의-특징과-장점" class="headerlink" title="상속의 특징과 장점"></a>상속의 특징과 장점</h2><ul>
<li>상위 클래스는 하위 클래스보다 추상적인 개념과 기능을 가진다</li>
<li>하위 클래스는 상위 클래스보다 구체적인 개념과 기능을 가진다</li>
<li>코드를 재사용 함으로써 중복성을 줄일 수 있다</li>
<li>클래스 수정/추가에 대한 유연성과 확장성이 증가된다</li>
</ul>
<h4 id="코드-예시"><a href="#코드-예시" class="headerlink" title="코드 예시"></a>코드 예시</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> inheritancetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VIPCustomer kim = <span class="keyword">new</span> VIPCustomer(<span class="number">1000</span>,<span class="string">&quot;Kimbob&quot;</span>);</span><br><span class="line">        VIPCustomer park = <span class="keyword">new</span> VIPCustomer();</span><br><span class="line">        Customer lee = <span class="keyword">new</span> VIPCustomer(<span class="number">1001</span>,<span class="string">&quot;Leelee&quot;</span>);</span><br><span class="line">        Customer jeong = <span class="keyword">new</span> Customer(<span class="number">1002</span>, <span class="string">&quot;Jeongo&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        kim.printCustomer();</span><br><span class="line">        park.printCustomer();</span><br><span class="line">        lee.printCustomer();</span><br><span class="line">        jeong.printCustomer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> inheritancetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VIPCustomer</span> <span class="keyword">extends</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salesRatio;</span><br><span class="line">    <span class="keyword">private</span> String agentID;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VIPCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.grade = <span class="string">&quot;VIP&quot;</span>;</span><br><span class="line">        bonusRatio = <span class="number">0.05</span>;</span><br><span class="line">        salesRatio = <span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VIPCustomer</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id,name);</span><br><span class="line">        <span class="keyword">super</span>.grade = <span class="string">&quot;VIP&quot;</span>;</span><br><span class="line">        bonusRatio = <span class="number">0.05</span>;</span><br><span class="line">        salesRatio = <span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        bonusPoint += price * bonusRatio;</span><br><span class="line">        <span class="keyword">return</span> price - (<span class="keyword">int</span>)(price * salesRatio);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> inheritancetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> String grade;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> bonusPoint;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> bonusRatio;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        grade = <span class="string">&quot;SILVER&quot;</span>;</span><br><span class="line">        bonusRatio = <span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        grade = <span class="string">&quot;SILVER&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calPrice</span> <span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        bonusPoint += price * bonusRatio;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span> + id + <span class="string">&quot;, name = &quot;</span> + name + <span class="string">&quot;, grade = &quot;</span> + grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="protected-키워드"><a href="#protected-키워드" class="headerlink" title="protected 키워드"></a>protected 키워드</h3><ul>
<li>private은 내부에서만 접근이 가능하고 외부에서는 접근이 불가능한 특성을 갖고있다</li>
<li>protected는 하위 클래스도 접근이 가능하다</li>
</ul>
<h3 id="Super-키워드"><a href="#Super-키워드" class="headerlink" title="Super 키워드"></a>Super 키워드</h3><ul>
<li>Super 키워드는 하위 클래스에서 상위 클래스에 대한 참조 값이다</li>
<li>super()는 상위 클래스의 기본 생성자를 호출한다 <code>super(argu1, argu2,...)</code></li>
<li>하위클래스에서 상위 클래스의 생성자를 명시적으로 호출하지 않으면 자동으로 super()가 호출 된다</li>
</ul>
<h3 id="메모리의-상태"><a href="#메모리의-상태" class="headerlink" title="메모리의 상태"></a>메모리의 상태</h3><ul>
<li>항상 상위 클래스의 인스턴스가 힙메모리에 먼저 생성된 후에 하위 클래스 인스턴스가 생성된다</li>
</ul>
<h3 id="Up-casting"><a href="#Up-casting" class="headerlink" title="Up casting"></a>Up casting</h3><ul>
<li><p>하위 클래스를 상위 클래스로 형 변환 하는 것</p>
</li>
<li><p>상위 클래스로 변수를 선언하고 하위 클래스 생성자로 인스턴스를 생성</p>
<p>  <code>Parent child = new Child()</code></p>
</li>
<li><p>하위 클래스는 상위 클래스의 모든 특성을 갖고 있기떄문에 모든 하위클래스는 업캐스팅이 가능하다</p>
</li>
<li><p>업캐스팅을 한 경우 하위클래스의 상위 클래스를 멤버변수와 메소드만 접근 가능하다.</p>
</li>
</ul>
<h3 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h3><ul>
<li>메소드 오버라이드는 상위클래스에 정의된 메소드를 재정의하여 사용하는 것이다</li>
<li>함수의 반환타입, 파라미터의 갯수는 같아야한다 </li>
<li>@Override라는 Anntation을 통해 컴파일러에게 override된 메소드임을 알려준다 </li>
</ul>
<h3 id="가상-메소드"><a href="#가상-메소드" class="headerlink" title="가상 메소드"></a>가상 메소드</h3><h4 id="메소드"><a href="#메소드" class="headerlink" title="메소드"></a>메소드</h4><ul>
<li>메소드의 이름은 주소값을 나타낸다</li>
<li>메소드는 프로그램 실행시 코드영역에 적재되는 instruction set이다</li>
<li>해당 메소드가 호출 되면 instruction set이 잇는 주소를 찾아 명령어가 실행 된다</li>
<li>이때 메소드에서 사용하는 변수들은 스택메모리에 위치한다</li>
<li>같은 클래스의 다른 인스턴스라도 같은 메소드가 호출 된다.</li>
</ul>
<h4 id="가상-메소드-1"><a href="#가상-메소드-1" class="headerlink" title="가상 메소드"></a>가상 메소드</h4><ul>
<li>각 클래스들은 해당 메서드에 대한 주소 값을 가진 가상 메소드 테이블을 가진다</li>
<li>재정의 된 경우 재정의 된 메소드와 메소드주소가 바인딩 된다.</li>
</ul>
]]></content>
      <categories>
        <category>oop</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>inheritance</tag>
        <tag>casting</tag>
        <tag>overriding</tag>
      </tags>
  </entry>
  <entry>
    <title>객체지향 프로그래밍 - Polymorphism</title>
    <url>/2021/08/17/OOP-java-8/</url>
    <content><![CDATA[<h1 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h1><h2 id="다형성이란"><a href="#다형성이란" class="headerlink" title="다형성이란"></a>다형성이란</h2><ul>
<li>프로그램의 각 요소들(상수,변수,객체,함수,메소드 …)이 여러 가지 타입에 속할수 있는 성질</li>
<li>객체지향 프로그래밍에서 가장 큰 특징(추상화,캡슐화,상속,다형성) 중 하나이다.</li>
</ul>
<h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;동물이 웁니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@java</span>.lang.<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;왈왈&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shakeTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;살랑살랑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@java</span>.lang.<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;야옹&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolymorphismTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        Animal cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Animal&gt; animalArrayList = <span class="keyword">new</span> ArrayList&lt;Animal&gt;;</span><br><span class="line">        animalArrayList.add(dog);</span><br><span class="line">        animalArrayList.add(cat);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Animal animal : animalArrayList) &#123;</span><br><span class="line">            animal.bark();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">barkAnimal</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        animal.bark();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>코드를 실행하면 같은 animal.bark()임에도 불구하고 </p>
<p>  ‘야옹’과 ‘멍멍’이 출력이 된다.</p>
</li>
<li><p>이렇듯 같은 코드여도 메소드 오버라이딩을 통해 다른 결과를 가질 수 있다. </p>
</li>
<li><p>그러나 Dog 클래스의 shakeTail 메소드는 현재 Dog가 Animal 타입이기 때문에 접근이 불가능하다</p>
</li>
<li><p>따라서 접근하기 위해선 Downcasting이 필요하다</p>
</li>
</ul>
<h2 id="downcasting"><a href="#downcasting" class="headerlink" title="downcasting"></a>downcasting</h2><ul>
<li><p>Upcasting된 객체를 다시 원래의 타입으로 캐스팅 하는 것</p>
</li>
<li><p>하위 클래스로의 형 변환은 명시적으로 해야한다</p>
</li>
<li><p><code>dog = (Dog)dog</code>  <code>객체 = (원래하위클래스) 업캐스팅된객체</code> </p>
</li>
<li><p>또는 <code>((Dog) dog).shakeTail();</code> 과 같이 사용 할 수 있다.</p>
</li>
</ul>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><ul>
<li>instanceof 함수는 원래 형이 맞는지 체크하는 키워드이다<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (dog <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">    dog = (Dog)dog;</span><br><span class="line">    dog.shakeTail();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>oop</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>polymorphism</tag>
      </tags>
  </entry>
  <entry>
    <title>객체지향 프로그래밍 - Abstract Method</title>
    <url>/2021/08/17/OOP-java-9/</url>
    <content><![CDATA[<h1 id="추상-클래스"><a href="#추상-클래스" class="headerlink" title="추상 클래스"></a>추상 클래스</h1><h2 id="추상-클래스란"><a href="#추상-클래스란" class="headerlink" title="추상 클래스란"></a>추상 클래스란</h2><ul>
<li><p>추상 클래스는 상속을 위해 존재한다</p>
</li>
<li><p>구현 코드 없이 선언만 있는 추상 메소드를 포함한 클래스</p>
</li>
<li><p>추상메소드는 구현부 없이 반환타입, 메소드 이름, 파라미터로 구성된다.</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> bar)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>추상 클래스는 abstract 예약어를 사용하고 new를 사용할 수 없다.</p>
</li>
<li><p>추상메소드의 구현은 하위 클래스가 상속받아 구현한다 </p>
</li>
</ul>
<h2 id="추상-클래스의-응용"><a href="#추상-클래스의-응용" class="headerlink" title="추상 클래스의 응용"></a>추상 클래스의 응용</h2><h3 id="템플릿-메소드"><a href="#템플릿-메소드" class="headerlink" title="템플릿 메소드"></a>템플릿 메소드</h3><ul>
<li>템플릿 메소드는 프레임워크에서 많이 사용되는 패턴이다</li>
<li>정의된 시나리오에 흐름에따른 추상 메소드를 구현함</li>
<li>탬플릿 흐름은 변하면 안되기 때문에 final로 선언하여 하위 클래스에서 재정의가 불가능하게 한다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;시동을 켭니다.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;시동을 끕니다.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">			</span><br><span class="line">	<span class="function"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		startCar();</span><br><span class="line">		drive();</span><br><span class="line">		stop();</span><br><span class="line">		turnOff();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AICar</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;자율 주행합니다.&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;자동차가 스스로 방향을 바꿉니다.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;스스로 멈춥니다.&quot;</span>);		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>oop</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>interface</tag>
        <tag>abstract class</tag>
        <tag>template method</tag>
      </tags>
  </entry>
  <entry>
    <title>ShellScript-Basic(2)</title>
    <url>/2021/08/05/ShellScript-Basic-2/</url>
    <content><![CDATA[<h2 id="현업에서-사용되는-예제들"><a href="#현업에서-사용되는-예제들" class="headerlink" title="현업에서 사용되는 예제들"></a>현업에서 사용되는 예제들</h2><h3 id="backup-sh"><a href="#backup-sh" class="headerlink" title="backup.sh"></a>backup.sh</h3><ul>
<li>디렉토리내의 하부디렉토리 또는 파일들을 주기적으로 백업하는 쉘 스크립트<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ] || [ -z <span class="variable">$2</span>]; <span class="keyword">then</span> <span class="comment"># 인자 2개를 받아서 하나라도 NULL이면 참이면</span></span><br><span class="line">  ehco usage: <span class="variable">$0</span> sourcedir targetdir <span class="comment"># 쉘 이름과 사용법을 출력</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SRCDIR=<span class="variable">$1</span></span><br><span class="line">  DSTDIR=<span class="variable">$2</span></span><br><span class="line">  BACKUPFILE=backup.$(date +%y%m%d%H%M%S).tar.gz <span class="comment"># date 쉘명령어를 사용하여 날짜와 시간을 기록하여 백업파일을 생성</span></span><br><span class="line">  <span class="keyword">if</span> [ -d <span class="variable">$DSTDIR</span> ]; <span class="keyword">then</span> <span class="comment"># DSTDIR가 디렉토리이면 </span></span><br><span class="line">    tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span> <span class="comment"># 압축</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    mkdir <span class="variable">$DSTDIR</span> <span class="comment"># 디렉토리가 없으면 생성하고 압축</span></span><br><span class="line">    tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span> </span><br><span class="line">  <span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="tar-명령어"><a href="#tar-명령어" class="headerlink" title="tar 명령어"></a>tar 명령어</h4><ul>
<li>기존의 tar는 하나의 파일로 묶기만 가능했는데gzip이라는 압축명령이 많이 쓰이게되면서 tar라는 명령에 묶기가 아닌 압축도 할 수있 게끔 옵션을 제공하여gzip을 활용해서 묶고 압축 할 수 있다.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x  <span class="comment">#묶음 해제</span></span><br><span class="line">c  <span class="comment">#파일 묶음</span></span><br><span class="line">v  <span class="comment">#묶음 해제 과정 출력</span></span><br><span class="line">z  <span class="comment">#gunzip을 사용</span></span><br><span class="line">f  <span class="comment">#파일 이름을 지정</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cvzf [압축된 파일 이름] [압축할 파일이나 폴더명]</span><br><span class="line">tar -xvzf [압축 해제할 압축 아카이브 이름]</span><br></pre></td></tr></table></figure>

<h3 id="cleanlog-sh"><a href="#cleanlog-sh" class="headerlink" title="cleanlog.sh"></a>cleanlog.sh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> -f -name <span class="string">&#x27;filename&#x27;</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;shell1, shell2, shell3 &quot;</span> \;</span><br><span class="line"><span class="comment">#현재 디렉토리에서 일반 파일중에서 이름이 filename 검색</span></span><br><span class="line"><span class="comment"># 각각의 파일들 bash쉘로 해당명령어들로 실행시킴</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">LOGDIR=/var/<span class="built_in">log</span></span><br><span class="line">GZIPDAY = 1</span><br><span class="line">DELDAY = 2</span><br><span class="line"><span class="built_in">cd</span> %LOGDIR</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cd <span class="variable">$LOGDIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line">sudo find ./path -<span class="built_in">type</span> f -name <span class="string">&#x27;*log.?&#x27;</span> -mtime +<span class="variable">$GZIPDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;gzip &#123;&#125;&quot;</span> \; 2&gt;</span><br><span class="line"><span class="comment"># 현재 시간부터 2일이 경과된 파일을 찾아서 각각을 압축 </span></span><br><span class="line">sudo find ./path -<span class="built_in">type</span> f -name <span class="string">&#x27;*gz.?&#x27;</span> -mtime +<span class="variable">$DELSDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;rm -f &#123;&#125;&quot;</span> \; 2&gt;</span><br><span class="line"><span class="comment"># 압축한지 3일 이상 지난 파일을 찾아서 묻지않고 삭제  </span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ShellScript-Basic</title>
    <url>/2021/08/04/ShellScript-Basic/</url>
    <content><![CDATA[<h1 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script"></a>Shell Script</h1><h2 id="기본-문법"><a href="#기본-문법" class="headerlink" title="기본 문법"></a>기본 문법</h2><ul>
<li>쉘 스크립트는 파일로 작성 후 파일을 실행함</li>
<li>파일의 가장 위으 ㅣ첫 라인은 <code>#!/bin/bash</code>로 시작</li>
<li>쉘 스크립트 파일은 실행 권한을 갖고있어야함</li>
</ul>
<h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><p>hello.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hello Bash!&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 hello.sh</span><br><span class="line">$./hello.sh</span><br><span class="line"></span><br><span class="line">Hello bash!</span><br></pre></td></tr></table></figure>

<ul>
<li><code>echo</code>는 화면에 출력해주는 쉘 명령어</li>
</ul>
<h3 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mysql_id=<span class="string">&#x27;root&#x27;</span> </span><br><span class="line">mysql_directory=<span class="string">&#x27;/etc/mysql&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$mysql_id</span> <span class="comment"># $변수명으로 사용가능 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$mysql_directory</span> </span><br></pre></td></tr></table></figure>

<h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemons=(<span class="string">&quot;httpd&quot;</span> <span class="string">&quot;mysql&quot;</span> <span class="string">&quot;vsftpd&quot;</span>) <span class="comment"># , 가아닌 띄어쓰기로 구분</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;daemons[1]&#125;</span> <span class="comment"># $&#123;배열명[index]&#125; 형식으로 사용</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;daemons[a]&#125;</span> <span class="comment"># 배열의 모든 데이터 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;daemons[*]&#125;</span> <span class="comment"># 배열의 모든 데이터 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#daemons[@]&#125;</span> <span class="comment"># 배열의 크기 출력 : 3</span></span><br><span class="line"></span><br><span class="line">filelist = ( $(ls) ) <span class="comment"># 괄호안에있는 명령어의 결과값을 배열에 넣는다</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;filelist[*]&#125;</span> <span class="comment"># filelist의 모든 값 출력</span></span><br></pre></td></tr></table></figure>

<p>arraytest.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my_info = &#123;<span class="string">&quot;isu&quot;</span> <span class="string">&quot;28&quot;</span> <span class="string">&quot;BE&quot;</span>&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;my_info[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;my_info[*]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#my_info[@]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="사전에-정의된-지역-변수"><a href="#사전에-정의된-지역-변수" class="headerlink" title="사전에 정의된 지역 변수"></a>사전에 정의된 지역 변수</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$$ <span class="comment"># 쉘의 프로세스 번호 (pid)</span></span><br><span class="line"><span class="variable">$0</span> <span class="comment"># 쉘스크립트 이름 ex) ls </span></span><br><span class="line"><span class="variable">$1</span> ~ <span class="variable">$9</span> <span class="comment"># 명령줄 인수 </span></span><br><span class="line">$* <span class="comment"># 모든 명령줄 인수리스트 ex) -al -z</span></span><br><span class="line"><span class="variable">$#</span> <span class="comment"># 인수의 갯수 ex) 2개 (la -al -z)</span></span><br><span class="line">$? <span class="comment"># 최근 실행한 명령어의 종료 값 0은 성공 나머지는 실패 </span></span><br></pre></td></tr></table></figure>

<h3 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h3><ul>
<li>expr: 숫자 연산</li>
<li>expr을 사용하는 경우 backquote를 사용해야함</li>
<li>연산자 *와 () 앞에는 \를 사용해야함</li>
<li>숫자,변수,기호 사이에는 space가 있어야 구분됨</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num = `expr \(3 \* 5\) / + 4 + 7 `</span><br><span class="line"><span class="comment"># (3*5)/4+7</span></span><br></pre></td></tr></table></figure>

<h3 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h3><ul>
<li><p>if로 시작해서 fi로 끝남</p>
</li>
<li><p>indent는 필요없지만 가독성을 위해 써야함 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ state ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="comment">#TODO</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  <span class="comment">#TODO</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
<li><p>한줄로 작성하기 위해선 ; 으로 구분함</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 조건 ]; <span class="keyword">then</span> TODO; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>예시</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> != <span class="variable">$2</span> ] <span class="comment"># 인자를 2개를 받아 비교</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  ehco <span class="string">&quot;different value&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -z <span class="variable">$2</span> ] </span><br><span class="line">-z <span class="comment"># 문자가 null이면 참</span></span><br><span class="line">-n <span class="comment"># 문자가 not null 이면 참 </span></span><br><span class="line">-eq <span class="comment"># equal == </span></span><br><span class="line">-ne <span class="comment"># not equal !=</span></span><br><span class="line">-lt <span class="comment"># less than &lt;</span></span><br><span class="line">-le <span class="comment"># less equal &lt;=</span></span><br><span class="line">-gt <span class="comment"># greater than &gt;</span></span><br><span class="line">-ge <span class="comment"># greater equal &gt;=</span></span><br></pre></td></tr></table></figure>

<h4 id="파일검사-조건"><a href="#파일검사-조건" class="headerlink" title="파일검사 조건"></a>파일검사 조건</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-e <span class="comment"># 파일이 존재하면 참</span></span><br><span class="line">-d <span class="comment"># 파일이 디렉토리이면 참</span></span><br><span class="line">-h <span class="comment"># 심볼릭 링크파일이면 침</span></span><br><span class="line">-f <span class="comment"># 파일이 일반파일이면 참 (directory X)</span></span><br><span class="line">-s <span class="comment"># 파일 크기가 0이 아니면 참</span></span><br><span class="line">-u <span class="comment"># 파일이 set-user-id 설정되면 참</span></span><br><span class="line">-r <span class="comment"># 파일이 읽기 가능 상태이면 참</span></span><br><span class="line">-w <span class="comment"># 파일이 쓰기 가능 상태이면 참</span></span><br><span class="line">-x <span class="comment"># 파일이 실행 가능 상태이면 참</span></span><br></pre></td></tr></table></figure>

<h4 id="명령어-해석"><a href="#명령어-해석" class="headerlink" title="명령어 해석"></a>명령어 해석</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping -c 1 192.168.0.1 1&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Success Ping&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Failed Ping&quot;</span></span><br><span class="line"><span class="keyword">fi</span> </span><br></pre></td></tr></table></figure>
<ul>
<li>-c 1 : ping을 한번만 보냄</li>
<li>192.168.0.1 : 타겟 IP</li>
<li>1&gt;/dev/null : 표준출력을 /dev/null로 리디렉션 따라서 출력내용은 버려짐</li>
<li>$? ==0 : 가장 최근 인자를 가져옴 </li>
</ul>
<h3 id="For-반복문"><a href="#For-반복문" class="headerlink" title="For 반복문"></a>For 반복문</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 <span class="keyword">in</span> 변수값1 변수값2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  TODO</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> database <span class="keyword">in</span> $(ls)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$database</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="While-반복문"><a href="#While-반복문" class="headerlink" title="While 반복문"></a>While 반복문</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> [ 조건문 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  TODO</span><br><span class="line"><span class="keyword">while</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">list=$(ls) <span class="comment"># list변수에 ls명령의 결과를 저장</span></span><br><span class="line">num=<span class="variable">$&#123;#lists[@]&#125;</span> <span class="comment"># 리스트의 갯수를 저장</span></span><br><span class="line">index = 0;</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$num</span> -ge 0 ] <span class="comment"># num &gt;= 0</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  ehco <span class="variable">$&#123;list[$index]&#125;</span></span><br><span class="line">  index=`expr <span class="variable">$index</span> + 1`</span><br><span class="line">  num=`expr <span class="variable">$num</span> -1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>System Programming - ABI</title>
    <url>/2021/07/28/System-Programming-ABI/</url>
    <content><![CDATA[<h1 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h1><h2 id="ABI란"><a href="#ABI란" class="headerlink" title="ABI란?"></a>ABI란?</h2><ul>
<li>Application Binary Interface</li>
<li>함수 실행 방식, 레지스터 활용, 시스템콜 실행등 정의해놓은 인터페이스</li>
<li>응용 프로그램과 라이브러리사이의 연결과 통신에 대한 정의 </li>
<li>함수의 파라미터들을 어떤 레지스터에 넣을지 정의</li>
<li>컴파일 , 링커 ,툴체인에서 제공 한다.</li>
</ul>
]]></content>
      <categories>
        <category>System Programming</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>ABI</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>System-Programming-IPC(2)</title>
    <url>/2021/08/04/System-Programming-IPC-2/</url>
    <content><![CDATA[<p>커널 영역에 메시지큐나 공유메모리가 생성이되면 명시적으로 컨트롤 해주는 것이 필요하다</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">msgctl(msgid, PIC_RMID,<span class="number">0</span>); <span class="comment">//삭제예시, 메시지 아이디와 컨트롤에대한 인자를 받는다. </span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ipcs <span class="comment">#명령어를 통해 확인 할 수 있다.</span></span><br></pre></td></tr></table></figure>

<h2 id="공유메모리-Shared-Memory"><a href="#공유메모리-Shared-Memory" class="headerlink" title="공유메모리 (Shared Memory)"></a>공유메모리 (Shared Memory)</h2><ul>
<li>모든 프로세스는 커널영역을 공유한다는 점을 이용하여<br>커널에 공간을 확보하여 그 공간을 변수처럼 사용하는 방식이다</li>
<li>큐와 다르게 주소를 변수처럼 접근한다</li>
<li>공유 메모리 Key를 통하여 여러 프로세스가 접근이 가능하다</li>
</ul>
<h3 id="공유-메모리-생성"><a href="#공유-메모리-생성" class="headerlink" title="공유 메모리 생성"></a>공유 메모리 생성</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">key: 임의의 숫자 또는 ftok 함수로 생성한 키 값</span></span><br><span class="line"><span class="comment">size: 공유 메모리의 크기</span></span><br><span class="line"><span class="comment">shmflg: 공유 메모리의 속성</span></span><br><span class="line"><span class="comment">return value : 공유 메모리 식별자 리턴</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">size_t</span>, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line">shmid = shmget((<span class="keyword">key_t</span>)<span class="number">1234</span>,SIZE , IPC_CREAT|<span class="number">0666</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="공유-메모리-연결"><a href="#공유-메모리-연결" class="headerlink" title="공유 메모리 연결"></a>공유 메모리 연결</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shmid: shmget 함수로 생성한 공유 메모리 식별자</span></span><br><span class="line"><span class="comment">shmaddr : 공유 메모리 연결 주소 (char *) NULL로 설정하면 적절한 주소로 연결된다</span></span><br><span class="line"><span class="comment">shmflg: 공유 메모리의 권한 설정 (0이면 읽기쓰기, SHM_RDONLY면 읽기만)</span></span><br><span class="line"><span class="comment">return value: 연결이 성공하면 메모리의 시작 주소를 리턴</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">const</span> <span class="keyword">void</span> *shamddr, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line"></span><br><span class="line">shmaddr = (<span class="keyword">char</span> *)shmat(shmid, (<span class="keyword">char</span> *)<span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="공유-메모리-해제"><a href="#공유-메모리-해제" class="headerlink" title="공유 메모리 해제"></a>공유 메모리 해제</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">char</span> * shmaddr)</span></span>; <span class="comment">// 공유 메모리 연결 주소로 인자를 갖는다.</span></span><br></pre></td></tr></table></figure>

<h3 id="공유-메모리-읽기-쓰기"><a href="#공유-메모리-읽기-쓰기" class="headerlink" title="공유 메모리 읽기/쓰기"></a>공유 메모리 읽기/쓰기</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;%s&quot;</span> \n<span class="string">&quot;), (char *)shmaddr); </span></span><br><span class="line"><span class="string">strcpy((char*)shmaddr, &quot;</span>to write<span class="string">&quot;);</span></span><br></pre></td></tr></table></figure>

<h3 id="공유-메모리-컨트롤"><a href="#공유-메모리-컨트롤" class="headerlink" title="공유 메모리 컨트롤"></a>공유 메모리 컨트롤</h3><p>커널영역을 끊임없이 만들 수 없기때문에 메모리를 컨트롤해줘야한다</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shmid: shmget 함수로 생성한 공유 메모리 식별자</span></span><br><span class="line"><span class="comment">cmd: 수행할 컨트롤 (ex: IPC_RMID - shmid로 지정한 공유 메모리 제거)</span></span><br><span class="line"><span class="comment">buf: 제어 기능에 사용되는 공유 메모리 구조체의 구조</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">int</span> cmd, struct shmid_ds *buf)</span></span>;</span><br><span class="line"></span><br><span class="line">shmctl(shmid, IPC_RMID, (struct shmid_ds *)<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h2 id="활용-예시"><a href="#활용-예시" class="headerlink" title="활용 예시"></a>활용 예시</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> shmid, pid;</span><br><span class="line">    <span class="keyword">char</span> *shmaddr_parent, *shmaddr_child;</span><br><span class="line">    shmid = shmget((<span class="keyword">key_t</span>)<span class="number">1234</span>, <span class="number">10</span>, IPC_CREAT|<span class="number">0644</span>);</span><br><span class="line">    <span class="keyword">if</span>(shmid == <span class="number">-1</span>) &#123; <span class="comment">// ocurred error</span></span><br><span class="line">            perror(<span class="string">&quot;shmget err&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123; <span class="comment">// parent process</span></span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">            shmaddr_parent = (<span class="keyword">char</span> *)shmat(shmid, (<span class="keyword">char</span> *)<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, shmaddr_parent);</span><br><span class="line">            shmdt((<span class="keyword">char</span> *)shmaddr_parent);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            shmaddr_child = (<span class="keyword">char</span> *)shmat(shmid, (<span class="keyword">char</span> *)<span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">strcpy</span>((<span class="keyword">char</span> *)shmaddr_child, <span class="string">&quot;Hello Parent!&quot;</span>);</span><br><span class="line">            shmdt((<span class="keyword">char</span> *)shmaddr_child);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// shmctl(shmid, IPC_RMID, (struct shmid_ds *)NULL); ipcs로 확인하기위해 삭제하지 않았음.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/System-Programming-IPC-2_images/example.png"></p>
]]></content>
      <categories>
        <category>System Programming</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
        <tag>Shared Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>System Programming - Process</title>
    <url>/2021/07/28/System-Programming-Process/</url>
    <content><![CDATA[<h1 id="Program-Process-Thread의-개념"><a href="#Program-Process-Thread의-개념" class="headerlink" title="Program , Process ,Thread의 개념"></a>Program , Process ,Thread의 개념</h1><h2 id="프로그램"><a href="#프로그램" class="headerlink" title="프로그램"></a>프로그램</h2><ul>
<li>특정한 일을 수행하기위한 명령어로 구성된 실행 가능한 파일</li>
<li>바이너리, 코드이미지 , Application …</li>
</ul>
<h2 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h2><ul>
<li>실행중인 프로그램 (메모리 적재+ 프로세스 상태 정보 포함)<br><img src="/image/System-Programming-Process_images/processMemeryStructure.png"></li>
</ul>
<h2 id="스레드"><a href="#스레드" class="headerlink" title="스레드"></a>스레드</h2><ul>
<li>가장 최소 단위의 실행가능한 프로세스<br><img src="/image/System-Programming-Process_images/processthread.png"></li>
</ul>
<h1 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h1><h2 id="Process-ID"><a href="#Process-ID" class="headerlink" title="Process ID"></a>Process ID</h2><ul>
<li>각 프로세스 해당 시점에 유니크한 pid를 가진다</li>
<li>pid는 Linux에서는 signed 16비트 정수값을 사용하여 최대 32678이다<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /proc/sys/kernel/pid_max <span class="comment"># 명령어를 통하여 확인 가능</span></span><br><span class="line">32768</span><br></pre></td></tr></table></figure>
<h2 id="Process-계층"><a href="#Process-계층" class="headerlink" title="Process 계층"></a>Process 계층</h2></li>
<li>최초 프로세스는 init 프로세스 (pid : 1)</li>
<li>init 프로세스는 운영체제가 생성한다.</li>
<li>다른 프로세스는 또 다른 프로세스로부터 생성되어 계층 구조를 가진다</li>
<li>ppid 값이 부모 프로세스의 pid를 뜻한다<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef <span class="comment"># -e 시스템상의 모든 프로세스 -f UID,PID PPID등 모든 정보 출력</span></span><br></pre></td></tr></table></figure>
<img src="/image/System-Programming-Process_images/psef_result.png"></li>
</ul>
<h2 id="Process와-Owner-관리"><a href="#Process와-Owner-관리" class="headerlink" title="Process와 Owner 관리"></a>Process와 Owner 관리</h2><p>리눅스에서 File은 inode 프로세스는 pid로 관리하듯이</p>
<p>프로세스의 소유자와 그룹또한 UID / GID로 관리된다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/passwd <span class="comment">#uid와 gid및 사용자에 관한 정보들이 출력된다.</span></span><br></pre></td></tr></table></figure>
<p><img src="/image/System-Programming-Process_images/passwd.png"> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/shadow <span class="comment">#암호화된 상태의 password가 적혀있음</span></span><br></pre></td></tr></table></figure>

<h2 id="Process관리-관련-시스템콜"><a href="#Process관리-관련-시스템콜" class="headerlink" title="Process관리 관련 시스템콜"></a>Process관리 관련 시스템콜</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid=%d\n&quot;</span>), getpid();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ppid=%d\n&quot;</span>), getppid();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/System-Programming-Process_images/pidinfo.png"></p>
<ul>
<li>실행할때마다 pid가 1씩 순차적으로 증가하는것을 확인 할 수 있다</li>
</ul>
<h2 id="Process-생성"><a href="#Process-생성" class="headerlink" title="Process 생성"></a>Process 생성</h2><ul>
<li>process 생성 과정 <ol>
<li>TEXT,DATA,BSS같은 정적인 공간을 먼저 확보</li>
<li>실행하면서 STACK과 HEAP의 공간을 생성한다</li>
</ol>
</li>
</ul>
<h1 id="fork-amp-exec"><a href="#fork-amp-exec" class="headerlink" title="fork() &amp; exec()"></a>fork() &amp; exec()</h1><h2 id="fork-시스템콜"><a href="#fork-시스템콜" class="headerlink" title="fork() 시스템콜"></a>fork() 시스템콜</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">// 부모 프로세스를 그대로 복사하기떄문에 인자가 없다. </span></span><br></pre></td></tr></table></figure>
<ul>
<li>새로운 프로세스 공간을 별도로 만들고 실행중이였던 부모 프로세스 모든 내용을 복사</li>
<li>자식 프로세스는 부모프로세스 공간을 모두 복사 후 fork() 시스템콜 이후 코드부터 실행된다.</li>
<li>자식 프로세스는 pid가 0으로 리턴되며 부모 프로세스는 실제 pid를 리턴</li>
<li>부모자식간의 플세스의  변수와 Program Count 값은 동일하다</li>
</ul>
<h2 id="execl-execp-execle"><a href="#execl-execp-execle" class="headerlink" title="execl() execp() execle()"></a>execl() execp() execle()</h2><ul>
<li><p>exec() 시스템콜을 호출한 프로세스의 공간의 TEXT,DATA,BSS영역을</p>
<p>새로운 프로세스의 이미지로 덮어 씌움</p>
</li>
<li><p>별도의 프로세스 공간을 만들지 않음 </p>
</li>
<li><p>부모 프로세스가 사라짐.</p>
</li>
</ul>
<p>execl.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;excute ls\n&quot;</span>);</span><br><span class="line">  execl(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;ls&quot;</span> , <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span>); <span class="comment">// 실행파일의 이름, argv[0], argv[1]... , NULL) </span></span><br><span class="line">  perror(<span class="string">&quot;execl is failed\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>execl이 실행되면 코드영역이 ls로 덮어 씌워지게 되고<br>밑의 코드는 실행되지 않는다.<br><img src="/image/System-Programming-Process_images/execl.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">execl(<span class="string">&quot;디렉토리와 파일 이름이 합친 전체이름&quot;</span>,<span class="string">&quot;명령어 리스트&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">execp(<span class="string">&quot;파일 이름&quot;</span>, <span class="string">&quot;명령어 인수 리스트&quot;</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
<p>execp의 execl과의 차이점은 파일 이름을 해당 프로세스를 실행한 프로세스 환경변수를 검색한다.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *evmp[] = &#123;<span class="string">&quot;USER=name&quot;</span>, <span class="string">&quot;PATH=/bin&quot;</span>, (<span class="keyword">char</span> *)<span class="number">0</span>&#125;;</span><br><span class="line">execle(<span class="string">&quot;ls, &quot;</span>ls<span class="string">&quot;, &quot;</span>-al<span class="string">&quot; NULL, envp);</span></span><br></pre></td></tr></table></figure>
<p>환경 변수를 지정하고자 할때는 execle을 사용한다.</p>
<h3 id="execv-execvp-execve-시스템콜"><a href="#execv-execvp-execve-시스템콜" class="headerlink" title="execv(),execvp(),execve() 시스템콜"></a>execv(),execvp(),execve() 시스템콜</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *envp[] = &#123;<span class="string">&quot;USER=NAME&quot;</span>, <span class="string">&quot;PATH=/bin&quot;</span>, (<span class="keyword">char</span>*<span class="number">0</span>); <span class="comment">// 환경변수 배열</span></span><br><span class="line"><span class="keyword">char</span> *arg[] &#123;<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-al&quot;</span> ,<span class="literal">NULL</span>&#125;; <span class="comment">// 인수 리스트 배열</span></span><br><span class="line"></span><br><span class="line">execv(<span class="string">&quot;/bin/ls&quot;</span> arg);</span><br><span class="line">exevp(<span class="string">&quot;ls&quot;</span>,arg);</span><br><span class="line">exeve(<span class="string">&quot;ls&quot;</span>,arg)</span><br></pre></td></tr></table></figure>

<h2 id="wait-시스템콜"><a href="#wait-시스템콜" class="headerlink" title="wait() 시스템콜"></a>wait() 시스템콜</h2><ul>
<li>wait()을 사용하면 fork() 호출 시 자식 프로세스가 종료할 때 까지 부모 프로세스가 기다린다.</li>
<li>부자 프로세스간의 동기화와 고아 프로세스가 생기는 것을 방지 할 수있다.</li>
</ul>
<p><img src="/image/System-Programming-Process_images/wait.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">wait</span> <span class="params">(<span class="keyword">int</span> *status)</span> <span class="comment">// wait 시스템 콜은 자식 프로세스의 pid를 반환한다</span></span></span><br><span class="line"><span class="function">                         <span class="comment">// 자식 프로세스의 종료 상태값을 인자로 갖는다.</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WIFEXITED</span><span class="params">(status)</span></span>; <span class="comment">// 자식 프로세스의 정상 종료 시 리턴값은 0이 아닌값</span></span><br></pre></td></tr></table></figure>


<h2 id="fork-execl-wait-정리"><a href="#fork-execl-wait-정리" class="headerlink" title="fork, execl wait 정리"></a>fork, execl wait 정리</h2><p>execl()만 사용하면 부모프로세스가 사라지므로<br>이를 유지하기위해 fork로 새로운 프로세스 공간후 execl을 호출한다<br>wait함수를 사용해서 부모 프로세스가 자식 프로세스가 끝날 떄 까지 기다릴 수 있음.</p>
<h1 id="copy-on-write"><a href="#copy-on-write" class="headerlink" title="copy on write"></a>copy on write</h1><ul>
<li><p>fork()는 새로운 프로세스 공간 생성 후 부모의 프로세스 공간을 모두 복사한다</p>
</li>
<li><p>메모리를 모두 복사하려면 시간이 오래 걸린다.</p>
</li>
<li><p>자식프로세스 생성시 부모 프로세스 페이지를 우선 사용한다.</p>
</li>
<li><p>이때 자식 프로세스에 쓰기가 발생할때 해당 페이지만 복사하고 분리한다</p>
<ul>
<li>+모두 복사하지 않기 때문에 프로세스 생성 시간을 줄일 수 있음</li>
<li>+새로 생성된 프로세스에 할당되어야하는 페이지수도 최소화 할 수 있음</li>
<li><img src="/image/System-Programming-Process_images/cowr.png"><br><img src="/image/System-Programming-Process_images/coww.png"></li>
</ul>
</li>
<li><p>커널공간을 공유하여 읽기만 있을때에는 복사 없이 Process A에서 사용 하고있던 물리주소를 그대로 사용한다.</p>
</li>
<li><p>코드 실행중 write를 요청하게되면 그 시점에 child process가 복사하여 페이지 포인터를 변경하여 사용한다</p>
</li>
</ul>
<h1 id="Process-종료"><a href="#Process-종료" class="headerlink" title="Process 종료"></a>Process 종료</h1><h2 id="exit"><a href="#exit" class="headerlink" title="exit()"></a>exit()</h2><p>프로세스를 종료하는 시스템콜</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span>; <span class="comment">// 프로세스 종료 상태 번호를 인자로 갖는다</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>main함수의 return  와 exit(0)의 차이는 </p>
<p>exit()는 즉시 프로세스를 종료한다<br>return 0는 함수를 종료한다.</p>
<p>  main에서 return시에는 C언어 실행파일에 기본으로 포함된 _start() 함수를 호출하고</p>
<p>  그함수는 main을 실행하고 모두 실행후 exit()를 호출하게 된다.</p>
</li>
<li><p>exit를 실행하면 </p>
<ul>
<li>atexit()에 등록된 함수 실행</li>
<li>열려 있는 모든 입출력 스트림 버퍼 삭제 (stdin, stdout, stderr)</li>
<li>프로세스가 오픈한 파일을 모두 닫음</li>
<li>tmpfile()함수를 통해 생성된 임시 파일들 삭제</li>
</ul>
</li>
</ul>
<h2 id="atexit"><a href="#atexit" class="headerlink" title="atexit()"></a>atexit()</h2><p>프로세스가 종료될때 실행될 함수를 등록하는 함수이다.<br>스택형식으로 등록되어 들어온순의 역순으로 실행된다.</p>
<hr>
<p>출처 :<br>본 내용은 Fastcampus KDT BE과정 수업을 기반으로 작성되었음을 알립니다. </p>
<p>기타 출처:<br><a href="https://kyu9341.github.io/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/2020/10/04/OS_Process_Structure/">https://kyu9341.github.io/운영체제/2020/10/04/OS_Process_Structure/</a></p>
]]></content>
      <categories>
        <category>System Programming</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>System Programming - IPC</title>
    <url>/2021/07/29/System-Programming-IPC/</url>
    <content><![CDATA[<h1 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h1><h2 id="IPC란"><a href="#IPC란" class="headerlink" title="IPC란"></a>IPC란</h2><ul>
<li><p>OS에서 할당받은 독립적인 공간을 갖는 Process는 서로 물리적인 주소를 접근 할 수 </p>
<p>없어서 프로세스간 통신을 하는데 어려움을 겪는다 이때 사용하는 기술이 IPC이다!</p>
</li>
</ul>
<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><ul>
<li>두 프로세스 모두 저장매체를 접근 할 수 있기 때문에 파일을 통해서 통신할 수 있다.</li>
<li>+가장 간단한 방법</li>
<li>-서로 접근하고 있는지 확인할 방법이 없다</li>
</ul>
<h2 id="Others-IPC"><a href="#Others-IPC" class="headerlink" title="Others IPC"></a>Others IPC</h2><ul>
<li>프로세스들의 커널공간은 공유한다는 아이디어를 기반으로<br>페이지테이블에 같은 물리주소를 가리킴으로써 다양한 IPC기법이 개발되었다.</li>
</ul>
<h3 id="PIPE"><a href="#PIPE" class="headerlink" title="PIPE"></a>PIPE</h3><ul>
<li>fork()를 통해 자식 프로세스를 만들었을때 부모와 자식간의 통신</li>
<li>단방향 통신</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MSGSIZE 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* msg = <span class="string">&quot;Hello Child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">255</span>];</span><br><span class="line">  <span class="keyword">int</span> fd[<span class="number">2</span>], pid, nbyes;</span><br><span class="line">  <span class="keyword">if</span> (pipe(fd) &lt; <span class="number">0</span>) <span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// 커널영역에 pipe 생성하고 오류시 exit(1)</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123; <span class="comment">// 부모 프로세스이면 pid값을 출력</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;praent PID:%d, child PID:%d\n&quot;</span>, getpid(), pid);</span><br><span class="line">    write(fd[<span class="number">1</span>], msg, MSGSIZE); <span class="comment">// fd[1]에 메시지를 씀</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>) <span class="comment">// 정상 종료  </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child PID %d\n, getpid());</span></span><br><span class="line"><span class="string">    nbytes= read(fd[0], buf , MSGSIZE); // 파일을 읽는 시스템콜 공란에 255사이즈데이터를 읽음 </span></span><br><span class="line"><span class="string">                                        // 동일한 커널영역에 들어가서 buf에 넣어주게됨 </span></span><br><span class="line"><span class="string">    printf(&quot;</span>%d %s\n, nbytes, buf);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h3><ul>
<li>선입선출 방식으로 데이터를 전송</li>
<li>파이프와 다르게 양방향 통신도 가능하며 부모 자식간 프로세스가 아니어도 가능하다</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ipcs</span> <span class="comment"># 이 명령어를 통해 메시지를 포함한 ipc 정보를 확인할 수 있다</span></span><br></pre></td></tr></table></figure>

<p><img src="/image/System-Programming-IPC_images/ipcs.png"></p>
<p>메시지를 보낼떄의 예</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">msqid = msgget(key, msgflg) <span class="comment">// 다른 메시지큐와 구분될 key , 메시지 큐의 옵션을 인자로 갖는다</span></span><br><span class="line">msgsnd(msqid, &amp;sbuf, buf_length, IPC_NOWAIT) <span class="comment">// 메시지를 보낼때의 함수</span></span><br><span class="line"> <span class="comment">//IPC_NOWAIT은 읽지않더라도 다음 코드를 실행할때 사용, 0이면 실행할떄까지 기다린다.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span> &#123;</span> <span class="comment">// 데이터를 전송할때 구조체의 값에 알맞게 넣어서 전송한다</span></span><br><span class="line">  <span class="keyword">long</span> type;</span><br><span class="line">  <span class="keyword">char</span> text[<span class="number">50</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> msgid, len;</span><br><span class="line">  MsgBuf msg;</span><br><span class="line">  Key_t key = <span class="number">1111</span>;</span><br><span class="line">  msgid = msgget(key, IPC_CREAT|<span class="number">0644</span>); <span class="comment">// 메시지를 0644권한으로 새로 만든다</span></span><br><span class="line">  <span class="keyword">if</span> (msgid == <span class="number">-1</span>) &#123; <span class="comment">// 메시지생성에 실패했을경우</span></span><br><span class="line">    perror(<span class="string">&quot;msgget&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  msg.type = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(msg.text, <span class="string">&quot;Hello Message Queue\n&quot;</span>); <span class="comment">// 메시지 구조체에 텍스트를 넣는다</span></span><br><span class="line">  <span class="keyword">if</span> (msgsnd(msgid, (<span class="keyword">void</span> *)&amp;msg, <span class="number">50</span>, IPC_NOWAIT) == <span class="number">-1</span>) &#123; <span class="comment">// 메시지를 보내며 에러 확인</span></span><br><span class="line">    <span class="comment">// 메시지의 아이디, 구조체의 주소, 사이즈를 인자로 보낸다</span></span><br><span class="line">    perror(<span class="string">&quot;msgsnd&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>메시지를 받을떄의 예</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sszie_t</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">void</span> *msgp, <span class="keyword">size_t</span> msgsz, <span class="keyword">long</span> msgtyp, <span class="keyword">int</span> msgflg)</span></span></span><br><span class="line"><span class="function"><span class="title">msgrcv</span><span class="params">(msqid, &amp;rbuf, MSGSZ, <span class="number">1</span> ,<span class="number">0</span>)</span> <span class="comment">// msgtype 0: 첫번째메시지 다른 양수이면 일치하는 첫번째 메시지</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span> &#123;</span> <span class="comment">// 데이터를 전송할때 구조체의 값에 알맞게 넣어서 전송한다</span></span><br><span class="line">  <span class="keyword">long</span> type;</span><br><span class="line">  <span class="keyword">char</span> text[<span class="number">50</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  MsgBuf msg;</span><br><span class="line">  <span class="keyword">int</span> msgid, len;</span><br><span class="line">  <span class="keyword">key_t</span> key = <span class="number">1111</span>; <span class="comment">// snd할때 키값과 동일해야한다.</span></span><br><span class="line">  <span class="keyword">if</span>((msgid == msgget(key, IPC_CREAT|<span class="number">0644</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;msgget&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  len = msgrcv(msgid, &amp;msg, <span class="number">50</span>, <span class="number">0</span> ,<span class="number">0</span>); <span class="comment">// (메시지id, size , type, wait);</span></span><br><span class="line">  <span class="comment">//type에 일치하는 가장먼저오는 메시지를 수신한다</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Received Message is [%d] %s]\n&quot;</span>, len, msg.text);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>System Programming</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
        <tag>File</tag>
        <tag>Pipe</tag>
        <tag>Message Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>System Programming - Scheduling</title>
    <url>/2021/07/29/System-Programming-Scheduling/</url>
    <content><![CDATA[<h1 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h1><h2 id="우선순위-기반-스케쥴러"><a href="#우선순위-기반-스케쥴러" class="headerlink" title="우선순위 기반 스케쥴러"></a>우선순위 기반 스케쥴러</h2><ul>
<li>정적 우선순위<ul>
<li>프로세스마다 우선순위를 미리 지정</li>
</ul>
</li>
<li>동적 우선순위<ul>
<li>상황에 따라 스케쥴러가 우선순위를 동적으로 변경</li>
</ul>
</li>
</ul>
<h2 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h2><ul>
<li><p>Portable Operating system interface의 약자로</p>
<p>  서로 다른 UNIX OS의 공통 API를 정의하여 이식성이 높은 개발하기 위한 목적으로 IEEE에서 책정한 Application 규격이다.</p>
</li>
<li><p>리눅스는 POSIX에서 정한 규격으로 시스템콜을 정의했다</p>
</li>
</ul>
<h2 id="우선순위-관련-System-Call"><a href="#우선순위-관련-System-Call" class="headerlink" title="우선순위 관련 System Call"></a>우선순위 관련 System Call</h2><h3 id="nice"><a href="#nice" class="headerlink" title="nice()"></a>nice()</h3><ul>
<li>root가 소유한 프로세스만 우선순위를 높일 수 있고 </li>
</ul>
<p>그외 다른 프로세스의 우선순위는 낮출수만 있다.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nice</span> <span class="params">(<span class="keyword">int</span> inc)</span></span>; </span><br></pre></td></tr></table></figure>


<h3 id="getpriority-setpriority"><a href="#getpriority-setpriority" class="headerlink" title="getpriority(), setpriority()"></a>getpriority(), setpriority()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getpriority</span><span class="params">(<span class="keyword">int</span> which, <span class="keyword">id_t</span> who)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setpriority</span><span class="params">(<span class="keyword">int</span> which, <span class="keyword">in_t</span> who, <span class="keyword">int</span> value)</span></span>; </span><br></pre></td></tr></table></figure>
<ul>
<li>이름에도 알 수 있듯이 프로세스의 우선순위를 가져오거나 정할 수 있다.</li>
<li>which는 가져오거나 세팅할 대상(PRIO_PROCESS,PRIO_PGRP,PRIO_USER), </li>
<li>who는 process ID (0을 넣으면 현재 프로세스이다), value는 우선순위로 인자를 갖는다</li>
</ul>
]]></content>
      <categories>
        <category>System Programming</category>
        <category>OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>System-Programming-Signal</title>
    <url>/2021/08/04/System-Programming-Signal/</url>
    <content><![CDATA[<h1 id="시그널-signal"><a href="#시그널-signal" class="headerlink" title="시그널 (signal)"></a>시그널 (signal)</h1><ul>
<li>유닉스에서 사용되는 커널 또는 프로세스에서 다른 프로세스에 어떤 이벤트가 발생되었는지를 알려주는 기법</li>
<li>ex) Ctrl + C 프로세스 종료 , Ctrl + Z 프로세스를 백그라운드로</li>
</ul>
<h2 id="주요-Signal"><a href="#주요-Signal" class="headerlink" title="주요 Signal"></a>주요 Signal</h2><ul>
<li>시그널 종류와 각 시그널에 따라 기능이 매핑되어있음<ul>
<li>SIGKILL : 프로세스를 죽임</li>
<li>SIGALARM: 알람 발생</li>
<li>SIGSTP : 프로세스 멈춤 (= ctrl + Z)</li>
<li>SIGCONT: 멈춰진 프로세스 재개</li>
<li>SIGINT : 프로세스에 인터럽트를 보내고 죽임 (=Ctrl + C)</li>
<li>SIGSEGV: 프로세스가 다른 메모리영역을 침법</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$kill</span> -l <span class="comment">#명령어를 통해 시그널 명령어들을 볼 수 있음 </span></span><br></pre></td></tr></table></figure>
<p><img src="/image/System-Programming-Signal_images/killll.png"></p>
<h2 id="Signal-동작"><a href="#Signal-동작" class="headerlink" title="Signal 동작"></a>Signal 동작</h2><ul>
<li>프로그램에서 특정 시그널의 기본 동작대신 다른 동작하도록 재정의가 가능하다.</li>
<li>각 프로세스에서  시그널 처리에 대해 다음과 같은 동작 설정 가능하다.<ol>
<li>시그널 무시</li>
<li>시그널 블록</li>
<li>프로그램 안에 등록된 시그널 핸들러로 재정의한 특정 동작 수행</li>
</ol>
</li>
</ul>
<h2 id="Send-Signal"><a href="#Send-Signal" class="headerlink" title="Send Signal"></a>Send Signal</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> sig)</span> <span class="comment">// pid와 sig#를 인자로 받는다 </span></span></span><br></pre></td></tr></table></figure>

<h2 id="받은-Signal-기본-동작-재정의"><a href="#받은-Signal-기본-동작-재정의" class="headerlink" title="받은 Signal 기본 동작 재정의"></a>받은 Signal 기본 동작 재정의</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">void</span> (*signal(<span class="keyword">int</span> signum, <span class="keyword">void</span> (*handler)(<span class="keyword">int</span>)))(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">singal(SIGINT, SIG_IGN); <span class="comment">// SIGINT를 받으면 SIG_IGN(시그널 무시) 동작</span></span><br><span class="line"></span><br><span class="line">signal(SIGINT, (<span class="keyword">void</span> *)signal_handler); <span class="comment">// SIGINT를 받으면 핸들러를 통해 재정의한 동작을 실행</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>sigloop.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">signal_handler</span> <span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Catch SIGINT!, but no stop\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (signal (SIGINT, signal_handler) == SIG_ERR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t catch SIGINT!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">          pause();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sigkill.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pid, sig_num;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;usage %s [pid][signum]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">  sig_num = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( kill(pid, sig_num)) &#123; <span class="comment">// Kill 시스템콜을 통해 해당 프로세스에 SIG_NUM을 넘겨줌</span></span><br><span class="line">    perror(<span class="string">&quot;To send Signal is failed\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/System-Programming-Signal_images/sigexam.png"><br>다음과 같이 원래 SIGINT의 디폴트는 종료이지만 종료하지않고<br>재정의한대로 메시지가 출력된다.</p>
]]></content>
      <categories>
        <category>System Programming</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
        <tag>Signal</tag>
      </tags>
  </entry>
  <entry>
    <title>Git ignore 적용 안될때</title>
    <url>/2021/08/06/git-add/</url>
    <content><![CDATA[<h1 id="gitIgnore-적용-안될-때"><a href="#gitIgnore-적용-안될-때" class="headerlink" title=".gitIgnore 적용 안될 때"></a>.gitIgnore 적용 안될 때</h1><p>분명 .gitignore에 macOS에서 메타데이터가 저장되는 .DS_Store와<br>intellij에서 해당프로젝트에 Configuration과 관련되어있는 .IDEA 폴더를 추가했는데도<br>add commit push를 하고나서 레포지토리에 가서 확인하면 깃이그노어가 이그노어되어있어 모든 파일이 다올라갔다.</p>
<p>그 이유는 <code>git add *</code> 에 있었다 <code>git add *</code>의 경우</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git add * The following paths are ignored by one of your .gitignore files: git-add/ignore.txt</span><br><span class="line">Use -f <span class="keyword">if</span> you really want to add them.</span><br></pre></td></tr></table></figure>
<p>라는 경고가 뜨는데, 네가 gitignore에 작성한 파일에 add할 파일이 있던데 그래도 올릴거야? 하고 친절히 물어보는 것이였다.</p>
<p>이때는  <code> git add .</code> 를 써서 해결 할 수 있다. </p>
<h2 id="결론-모든-메시지는-잘-읽어보고-확인하자-👀"><a href="#결론-모든-메시지는-잘-읽어보고-확인하자-👀" class="headerlink" title="결론: 모든 메시지는 잘 읽어보고 확인하자! 👀"></a>결론: 모든 메시지는 잘 읽어보고 확인하자! 👀</h2>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>TIL</tag>
        <tag>trouble-shooting</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Deploy시 Spawn Failed 오류해결 방법</title>
    <url>/2021/08/14/blog-Spawn-Failed/</url>
    <content><![CDATA[<h1 id="Hexo-Deploy시-Spawn-Failed-해결방법"><a href="#Hexo-Deploy시-Spawn-Failed-해결방법" class="headerlink" title="Hexo Deploy시 Spawn Failed 해결방법"></a>Hexo Deploy시 Spawn Failed 해결방법</h1><h2 id="문제-인식"><a href="#문제-인식" class="headerlink" title="문제 인식"></a>문제 인식</h2><ul>
<li><p>여느때와 같게 기술블로그 작성을 위해 <code>hexo clean &amp;&amp; hexo deploy</code>를 해주었는데<br>이러한 오류 메시지가 발생하였다 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">remote: Support <span class="keyword">for</span> password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class="line">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ <span class="keyword">for</span> more information.</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/Jeongisu94/Jeongisu94.github.io.git/&#x27;</span>: The requested URL returned error: 403</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/Users/jeong-isu/dev/blog/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:394:28)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure></li>
<li><p>대충 보아하니 작성일(210814)기준으로 어제 비밀번호가 만료됐으니까 비번말고 대신 토큰써라 하는 내용이다</p>
</li>
</ul>
<h2 id="문제-해결-방법"><a href="#문제-해결-방법" class="headerlink" title="문제 해결 방법"></a>문제 해결 방법</h2><h3 id="토큰-생성하기"><a href="#토큰-생성하기" class="headerlink" title="토큰 생성하기"></a>토큰 생성하기</h3><ul>
<li><p>github.com의 프로필 사진을 클릭하여 Setting - Development Setting - Personal Access Token에 들어가자</p>
<p><img src="/image/blog-Spawn-Failed_images/personal_access_token.png"></p>
</li>
<li><p>Generate new toekn을 클릭하여 토큰을 생성하자</p>
<p><img src="/image/blog-Spawn-Failed_images/genToken.png"></p>
<ul>
<li>노트에는 어떤 토큰인지 설명과 만료기한을 설정해주자 Repo에 접근해야하니 Repo도 체크해주자</li>
</ul>
</li>
<li><p>Generate Token을 누르면 토큰이 생성됨과 동시에 토큰이 나오는데 이 토큰은 한번밖에 알려주지 않으니 클립보드에 복사해두자</p>
</li>
</ul>
<h3 id="configure-yml-파일-수정하기"><a href="#configure-yml-파일-수정하기" class="headerlink" title="_configure.yml 파일 수정하기"></a>_configure.yml 파일 수정하기</h3><ul>
<li>hexo 설정파일인 _config.yml파일에서 repo설정을 다음과 같이바꿔준다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repo: https:<span class="comment">//&#123;githubID&#125;:&#123;Token&#125;@github.com/&#123;GithubID&#125;/githubID.github.io.git</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>그 후 hexo clean &amp;&amp; hexo deploy를 하면 오류 없이 잘 배치 된다.</p>
<p><img src="/image/blog-Spawn-Failed_images/complete.png"></p>
</li>
<li><p>토큰이 외부에 노출되지 않도록 주의하자! </p>
</li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>trouble-shooting</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>내 개발환경 셋팅하기 Oh My ZSH , iTerm2 , power10k</title>
    <url>/2021/07/30/mac-setting-iterm/</url>
    <content><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>모종의 이유로 맥 셋팅을 처음부터 다시 하게되는 경우가 생긴다.<br>Time Machine이나 Migration을 사용하기엔 레거시가 남을 것 같아 찝찝한 기분이 들어 일일히 한땀한땀 셋팅을 한다.<br>그렇기 때문에 구글링하고 여러 블로그를 서핑하면서 셋팅하는데 꽤 많은 시간을 소비하게 된다..<br>그래서 그 시간을 줄이기위해 나의 맥 셋팅을 포스팅를 하게 되었다.</p>
<h2 id="🍺-Homebrew"><a href="#🍺-Homebrew" class="headerlink" title="🍺 Homebrew"></a>🍺 <a href="https://brew.sh/index_ko">Homebrew</a></h2><ul>
<li>포멧을하고나서 가장 먼저 설치하는 MacOS 전용 패키기 관리자이다.<br> 앱을 설치하기 위해서는 App Store서 설치하거나<br> 앱을 배포하는 공식 홈페이지에서 다운받아서 Application 폴더에 옮겨줘야하는 귀찮은 작업을 해야하지만<br> Homebrew를 이용하면 간단한 명령어를 통해서 등록된 앱들을 설치, 업데이트, 삭제 할 수 있다! 🙃</li>
</ul>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ul>
<li>설치법은 매우간단하다 터미널 앱을 켜서 다음 명령어를 입력해주면 된다.</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>homebrew를 설치했으면 다음은 gui에서 사용가능한 앱을 설치해주는 패키지인 cask를 설치해야한다</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">brew install cask</span><br></pre></td></tr></table></figure>

<p>cask를 설치헀으면 <code>brew list</code> 명령어를 통하여 설치한 앱을 확인 할 수 있다. </p>
<p>그리고 웹서버로부터 콘텐츠를 가져오는 프로그램인 ‘wget’을 설치해야한다</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">brew install wget</span><br></pre></td></tr></table></figure>

<p>gui프로그램이 아니므로 –cask 옵션을 사용하지 않는다</p>
<p><img src="/image/mac-setting-iterm_images/img.png"></p>
<p>원하는 앱을 찾고싶을땐 <code>brew search &#123;appname&#125;</code>으로 검색하여 설치 할 수 있다.</p>
<h2 id="iterm2"><a href="#iterm2" class="headerlink" title=" iterm2"></a><img src="/image/mac-setting-iterm_images/icon_iterm.png" style="float:left;"> <a href="https://iterm2.com/">iterm2</a></h2><ul>
<li>정말 기본 쉘명령어만 사용할 수 있는 기본 terminal에 iterm은 테마를 적용시켜 가독성뿐만 아니라<br>  예쁜 UI를 가질 수 있고 split view나 리소스 모니터링등 여러가지 기능을 제공한다</li>
</ul>
<h3 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h3><ul>
<li>위에서 설치한 homebrew를 패키지 관리자를 통해서 설치 할 수있다 다음의 명령어를 복사해서 입력해보자</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">homebrew install --cask iterm2</span><br></pre></td></tr></table></figure>

<h3 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h3><h4 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h4><ul>
<li>iterm을 설치했으면 이제 차례차레 셋팅을 해줄 차례가 된다. 가독성이 떨어지는 기본 폰트부터 바꿔보자<br>  내가 사용하는 폰트는 <a href="https://github.com/naver/d2codingfont">D2 Coding</a> 이다 이 폰트는 i,l,1,I와 0,o,O,ㅇ과 같이 구분하기 힘든 폰트들을<br>  나눔바른고딕을 기반으로 수정한 폰트이다.</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">wget -P ./Downloads -L https://github.com/naver/d2codingfont/raw/master/D2Coding-Ver1.3.2-20180524.zip</span><br></pre></td></tr></table></figure>

<ul>
<li><p>다운로드 폴더에서 다운받은 .zip 파일을 압축해제하고 D2Coding-Ver1.3.2-20180524-all.ttc를 실행하여 폰트를 설치하자</p>
<p>  그 후 Preferences (cmd + ,)에서 Profile - Default - text - font를 D2Coding으로 변경한다</p>
</li>
</ul>
<p><img src="/image/mac-setting-iterm_images/font.png"></p>
<ul>
<li>그러면 훨씬 보기 좋은 글씨체로 변경된다! 👍</li>
</ul>
<h2 id="OH-MY-ZSH"><a href="#OH-MY-ZSH" class="headerlink" title=" OH MY ZSH"></a><img src="/image/mac-setting-iterm_images/ohmyzsh.png" style="float:left;"> <a href="https://ohmyz.sh/">OH MY ZSH</a></h2><ul>
<li><em>oh my zsh</em> 은 zsh쉘 터미널 환경을 플러그인 프레임워크이다 내장 플러그인과 테마도 갖추고있고<br>  필요에따라서 다양한 플러그인을 설치하여 사용 할 수 있다</li>
</ul>
<h3 id="Install-2"><a href="#Install-2" class="headerlink" title="Install"></a>Install</h3><ul>
<li>마찬가지로 다음 명령어를 복사하여 입력해 설치하자!<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Setting-1"><a href="#Setting-1" class="headerlink" title="Setting"></a>Setting</h3><p>Oh my zsh를 설치후엔 플러그인과 테마를 적용해주도록 한다</p>
<h4 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h4><p>현재사용 하고있는 플러그인은 다음과 같다</p>
<ol>
<li>zsh-completions : 자동완성 기능을 제공한다<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">brew install zsh zsh-completions</span><br></pre></td></tr></table></figure></li>
<li>zsh-autosuggestions : 과거에 썻던 명령어를 기반으로 명령어를 추천해준다<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li>
</ol>
<p>이렇게 설치한 플러그인들은 <code>vi ~/.zshrc</code> 명령어를 통해 plugins에 다음 그림과 같이 입력해주도록 한다.</p>
<p><img src="/image/mac-setting-iterm_images/zshrc.png"></p>
<h4 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h4><p>현재 사용하는 테마는 powerlevel10k이다.<br>이 테마는 쉘을 입력한 시간, 현재 위치, 브랜치 등등 다양한 정보를 가독성 높게 표현해준다</p>
<p>다음 명령어를 복사해서 입력해주자</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>
<p>설치후에 <code>vi ~/.zshrc</code> 명령어를 통해 zshrc파일에 <code>ZSH_THEME</code>에<br><code>=&quot;powerlevel10k/powerlevel10k&quot;</code> 를 입력후 저장하고 iterm을 재실행 해주면 설정이 시작된다.</p>
]]></content>
      <categories>
        <category>mac</category>
        <category>setting</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>setting</tag>
        <tag>zsh</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP - Design Pattern</title>
    <url>/2021/09/06/oop-java-26/</url>
    <content><![CDATA[<h1 id="디자인-패턴"><a href="#디자인-패턴" class="headerlink" title="디자인 패턴"></a>디자인 패턴</h1><ul>
<li>디자인 패턴이란 소프트 공학,디자인에서 공통적으로 발생되는 문제에 대해 재사용 가능한 해결책이다</li>
<li>정답이 있는 형태가 아니며 프로젝트의 상황에 맞추어 적용한다</li>
</ul>
<h2 id="Gang-of-foul-디자인-패턴"><a href="#Gang-of-foul-디자인-패턴" class="headerlink" title="Gang of foul 디자인 패턴"></a>Gang of foul 디자인 패턴</h2><ul>
<li>모든 사람들이 다양한 공통된 경험을 가지고 있을 수 없기 떄문에 이러한 지식을 공유하기 위해서 고안된 디자인 패턴</li>
<li><strong>객체지향 개념</strong>에 따른 설계중 재사용할 경우 유용한 설계를 정리해둔 것</li>
</ul>
<h2 id="디자인-패턴의-장단점"><a href="#디자인-패턴의-장단점" class="headerlink" title="디자인 패턴의 장단점"></a>디자인 패턴의 장단점</h2><h3 id="디자인-패턴의-장점"><a href="#디자인-패턴의-장점" class="headerlink" title="디자인 패턴의 장점"></a>디자인 패턴의 장점</h3><ul>
<li>개발자간 원활한 소통</li>
<li>소프트웨어 구조 파악 용이</li>
<li>재사용을 통한 개발 시간 단축</li>
<li>설계 변경 요청에 대한 유연한 대처</li>
</ul>
<h3 id="디자인-패턴의-단점"><a href="#디자인-패턴의-단점" class="headerlink" title="디자인 패턴의 단점"></a>디자인 패턴의 단점</h3><ul>
<li>객체지향적 설계 / 구현<ul>
<li>모든 개발자가 객체지향적 개념을 갖고있지 않을 수 있으므로 부담이 될 수있음</li>
</ul>
</li>
<li>초기 투자 비용 부담<ul>
<li>초기 개발시 여러가지 구조를 작성해야하기 때문에 시간이 오래걸림</li>
</ul>
</li>
</ul>
<h2 id="디자인-패턴의-종류"><a href="#디자인-패턴의-종류" class="headerlink" title="디자인 패턴의 종류"></a>디자인 패턴의 종류</h2><table>
<thead>
<tr>
<th>패턴</th>
<th>설명</th>
<th>종류</th>
</tr>
</thead>
<tbody><tr>
<td>생성패턴</td>
<td>객체를 생성하는 것과 관련된 패턴으로 목적은 객체의 생성과 변경이 전체 시스템에 미치는 영향을 최소화하고 코드의 유연성 향상이다.</td>
<td>Factory Method, Singleton, Prototype, Builder, Abstract Factory, Chaining</td>
</tr>
<tr>
<td>구조패턴</td>
<td>자료구조나 인터페이스 구조 등 프로그램 구조를 설계하는데 활용 될 수 있는 패턴</td>
<td>Adapter, Composite, Bridge, Decorator, Facade, Flyweight, Proxy</td>
</tr>
<tr>
<td>행위패턴</td>
<td>반복적으로 사용되는 객체들의 상호작용을 패턴화 한 것, 클래스나 객체들이 상호작용하는 방법과 책임을 분산하고 독립적으로 일을 처리하고자 할때 사용</td>
<td>Template Method, Interpreter, Iterator, Observer, Strategy, Visitor, COR, Command, Mediator, State, Memento</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>oop</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>design pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP - Design Pattern - Singleton</title>
    <url>/2021/09/06/oop-java-27/</url>
    <content><![CDATA[<h1 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h1><ul>
<li>생성패턴</li>
<li>어떠한 클래스의 객체가 유일하게 1개만 존재해야 할때 사용하는 디자인 패턴</li>
<li>프린터나 , TCP Socket 통신에서 서버와 연결된 connect 객체같이 서로 자원을 공유 할 때 사용된다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SocketClient socketClient;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SocketClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SocketClient <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( socketClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            socketClient = <span class="keyword">new</span> SocketClient();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> socketClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connect!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>인스턴스는 <code>private static</code>로 선언하고</li>
<li>생성자는 외부에서 호출 불가능하도록 <code>private</code>로 선언한다</li>
<li>외부에서 같은 객체를 가질 받을 수 있도록 <code>public static getInstacne()</code>를 구현한다.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>OOP - Design Pattern - Adapter</title>
    <url>/2021/09/06/oop-java-28/</url>
    <content><![CDATA[<h1 id="Adapter-Pattern"><a href="#Adapter-Pattern" class="headerlink" title="Adapter Pattern"></a>Adapter Pattern</h1><ul>
<li>구조 패턴</li>
<li>어댑터는 이름에서 알 수 있듯이 실생활에서 사용하는 110V -&gt; 220V 바꿔주는 어댑터처럼 호환성이 없는 기존 클래스의 인터페이스를 변환하여 재사용 할 수 있도록 한다.</li>
</ul>
<p><img src="/image/oop-java-28_images/6495df4b.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Electronic110V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Electronic220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Airconditioner</span> <span class="keyword">implements</span> <span class="title">Electronic220V</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;220V 에어컨 on&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cleaner</span> <span class="keyword">implements</span> <span class="title">Electronic110V</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;110V 청소기 ON&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HairDryer</span> <span class="keyword">implements</span> <span class="title">Electronic110V</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;110V 헤어드라이어 on&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// adapter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span> <span class="params">(Electronic110V electronic110V)</span> </span>&#123;</span><br><span class="line">        electronic110V.powerOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HairDryer hairDryer = <span class="keyword">new</span> HairDryer();</span><br><span class="line">        Cleaner cleaner = <span class="keyword">new</span> Cleaner();</span><br><span class="line">        Airconditioner airconditioner = <span class="keyword">new</span> Airconditioner();</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter();</span><br><span class="line">        adapter.connect(cleaner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>현재 상태에서는 어댑터는 110V의 제품밖에 받을 수 없다 따라서 220V에서 110V로 바꿔줄 수 있는 어댑터를 만들어야한다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketAdapter</span> <span class="keyword">implements</span> <span class="title">Electronic110V</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Electronic220V electronic220V;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketAdapter</span><span class="params">(Electronic220V electronic220V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.electronic220V = electronic220V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        electronic220V.connect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>소켓 어댑터도 기본적으로 110V를 사용하기때문에 110V를 구현해야한다</li>
<li>생성자에서 220V를 110V로 바꿔줄 220V 제품을 받는다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Electronic110V hairDryer = <span class="keyword">new</span> HairDryer();</span><br><span class="line">        Electronic110V cleaner = <span class="keyword">new</span> Cleaner();</span><br><span class="line">        Electronic220V airconditioner = <span class="keyword">new</span> Airconditioner();</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter();</span><br><span class="line"></span><br><span class="line">        Electronic110V socketAdapter = <span class="keyword">new</span> SocketAdapter(airconditioner);</span><br><span class="line">        socketAdapter.powerOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>110V의 인터페이스 객체임에도 다른 인터페이스 객체를 사용 할 수 있게되었다.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>System-Programming-Pthread</title>
    <url>/2021/08/05/System-Programming-Pthread/</url>
    <content><![CDATA[<h1 id="Pthread"><a href="#Pthread" class="headerlink" title="Pthread"></a>Pthread</h1><h2 id="Pthread란"><a href="#Pthread란" class="headerlink" title="Pthread란"></a>Pthread란</h2><ul>
<li>POSIX thread는 유닉스 시스템 핵심 스레딩 라이브러리이다</li>
<li>대부분 다른 스레딩 솔루션도 Pthread를 기반으로 구현되어있다</li>
</ul>
<h2 id="Pthread-라이브러리"><a href="#Pthread-라이브러리" class="headerlink" title="Pthread 라이브러리"></a>Pthread 라이브러리</h2><ul>
<li><p>&lt;pthread.h&gt; 헤더파일에 정의 되어있음</p>
</li>
<li><p>모든 함수는 pthread_ 로 시작</p>
</li>
<li><p>크게 두가지로 분류 된다</p>
<ul>
<li>스레드 관리: 생성 종료 조인 디테치 함수등</li>
<li>동기화: 뮤텍스같은 동기화 관련 함수가있음</li>
</ul>
</li>
<li><p>기본 라이브러리인 glibc와 분리된 libpthread 라이브러리에 별도로 pthread가 구현되어있으므로</p>
<p>컴파일시에 명시적으로 -pthread 옵션을 사용해야함</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -pthread test.c -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h2 id="스레드-사용"><a href="#스레드-사용" class="headerlink" title="스레드 사용"></a>스레드 사용</h2><h3 id="Create-Thread"><a href="#Create-Thread" class="headerlink" title="Create Thread"></a>Create Thread</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_create</span> <span class="params">(<span class="keyword">pthread_t</span> *thread, <span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">void</span> *(*start_routine) (<span class="keyword">void</span>*), <span class="keyword">void</span>*arg)</span></span>;</span><br><span class="line"><span class="comment">/* thread: 생성된 스레드 식별자</span></span><br><span class="line"><span class="comment">   attr: 스레드 특징 설정</span></span><br><span class="line"><span class="comment">   start_routine: 스레드 함수(스레드로 분기해서 실행할 함수)</span></span><br><span class="line"><span class="comment">   arg: 스레드 함수 인자 */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_t</span> thread1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread_function</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line"></span><br><span class="line">ret = pthread_create(&amp;thread1,<span class="literal">NULL</span>, thread_function, (<span class="keyword">void</span>*)message1);</span><br><span class="line"><span class="comment">// return갑은 성공하면 0 </span></span><br></pre></td></tr></table></figure>

<h3 id="Exit-Thread"><a href="#Exit-Thread" class="headerlink" title="Exit Thread"></a>Exit Thread</h3><ul>
<li><p>프로세스가 끝나면 자동으로 스레드가 종료되지만 명시적으로 종료해야할때 사용함</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="keyword">void</span> *retaval)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="Thread-Join"><a href="#Thread-Join" class="headerlink" title="Thread Join"></a>Thread Join</h3></li>
<li><p>프로세스가 실행이되어 여러 스레드를 생성했을때 메인 스레드에서 다른 스레드를 기다리지않고</p>
<p>그 후의 코드를 실행하거나 다른 스레드의 작업을 기다리지 않고 바로 실행하게되면 오류가 발생할 수 있는데</p>
<p>이때 스레드 조인을 통하여 다른 스레드를 기다릴 수 있다</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span> <span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">void</span> **thread_return)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pthread_join (p_thread, (<span class="keyword">void</span> *) &amp;status); <span class="comment">// p_thread식별자를 가진 스레드의 종료를 기다리고 status 값을 포인터로 가져온다</span></span><br><span class="line"></span><br><span class="line">prtinf(<span class="string">&quot;thread join %d\n&quot;</span> , status); </span><br></pre></td></tr></table></figure>

<h3 id="Thread-Detach"><a href="#Thread-Detach" class="headerlink" title="Thread Detach"></a>Thread Detach</h3><ul>
<li><p>해당 스레드가 종료될 경우 그 즉시 관련 리소스를 해제한다</p>
<ul>
<li>조인을 기다리지 않고 종료 즉시 리소스 해제</li>
</ul>
</li>
<li><p>예를들어 메인스레드에서 여러 스레드를 생성 했을 때 그 스레드들이 사용한 메모리영역이나 변수는<br>메인 스레드가 종료되기전까지는 해제 되지않는데 이때 해제하는 방법은 join과 detach이다.</p>
<ul>
<li>join은 메인스레드에서 해당 스레드가 종료되고 종료 상태값을 가지고 추가작업을 하게된다.</li>
<li>detach는 해당 스레드가 종료되면 바로 해제</li>
</ul>
</li>
</ul>
<h3 id="Thread-Mutex-Mutual-exclusion"><a href="#Thread-Mutex-Mutual-exclusion" class="headerlink" title="Thread Mutex - Mutual exclusion"></a>Thread Mutex - Mutual exclusion</h3><ul>
<li>서로 다른 프로세스가 공유 자원을 사용하고 있을 경우에 다른 프로세스가 사용하지 못하게 제어하는 기법</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_mutext_t</span> mutex_lock = PTHREAD_MUTEX_INITIALIZER;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex_lock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="keyword">int</span> g_count =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">t_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123; <span class="comment">// 스레드 함수</span></span><br><span class="line">  <span class="keyword">char</span>* thread_name = (<span class="keyword">char</span> *)data;</span><br><span class="line">  pthread_mutex_lock(&amp;mutex_lock); <span class="comment">// Mutex로 락</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s start\n&quot;</span>, thread_name); </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    g_count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s, g_count = %d\n&quot;</span> thread_name, g_count);</span><br><span class="line">  pthread_mutex_unlock(&amp;mutex_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">pthread_t</span> p_thread1, p_thread2;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  pthread_create(&amp;p_thread1, <span class="literal">NULL</span>, t_function, (<span class="keyword">void</span> *)<span class="string">&quot;Thread1&quot;</span>);</span><br><span class="line">  pthread_create(&amp;p_thread2, <span class="literal">NULL</span>, t_function, (<span class="keyword">void</span> *)<span class="string">&quot;Thread2&quot;</span>);</span><br><span class="line">  pthread_join(p_thread1, (<span class="keyword">void</span> *)&amp;status);</span><br><span class="line">  pthread_join(p_thread2, (<span class="keyword">void</span> *)&amp;status);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>OOP - Design Pattern - Proxy</title>
    <url>/2021/09/06/oop-java-29/</url>
    <content><![CDATA[<h1 id="Proxy-Pattern"><a href="#Proxy-Pattern" class="headerlink" title="Proxy Pattern"></a>Proxy Pattern</h1><ul>
<li>구조 패턴</li>
<li>일반적으로 프록시는 다른 무언가와 이어지는 인터페이스의 역할을 하는 클래스이다. 프록시는 어떠한 것(이를테면 네트워크 연결, 메모리 안의 커다란 객체, 파일, 또 복제할 수 없거나 수요가 많은 리소스)과도 인터페이스의 역할을 수행할 수 있다.</li>
<li>Client는 Proxy로 부터 결과를 받는다</li>
</ul>
<p><img src="/image/oop-java-29_images/8b92f4d3.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Html.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Html</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Html</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = url;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IBrowser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBrowser</span> </span>&#123;</span><br><span class="line">  <span class="function">Html <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Browser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Browser</span> <span class="keyword">implements</span> <span class="title">IBrowser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Browser</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = url;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Html <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Browser is loading html from : &quot;</span> + url);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Html(url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Browser browser = <span class="keyword">new</span> Browser(<span class="string">&quot;www.google.com&quot;</span>);</span><br><span class="line">    browser.show();</span><br><span class="line">    browser.show();</span><br><span class="line">    browser.show();</span><br><span class="line">    browser.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/image/oop-java-29_images/452dc730.png"></p>
<ul>
<li>현재 proxy가 없는 코드에서는 볼때마다 계속해서 로딩을 하게되므로 큰 오버헤드가 발생 할 수있다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserProxy</span> <span class="keyword">implements</span> <span class="title">IBrowser</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> Html html;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BrowserProxy</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Html <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (html == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.html = <span class="keyword">new</span> Html(url);</span><br><span class="line">            System.out.println(<span class="string">&quot;Browser loading html from : &quot;</span> + url);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Browser use cache html from : &quot;</span> + url);</span><br><span class="line">        <span class="keyword">return</span> html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    IBrowser browser = <span class="keyword">new</span> BrowserProxy(<span class="string">&quot;www.naver.com&quot;</span>);</span><br><span class="line">    browser.show();</span><br><span class="line">    browser.show();</span><br><span class="line">    browser.show();</span><br><span class="line">    browser.show();</span><br><span class="line">    browser.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/oop-java-29_images/77d4bb5e.png"></p>
<ul>
<li>로딩은 한번만 진행되고 그 이후엔 캐싱을 통해 오버헤드를 줄일 수 있다</li>
</ul>
<h2 id="aop"><a href="#aop" class="headerlink" title="aop"></a>aop</h2><ul>
<li>원하는 기능들, 흩어져있는 기능들을 동일하게 제공하는 역할을 프록시 패턴을 이용하여 만들 수 있다</li>
<li>특정한 메소드 실행시간, 메소드 전후로 특정한 작업을 하거나 어떠한 리퀘스트나 리스폰 정보를 남긴다던지 일괄적으로 패키지에 모든 메소드들에 기능을 제공 할 수있다</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopBrowser</span> <span class="keyword">implements</span> <span class="title">IBrowser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> Html html;</span><br><span class="line">    <span class="keyword">private</span> Runnable before;</span><br><span class="line">    <span class="keyword">private</span> Runnable after;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AopBrowser</span><span class="params">(String url, Runnable before, Runnable after)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.before = before;</span><br><span class="line">        <span class="keyword">this</span>.after = after;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Html <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before.run();</span><br><span class="line">        <span class="keyword">if</span> (html == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.html = <span class="keyword">new</span> Html(url);</span><br><span class="line">            System.out.println(<span class="string">&quot;Aop Browser html loading from : &quot;</span> + url);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        after.run();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Aop Browser use Cache : &quot;</span> + url);</span><br><span class="line">        <span class="keyword">return</span> html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    AtomicLong start = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">    AtomicLong end = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">    </span><br><span class="line">    IBrowser aopBrowser = <span class="keyword">new</span> AopBrowser(<span class="string">&quot;www.google.com&quot;</span>,</span><br><span class="line">            ()-&gt;&#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">              start.set(System.currentTimeMillis());</span><br><span class="line">            &#125;,</span><br><span class="line">            ()-&gt;&#123;</span><br><span class="line">              end.set(System.currentTimeMillis() - start.get());</span><br><span class="line">            &#125; );</span><br><span class="line"></span><br><span class="line">    aopBrowser.show();</span><br><span class="line">    System.out.println(<span class="string">&quot;loading time :  &quot;</span> + end.get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    aopBrowser.show();</span><br><span class="line">    System.out.println(<span class="string">&quot;loading time :  &quot;</span> + end.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/image/oop-java-29_images/345b219e.png"></p>
]]></content>
  </entry>
</search>
