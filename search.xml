<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS 기초</title>
    <url>/2021/07/21/CSS_Basic/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>선택자 안에 속성과 값을 정의한다.</p>
<h3 id="선택자-selector"><a href="#선택자-selector" class="headerlink" title="선택자 (selector)"></a>선택자 (selector)</h3><p>선택자는 HTML에 CSS를 적용하기 위한 HTML의 특정한 요소를 선택하여 명시해주는  역할을 한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>다음과 같이 사용할 수 있다.</p>
<h3 id="클래스-선택자"><a href="#클래스-선택자" class="headerlink" title="클래스 선택자"></a>클래스 선택자</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* class.css */</span></span><br><span class="line"><span class="comment">/* class=&quot;title&quot; */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-text</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html file  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span> title <span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;main-text&quot;</span>&gt;</span> main text <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>. 을 이용해서 클래스임을 나타낸다.</p>
<p>선택자 없이 인라인 방식으로 직접 작성 할 수있다</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>직접 손으로 작성할 때 코드가 길어질 수록  하드코딩 해야하고 수정시 굉장히 번거로워 질 수있어서 지양해야한다.</p>
<h3 id="HTML에-Embed하기"><a href="#HTML에-Embed하기" class="headerlink" title="HTML에 Embed하기"></a>HTML에 Embed하기</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">		<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">			속성: 값;</span></span><br><span class="line"><span class="css">		&#125;</span></span><br><span class="line"><span class="css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>content 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>content 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>content 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML-외부에서-불러오기-link-태그-이용"><a href="#HTML-외부에서-불러오기-link-태그-이용" class="headerlink" title="HTML 외부에서 불러오기 ( link 태그 이용)"></a>HTML 외부에서 불러오기 ( link 태그 이용)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/css/main.css&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.css */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">color</span> :red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rel은 현재 HTML의 문서와 불러오는 문서와의 관계를 나타내며 href는 그 문서의 경로이다. </p>
<p>CSS를 외부에서 불러올 경우 재사용에 용이하다.</p>
<h2 id="속성-Properties-과-값-Value"><a href="#속성-Properties-과-값-Value" class="headerlink" title="속성(Properties)과 값(Value)"></a>속성(Properties)과 값(Value)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	속성<span class="number">1</span>: 값;</span><br><span class="line">	속성<span class="number">2</span>: 값;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.notion.so/f15d9b6e6cb0493cbdf1d2aff4413b80">속성과 값의 종류</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Web</tag>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloud Computing AWS 시작하기</title>
    <url>/2021/07/21/Cloud-Computing-AWS-EC2/</url>
    <content><![CDATA[<h1 id="AWS-Amazon-Web-Service"><a href="#AWS-Amazon-Web-Service" class="headerlink" title="AWS(Amazon Web Service)"></a>AWS(Amazon Web Service)</h1><h2 id="EC2-elastic-computer-생성하기"><a href="#EC2-elastic-computer-생성하기" class="headerlink" title="EC2(elastic computer) 생성하기"></a>EC2(elastic computer) 생성하기</h2><ol>
<li>Region은 서울로 설정</li>
</ol>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled.png"></p>
<ul>
<li>생성했던 지역에서 다른지역으로 옮기면 EC2가 보이지 않는다.</li>
</ul>
<ol>
<li>EC2 검색</li>
</ol>
<p>  <img src="/image/Cloud-Computing-AWS-EC2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7_2021-07-22_%EC%98%A4%ED%9B%84_3.34.22.png"></p>
<ol start="2">
<li>인스턴스 시작</li>
</ol>
<p>  <img src="/image/Cloud-Computing-AWS-EC2/Untitled1.png"></p>
<ul>
<li><p>설치할 이미지 선택</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled2.png"></p>
</li>
<li><p>체험판 인스턴스 유형 선택</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled3.png"></p>
</li>
</ul>
<ul>
<li><p>스토리지 추가</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled4.png"></p>
<p>체험판은 최대 스토리지를 30GB까지 사용 가능하므로 30GB로 설정.</p>
</li>
<li><p>보안 그룹 설정</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled5.png"></p>
<pre><code>    SSH로 접속하기위해 프로토콜과 포트범위를 정한다.
</code></pre>
</li>
<li><p>인스턴스 시작 검토</p>
<p>  인스턴스에 대한 세부정보를 확인 할 수 있다.</p>
</li>
<li><p>키페어 생성</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled6.png"></p>
<p>최초접속시에는 새 키페어 생성을 해주며 다운받은 키페어는 유출에 유의하여 저장한다.</p>
</li>
</ul>
<ol>
<li><p>고정IP로 변경</p>
<p> 동적IP를 사용할 경우 요금이 부과 될 수 있다.</p>
</li>
</ol>
<ul>
<li><p>자신의 콘솔로 로그인하여 EC2 메뉴 접속 및 IP주소 할당</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled7.png"></p>
<p>대시보드의 Elastic IP(탄력적 IP)선택후 새 IP주소를 할당한다.</p>
</li>
<li><p>할당받은 IP주소와 자신의 인스턴스와 연결</p>
<p><img src="/image/Cloud-Computing-AWS-EC2/Untitled8.png"></p>
<p>인스턴스를 입력하고 연결한다.</p>
</li>
</ul>
<ol>
<li>대시보드의 인스턴스 메뉴를 통해 인스턴스를 확인 할 수 있다.</li>
</ol>
<p>  <img src="/image/Cloud-Computing-AWS-EC2/Untitled9.png"></p>
<ol>
<li>Terminal을 사용하여 AWS에 접속</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 400 &#123;pemfile&#125;.pem // 보안을위해 퍼미션을 제한.</span><br><span class="line">ssh -i &#123;pemfile&#125;.pem ubuntu@&#123;public IPv4 Address&#125;</span><br></pre></td></tr></table></figure>

<p>  <img src="/image/Cloud-Computing-AWS-EC2/Untitled10.png"></p>
<p>접속이 된것을 확인 할 수 있다.</p>
]]></content>
      <categories>
        <category>Cloud Computing</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 기초</title>
    <url>/2021/07/21/HTML_Basic/</url>
    <content><![CDATA[<h1 id="HTML-기초"><a href="#HTML-기초" class="headerlink" title="HTML 기초"></a>HTML 기초</h1><h2 id="HTML의-기본형태"><a href="#HTML의-기본형태" class="headerlink" title="HTML의 기본형태"></a>HTML의 기본형태</h2><p>HTML의 TAG</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TAG</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">TAG</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>이러한 형태를 요소(Element)라고하는데 TAG와 크게 구분짓지 않는다. 앞쪽의 태그는 open 또는 start 뒤쪽의태그는 close 또는 end라고 한다.</li>
</ul>
<p>TAG는 각 의미를 가진다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> Element <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>태그에는 속성(Attribute)과 값(Value) 을 추가 할 수 있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TAG</span> 속성=<span class="string">&quot;값&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">TAG</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 예시 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image_directory.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;alternate text&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>위의 img태그의 경우 닫히는 태그가 없는데 이것을 빈 태그 (Empty Tag)라고 한다.</p>
<h3 id="빈태그"><a href="#빈태그" class="headerlink" title="빈태그"></a>빈태그</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /가 없는 빈 태그 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TAG</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- /가 있는 빈태그 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TAG</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TAG</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>/는 붙이거나 안붙이거나 큰 차이는 없지만 혼용하지만 않으면 된다.</p>
<p>빈태그의 경우 “속성”과 “값”을 가지는 경우가 많다.</p>
<h3 id="부모와-자식-요소"><a href="#부모와-자식-요소" class="headerlink" title="부모와 자식 요소"></a>부모와 자식 요소</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;부모&gt;</span><br><span class="line">	&lt;자식&gt;&lt;/자식&gt;</span><br><span class="line">&lt;/부모&gt;</span><br></pre></td></tr></table></figure>

<p>하나의 태그가 다른태그의 콘텐츠로 사용되면 부모 자식 관계를 가진다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;animal&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>동물 목록<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>사자<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>호랑이<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>개<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>다음 HTML에서 섹션의 자식은 h1과 ul이며 동물목록의 부모는 section이 된다.</p>
<h1 id="HTML-문서의-범위"><a href="#HTML-문서의-범위" class="headerlink" title="HTML 문서의 범위"></a>HTML 문서의 범위</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;이름&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;사이트 설명&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>사이트의 이름<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/main.css&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scripte</span> <span class="attr">src</span>=<span class="string">&quot;./js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>html태그는 해당 문서의 시작과 끝을 가리킨다.</p>
<h3 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h3><p>DOCTYPE(DTD, Document Type Definition)은 HTML문서를 어떤 버전의 해석방식을 구조화하면 되는지 알려준다. 위의 경우 HTML 5이다.</p>
<h2 id="head-tag"><a href="#head-tag" class="headerlink" title="head tag"></a>head tag</h2><p>  head태그에는 문서에대한 정보를 가진다.</p>
<h3 id="Meta"><a href="#Meta" class="headerlink" title="Meta"></a>Meta</h3><p>해당 HTML문서의 인코딩 방식, 제작자, 내용, 키워드등을 검색엔진이나 브라우저에 제공하는 빈 태그이다.</p>
<p><a href="https://www.notion.so/8349936cddce4a7a96fef529f1b9e199">meta</a></p>
<h3 id="LINK-CSS-불러오기"><a href="#LINK-CSS-불러오기" class="headerlink" title="LINK(CSS 불러오기)"></a>LINK(CSS 불러오기)</h3><p>html, css , favicon(아이콘), Java Script 등 외부 문서를 연결할 때 사용하는 빈태그 이다.</p>
<p><a href="https://www.notion.so/39e41ea57beb411e8dd5cc814449bd1b">link</a></p>
<h3 id="STYLE-CSS-작성"><a href="#STYLE-CSS-작성" class="headerlink" title="STYLE(CSS 작성)"></a>STYLE(CSS 작성)</h3><p>외부에서 CSS를 가져오지 않고 내부 문서내에서 스타일을 작성 할 수있다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SCRIPTE-Java-Script-불러오거나-작성"><a href="#SCRIPTE-Java-Script-불러오거나-작성" class="headerlink" title="SCRIPTE(Java Script 불러오거나 작성)"></a>SCRIPTE(Java Script 불러오거나 작성)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 외부에서 불러오기 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scripte</span> <span class="attr">src</span>=<span class="string">&quot;./js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 문서 내부에서 직접 작성하기 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">	function foo(event) &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		<span class="comment">&lt;!-- TODO --&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">	&#125; </span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="body-tag"><a href="#body-tag" class="headerlink" title="body tag"></a>body tag</h2><p>HTML 문서의 구조를 나타내는 태그들을 담고있다.</p>
<h3 id="DIV"><a href="#DIV" class="headerlink" title="DIV"></a>DIV</h3><p>division의 약자로 분할을 뜻한다 문서의 부분이나 섹션을 정의하나 명확한 의미를 가지지 않기때문에 특정범위를 묶는 용도로 사용한다.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IMG"><a href="#IMG" class="headerlink" title="IMG"></a>IMG</h3><p><img>는 html에 이미지를 삽입할때 사용하는 태그이다. </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;alternative text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>위에서 살펴봤듯이 img태그는 빈태그이기때문에 이미지를 삽입한다는 의미를 가지기때문에 실질적인 명시가 없기 때문에 <strong>이미지의 경로와 댁체텍스트</strong>를 <strong>반드시</strong>(웹표준) 설정해주어야 한다.</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>TIL</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux - Shell basic</title>
    <url>/2021/07/22/Linux%20-%20Shell%20Basic/</url>
    <content><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="Shell은-사용자와-하드웨어-또는-OS간의-인터페이스이다"><a href="#Shell은-사용자와-하드웨어-또는-OS간의-인터페이스이다" class="headerlink" title="Shell은 사용자와 하드웨어 또는 OS간의 인터페이스이다."></a>Shell은 사용자와 하드웨어 또는 OS간의 인터페이스이다.</h2><p>![](/image/Linux Shell Basic/R800x0.jpeg)</p>
<ul>
<li>명령어를 해석하여 커널에 명령어를 요청하여 프로그램을 실행</li>
</ul>
<h2 id="Shell-명령어"><a href="#Shell-명령어" class="headerlink" title="Shell 명령어"></a>Shell 명령어</h2><h3 id="다중사용자에-관한-명령어"><a href="#다중사용자에-관한-명령어" class="headerlink" title="다중사용자에 관한 명령어"></a>다중사용자에 관한 명령어</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ whoami <span class="comment">#로그인되어있는 사용자 ID를 출력</span></span><br><span class="line">ubuntu</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ passwd <span class="comment">#현재 사용자의 비밀번호 변경</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#두 명령어엔 기본 설정에 대한 차이가 존재한다.</span></span><br><span class="line">$ useradd <span class="comment">#사용자 기본 설정을 해야한다.</span></span><br><span class="line">$ adduser <span class="comment">#기본설정을 자동으로 수행</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#su: 사용자 변경</span></span><br><span class="line">su root <span class="comment"># 현재 사용자의 환경설정 기반으로 root로 변경</span></span><br><span class="line">su - root <span class="comment">#변경되는 사용자의 환경설정을 기반으로 root로 전환</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#사용자의 홈 디렉토리에 있는 .bashrc 와 .profile에는 환경설정이 존재한다.</span></span><br></pre></td></tr></table></figure>

<h2 id="권한에-관한-명령어"><a href="#권한에-관한-명령어" class="headerlink" title="권한에 관한 명령어"></a>권한에 관한 명령어</h2><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>root 계정에 로그인 하지 않은 상태에서 root권한으로 명령어를 실행</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim sudoers </span><br></pre></td></tr></table></figure>

<p>User privilege specification 밑에 자신의 계정과 권한을 입력한다.</p>
<p><img src="/image/Linux%20Shell%20Basic/Untitled.png"><br><img src="/image/Linux%20Shell%20Basic/Untitled%201.png"><br>권한거부없이 sudoers를 수정 할 수 있다</p>
<p>sudo를 매번 입력하는 것이 번거로워 root계정으로 로그인하여 작업을 할 수도 있지만<br>그럴 경우 시스템상에 큰 영향을 끼칠수 있는 명령을 했을때 경고없이 실행되므로 되돌릴 수 없는 명령을 할 수도 있다.<br>ex) rm -rf * #디렉토리와 파일과 하위 디렉토리까지 모두 삭제</p>
<h2 id="파일-권한"><a href="#파일-권한" class="headerlink" title="파일 권한"></a>파일 권한</h2><p>ls -al 명령어를 통해 파일 목록과 파일에대한 소유자,소유자그룹  기타사용자를 포함한 권한 정보를 살펴 볼 수 있다.</p>
<p><img src="/image/Linux%20Shell%20Basic/Untitled%202.png"></p>
<ul>
<li><p>권한에 대한 설명</p>
<p>  1 | 3 | 3 | 3 글자씩 의미를 가지는데 </p>
<p>  첫번째 영역은 파일인지 디렉토리인지를 나타내고</p>
<p>  나머지 세 영역은 소유자, 그룹, 기타사용자에관한 권한을 나타낸다.</p>
<p>  r w x는 각각 읽기 , 쓰기 , 실행을 의미한다.</p>
</li>
</ul>
<h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><ul>
<li><p>파일 권한 변경 명령어로 두가지 방식으로 사용할 수있다.</p>
</li>
<li><p>명령어 기호</p>
<p>  <a href="https://www.notion.so/a32632cdbdf64bc1a70133ab8a0c9765">Untitled</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod g+rx file.a <span class="comment"># file.a라는 파일에대해서 그룹사용자에게 읽기와 실행권한을 추가</span></span><br><span class="line">$ chmod ug+rw file.a <span class="comment"># file.a라는 파일에 유저와 그룹에 읽기와 쓰기 권한을 준다.</span></span><br><span class="line">$ chmod u=rwx, o=rx test.c</span><br></pre></td></tr></table></figure>

<ul>
<li><p>숫자를 사용</p>
<p>  r=2^2 w=2^1 x=2^0</p>
<p>  3비트 이진법을 사용하여 소유자/그룹/기타의 권한을 각각 읽기 쓰기 실행권한을 설정할 수 있다.</p>
<p>  ex)chmod 777 file : 소유자 그룹 다른사용자에게 읽기 쓰기 실행권한 부여 </p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod 400 isudev.pem <span class="comment"># 소유자에게만 읽기권한만 설정</span></span><br><span class="line">$ chmod -R 777 directory <span class="comment"># 하위디렉토리를 포함하여 권한 부여</span></span><br></pre></td></tr></table></figure>

<h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><ul>
<li>소유자 변경 명령어</li>
<li>chown [옵션] [소유자:소유그룹] [파일]</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chown root:root file</span><br><span class="line">$ chown root: file</span><br><span class="line">$ chown :root file</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="파일에-관한-명령어"><a href="#파일에-관한-명령어" class="headerlink" title="파일에 관한 명령어"></a>파일에 관한 명령어</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span> <span class="comment"># print working directory의 약어, 현재 작업중인 디렉토리를 출력</span></span><br><span class="line">/<span class="built_in">pwd</span>/devisu</span><br><span class="line">$ <span class="built_in">cd</span> <span class="comment">#change directory 디렉토리 이동</span></span><br><span class="line">$ ls <span class="comment"># list directory contents의 약어 </span></span><br><span class="line">		 <span class="comment"># -al옵션을 추가해서 숨김파일을 볼 수 있다.</span></span><br><span class="line">/etc$ ls host*  <span class="comment"># *나 ?같은 와일드카드를 이용하여 쉽게 list할 수 있다.</span></span><br><span class="line">host.conf  hostname  hosts  hosts.allow  hosts.deny</span><br></pre></td></tr></table></figure>

<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul>
<li>파일의 내용을 출력한다</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat test.c</span><br></pre></td></tr></table></figure>

<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><ul>
<li>파일의 첫 10줄을 출력한다</li>
</ul>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><ul>
<li>head의 반대로 끝 10줄을 출력</li>
</ul>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><ul>
<li>한 화면에 출력하고 넘겨가며 표기</li>
</ul>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul>
<li>파일을 삭제하는 명령어</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm test.c <span class="comment"># 파일 삭제</span></span><br><span class="line">$ rm -rf directory <span class="comment"># 디렉토리를 삭제하고 -r:하위 디렉토리도 모두 삭제  -f: 묻지않고 강제 삭제</span></span><br></pre></td></tr></table></figure>

<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ul>
<li>검색명령어</li>
<li>grep [-옵션] [패턴] [파일]</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep banana ./fruits.txt</span><br></pre></td></tr></table></figure>

<p>현재 디렉토리에있는 fruits.txt에 있는 banana가 써있는 Line만 출력</p>
<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 사용법 1</title>
    <url>/2021/07/22/Linux%20-%20Shell%20%EC%82%AC%EC%9A%A9%EB%B2%95%20/</url>
    <content><![CDATA[<h1 id="Shell-사용법"><a href="#Shell-사용법" class="headerlink" title="Shell 사용법"></a>Shell 사용법</h1><h2 id="Standard-Stream-표준-입출력"><a href="#Standard-Stream-표준-입출력" class="headerlink" title="Standard Stream (표준 입출력)"></a>Standard Stream (표준 입출력)</h2><ul>
<li>리눅스환경에서는  command로 실행되는 프로세스는 세가지 스트림을 가진다<ul>
<li>표준 입력 스트림 - stdin</li>
<li>표준 출력 스트림 - stdout</li>
<li>표준 오류 스트림 - stderr</li>
</ul>
</li>
</ul>
<p><img src="/image/Linux-Shell%20%EC%82%AC%EC%9A%A9%EB%B2%95/Untitled.png"></p>
<p>ex) ls -al 은 stdin에 해당하고 stdout은 그에따른 결과에 해당한다고 할 수 있다.</p>
<hr>
<h2 id="Redirection-리디렉션"><a href="#Redirection-리디렉션" class="headerlink" title="Redirection (리디렉션)"></a>Redirection (리디렉션)</h2><ul>
<li><p>표준 스트림을 바꿔 줄 수 있다.</p>
<p>   [ &lt; , &gt; , &lt;&lt; , &gt;&gt; ]를 사용한다.</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls &gt; file.txt <span class="comment"># 출력내용을 터미널의 console에 출력이 아닌 file.txt에 저장시킴</span></span><br><span class="line"></span><br><span class="line">head &lt; file.txt <span class="comment"># file.txt내용의 10줄이 입력으로 사용 된다.ead &lt; files.txt &gt; files2.txt</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ head &lt;.bashrc &gt; test.txt </span><br></pre></td></tr></table></figure>

<ul>
<li>이 명령어는 다음과 같이 작동한다.<ol>
<li>head &lt; .bashrc</li>
<li>1의 결과 &gt; test.txt에 저장</li>
</ol>
<ul>
<li>출력화면</li>
</ul>
</li>
</ul>
<p><img src="/image/Linux-Shell%20%EC%82%AC%EC%9A%A9%EB%B2%95/Untitled%201.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -al &gt;&gt; test1.txt <span class="comment"># 기존의 내용을 삭제하지않고 추가한다.</span></span><br></pre></td></tr></table></figure>

<h2 id="Pipe-파이프"><a href="#Pipe-파이프" class="headerlink" title="Pipe (파이프)"></a>Pipe (파이프)</h2><ul>
<li><p>여러개의 프로세스 사이에서 앞의 프로세스의 출력을 그 뒤의 프로세스의 입력으로 사용 하는 것.</p>
<p>  [ | ] 를 사용한다.</p>
</li>
</ul>
<p><img src="/image/Linux-Shell%20%EC%82%AC%EC%9A%A9%EB%B2%95/%ED%8C%8C%EC%9D%B4%ED%94%84.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat .bashrc | grep <span class="keyword">case</span></span><br><span class="line"><span class="keyword">case</span> $- <span class="keyword">in</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">	<span class="comment"># a case would tend to support setf rather than setaf.)</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure>

<ol>
<li>cat 명령을 통한 출력내용이 grep 명령의 입력 스트림으로 들어간다.</li>
<li>grep case 는 grep 명령의 입력스을 검색해서 cat의 출력내용에 case가 있는 라인만 출력한다</li>
</ol>
]]></content>
      <categories>
        <category>Shell</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux의 파일 시스템</title>
    <url>/2021/07/23/Linux-FileSystem/</url>
    <content><![CDATA[<h1 id="Linux-파일-시스템"><a href="#Linux-파일-시스템" class="headerlink" title="Linux 파일 시스템"></a>Linux 파일 시스템</h1><p>리눅스는 모든 것은 파일이라는 철학에따라 모든 인터랙션은 파일을 읽고 쓰는 것처럼 이루어져있다.<br>따라서 모든 자원에 대한 추상화 인터페이스로 파일 인터페이스를 활용한다.</p>
<p>네트워크,마우스,키보드, 저장매체들과 운영체제간에 IO로 이루어져있어<br>가장 간단한 인터페이스인 File Interface를 추상화하여 다룬다.</p>
<p>##File namespace</p>
<ul>
<li>Linux는 전역 네임스페이스를 사용한다</li>
<li>/directory1/sub/image.jpg</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat tty <span class="comment"># 가상파일 시스템 인터페이스 - 가상터미널환경 - input(키보드)</span></span><br></pre></td></tr></table></figure>

<h2 id="슈퍼블록-inode"><a href="#슈퍼블록-inode" class="headerlink" title="슈퍼블록 , inode"></a>슈퍼블록 , inode</h2><h3 id="슈퍼블록"><a href="#슈퍼블록" class="headerlink" title="슈퍼블록"></a>슈퍼블록</h3><ul>
<li>파일 시스템에 관한 정보(전체사이즈, 어떤 FS Algorithms을 썻는지 등)</li>
</ul>
<h3 id="파일"><a href="#파일" class="headerlink" title="파일"></a>파일</h3><ul>
<li>프로세스는 pid와 매핑되어있는 것 처럼 각각의 파일은 inode와 매핑이 되어있다.</li>
<li>파일시스템에서는 inode를 기반으로 파일을 엑세스함</li>
<li>프로세스의 정보를 저장해놓은 PCB처럼 inode의 정보를 기반으로 요약해놓은 정보를 메타데이터라고 함</li>
</ul>
<p><img src="/image/Linux-FileSystem/52dcd856.png"></p>
<p><em>inode 기반 메타 데이터</em></p>
<ol>
<li>Mode 소유자</li>
<li>Owner info 소유자 정보</li>
<li>Size 파일의 사이즈</li>
<li>Timestamps 생성시간</li>
<li>Direct Blocks 파일을 블록이라는 작은단위로 나눈 것을 엑세스 할 수 있는 첫번쨰 주소를 저장해놓음</li>
<li>indirect blocks , double indirect , triple indirect 간접적으로 블록에 접근할 수 있는 주소</li>
</ol>
<h2 id="File-inode"><a href="#File-inode" class="headerlink" title="File inode"></a>File inode</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/ubuntu/link.txt <span class="comment"># &#x27;/&#x27; 가 덴트리이다.</span></span><br></pre></td></tr></table></figure>
<p>dentry(directory entry)</p>
<ul>
<li>각 덴트리는 해당 디렉토리 파일과 정보를 가지고 있다</li>
<li>탐색할때 각 덴트리에서 inode를 찾아 계층적으로 탐색한다</li>
</ul>
<h2 id="Hard-Link-VS-Soft-Link"><a href="#Hard-Link-VS-Soft-Link" class="headerlink" title="Hard Link VS Soft Link"></a>Hard Link VS Soft Link</h2><ul>
<li>다른 디렉토리에서 접근 할 수 있게끔 파일에 연결하는 것을 link라고하는데<br>방법에따라 Hard Link와 Soft Link로 나뉜다.</li>
</ul>
<p><img src="/image/Linux-FileSystem/hardsoftlink.png"></p>
<h3 id="Hard-link"><a href="#Hard-link" class="headerlink" title="Hard link"></a>Hard link</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ln [Original File] [Link File]</span><br></pre></td></tr></table></figure>
<p>Hard link를 하게되면 파일이 생기는데 그때의 inode의 번호는 Original File을 따라간다. </p>
<p><img src="/image/Linux-FileSystem/hardlink.png"></p>
<p>Original File을 삭제해도 inode구조는 삭제되지 않기때문에<br>Hard Link한 파일은 여전히 접근 가능하다.<br>w</p>
<h3 id="Soft-Link-Symbolic-Link"><a href="#Soft-Link-Symbolic-Link" class="headerlink" title="Soft Link (Symbolic Link)"></a>Soft Link (Symbolic Link)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s [File1] [File2]</span><br></pre></td></tr></table></figure>
<p><img src="/image/Linux-FileSystem/softlink_.png"></p>
<ul>
<li>Windows OS의 바로가기와 기능상 동일하다.</li>
<li>Soft link의 inode구조체에는 원본파일의 주소가 있어 리디렉션을해 원본파일이 삭제되면 접근할 수 없게된다.<h3 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h3></li>
</ul>
<p>copy의경우 파일의 내용 전체를 복사하기때문에 그만큼 용량도 두배로 늘어나게 된다.</p>
<hr>
<h2 id="특수파일"><a href="#특수파일" class="headerlink" title="특수파일"></a>특수파일</h2><h3 id="디바이스"><a href="#디바이스" class="headerlink" title="디바이스"></a>디바이스</h3><ul>
<li>블록디바이스 <ul>
<li>HDD같이 블록이나 섹터 등 정해진 단위로 데이터 전송</li>
</ul>
</li>
<li>캐릭터 디바이스<ul>
<li>키보드 마우스등 byte 단위 데이터 전송 </li>
</ul>
</li>
</ul>
<hr>
<p>출처: 본 내용은 패스트 캠퍼스 수업내용을 기반으로 작성되었음을 알립니다.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 사용법 2</title>
    <url>/2021/07/23/Linux-How_to_use_shell/</url>
    <content><![CDATA[<p>#Shell 사용법</p>
<h2 id="Process-VS-Binary"><a href="#Process-VS-Binary" class="headerlink" title="Process VS Binary"></a>Process VS Binary</h2><ul>
<li>바이너리는 실행할 수 있는 파일</li>
<li>프로세스는 실행시킨 바이너리 프로그램의 정보를 갖고있다.<ul>
<li>메모리와 관련된 상태정보 (PCB)</li>
<li>시스템 리소스</li>
<li>스케쥴링 단위</li>
</ul>
</li>
</ul>
<h2 id="foreground-process-amp-background-process"><a href="#foreground-process-amp-background-process" class="headerlink" title="foreground process &amp; background process"></a>foreground process &amp; background process</h2><h3 id="foreground-process"><a href="#foreground-process" class="headerlink" title="foreground process"></a>foreground process</h3><ul>
<li>사용자가 직접적으로 실행한 후 작업을 완전히 수행할떄까지 기다려야하는 작업이나 명령이다.</li>
<li>화면에 표시되어 유저와 상호작용을 하게 되는 프로세스</li>
</ul>
<h3 id="background-process"><a href="#background-process" class="headerlink" title="background process"></a>background process</h3><ul>
<li>쉘은 더 많은 프로세스를 실행하기전 background process가 끝날때 까지 기다릴 필요 없다.</li>
<li>가용가능한 메모리 안에서 백그라운드 작업은 이루어진다.</li>
<li>서버 데몬, 백신 프로그램, etc..</li>
</ul>
<p><span style="color:gray">데몬 프로세스는 사용자 모르게 시스템 관리를 위해 실행되는 프로세스로 시스템이 부팅될떄 자동 실행된다</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -name <span class="string">&#x27;*.py&#x27;</span> &gt; list.txt &amp;</span><br><span class="line">[job number] process ID <span class="comment">## result</span></span><br></pre></td></tr></table></figure>
<p><span style="color:gray">프로세스 실행시 &amp;를 붙여준다.</span></p>
<h3 id="process-제어"><a href="#process-제어" class="headerlink" title="process 제어"></a>process 제어</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">^Z <span class="comment">## 실행중인 포어그라운드  프로세스 중단 not kill</span></span><br><span class="line">^C <span class="comment">## 포어그라운드 프로세스 종료</span></span><br><span class="line"><span class="built_in">jobs</span> <span class="comment">## 실행중인 백그라운드 프로세스와 상태정보 출력</span></span><br><span class="line">ps <span class="comment">## 실행중인 프로세스 출력 </span></span><br><span class="line"><span class="built_in">kill</span> -9 [PID] <span class="comment">## PID해당하는 프로세스 죽이기</span></span><br></pre></td></tr></table></figure>

<p><img src="/image/Linux-How_to_use_shell2/command_ps_result.png"></p>
<hr>
<p>출처: 본 내용은 패스트 캠퍼스 수업내용을 기반으로 작성되었음을 알립니다.</p>
<p><a href="https://www.lifewire.com/multitasking-background-foreground-process-2180219">lifewire: foreground&amp;background</a> </p>
]]></content>
      <categories>
        <category>Shell</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>ShellScript-Basic(2)</title>
    <url>/2021/08/05/ShellScript-Basic-2/</url>
    <content><![CDATA[<h2 id="현업에서-사용되는-예제들"><a href="#현업에서-사용되는-예제들" class="headerlink" title="현업에서 사용되는 예제들"></a>현업에서 사용되는 예제들</h2><h3 id="backup-sh"><a href="#backup-sh" class="headerlink" title="backup.sh"></a>backup.sh</h3><ul>
<li>디렉토리내의 하부디렉토리 또는 파일들을 주기적으로 백업하는 쉘 스크립트<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ] || [ -z <span class="variable">$2</span>]; <span class="keyword">then</span> <span class="comment"># 인자 2개를 받아서 하나라도 NULL이면 참이면</span></span><br><span class="line">  ehco usage: <span class="variable">$0</span> sourcedir targetdir <span class="comment"># 쉘 이름과 사용법을 출력</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SRCDIR=<span class="variable">$1</span></span><br><span class="line">  DSTDIR=<span class="variable">$2</span></span><br><span class="line">  BACKUPFILE=backup.$(date +%y%m%d%H%M%S).tar.gz <span class="comment"># date 쉘명령어를 사용하여 날짜와 시간을 기록하여 백업파일을 생성</span></span><br><span class="line">  <span class="keyword">if</span> [ -d <span class="variable">$DSTDIR</span> ]; <span class="keyword">then</span> <span class="comment"># DSTDIR가 디렉토리이면 </span></span><br><span class="line">    tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span> <span class="comment"># 압축</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    mkdir <span class="variable">$DSTDIR</span> <span class="comment"># 디렉토리가 없으면 생성하고 압축</span></span><br><span class="line">    tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span> </span><br><span class="line">  <span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="tar-명령어"><a href="#tar-명령어" class="headerlink" title="tar 명령어"></a>tar 명령어</h4><ul>
<li>기존의 tar는 하나의 파일로 묶기만 가능했는데gzip이라는 압축명령이 많이 쓰이게되면서 tar라는 명령에 묶기가 아닌 압축도 할 수있 게끔 옵션을 제공하여gzip을 활용해서 묶고 압축 할 수 있다.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x  <span class="comment">#묶음 해제</span></span><br><span class="line">c  <span class="comment">#파일 묶음</span></span><br><span class="line">v  <span class="comment">#묶음 해제 과정 출력</span></span><br><span class="line">z  <span class="comment">#gunzip을 사용</span></span><br><span class="line">f  <span class="comment">#파일 이름을 지정</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cvzf [압축된 파일 이름] [압축할 파일이나 폴더명]</span><br><span class="line">tar -xvzf [압축 해제할 압축 아카이브 이름]</span><br></pre></td></tr></table></figure>

<h3 id="cleanlog-sh"><a href="#cleanlog-sh" class="headerlink" title="cleanlog.sh"></a>cleanlog.sh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> -f -name <span class="string">&#x27;filename&#x27;</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;shell1, shell2, shell3 &quot;</span> \;</span><br><span class="line"><span class="comment">#현재 디렉토리에서 일반 파일중에서 이름이 filename 검색</span></span><br><span class="line"><span class="comment"># 각각의 파일들 bash쉘로 해당명령어들로 실행시킴</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">LOGDIR=/var/<span class="built_in">log</span></span><br><span class="line">GZIPDAY = 1</span><br><span class="line">DELDAY = 2</span><br><span class="line"><span class="built_in">cd</span> %LOGDIR</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cd <span class="variable">$LOGDIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line">sudo find ./path -<span class="built_in">type</span> f -name <span class="string">&#x27;*log.?&#x27;</span> -mtime +<span class="variable">$GZIPDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;gzip &#123;&#125;&quot;</span> \; 2&gt;</span><br><span class="line"><span class="comment"># 현재 시간부터 2일이 경과된 파일을 찾아서 각각을 압축 </span></span><br><span class="line">sudo find ./path -<span class="built_in">type</span> f -name <span class="string">&#x27;*gz.?&#x27;</span> -mtime +<span class="variable">$DELSDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;rm -f &#123;&#125;&quot;</span> \; 2&gt;</span><br><span class="line"><span class="comment"># 압축한지 3일 이상 지난 파일을 찾아서 묻지않고 삭제  </span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ShellScript-Basic</title>
    <url>/2021/08/04/ShellScript-Basic/</url>
    <content><![CDATA[<h1 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script"></a>Shell Script</h1><h2 id="기본-문법"><a href="#기본-문법" class="headerlink" title="기본 문법"></a>기본 문법</h2><ul>
<li>쉘 스크립트는 파일로 작성 후 파일을 실행함</li>
<li>파일의 가장 위으 ㅣ첫 라인은 <code>#!/bin/bash</code>로 시작</li>
<li>쉘 스크립트 파일은 실행 권한을 갖고있어야함</li>
</ul>
<h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><p>hello.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hello Bash!&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 hello.sh</span><br><span class="line">$./hello.sh</span><br><span class="line"></span><br><span class="line">Hello bash!</span><br></pre></td></tr></table></figure>

<ul>
<li><code>echo</code>는 화면에 출력해주는 쉘 명령어</li>
</ul>
<h3 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mysql_id=<span class="string">&#x27;root&#x27;</span> </span><br><span class="line">mysql_directory=<span class="string">&#x27;/etc/mysql&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$mysql_id</span> <span class="comment"># $변수명으로 사용가능 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$mysql_directory</span> </span><br></pre></td></tr></table></figure>

<h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemons=(<span class="string">&quot;httpd&quot;</span> <span class="string">&quot;mysql&quot;</span> <span class="string">&quot;vsftpd&quot;</span>) <span class="comment"># , 가아닌 띄어쓰기로 구분</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;daemons[1]&#125;</span> <span class="comment"># $&#123;배열명[index]&#125; 형식으로 사용</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;daemons[a]&#125;</span> <span class="comment"># 배열의 모든 데이터 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;daemons[*]&#125;</span> <span class="comment"># 배열의 모든 데이터 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#daemons[@]&#125;</span> <span class="comment"># 배열의 크기 출력 : 3</span></span><br><span class="line"></span><br><span class="line">filelist = ( $(ls) ) <span class="comment"># 괄호안에있는 명령어의 결과값을 배열에 넣는다</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;filelist[*]&#125;</span> <span class="comment"># filelist의 모든 값 출력</span></span><br></pre></td></tr></table></figure>

<p>arraytest.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my_info = &#123;<span class="string">&quot;isu&quot;</span> <span class="string">&quot;28&quot;</span> <span class="string">&quot;BE&quot;</span>&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;my_info[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;my_info[*]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#my_info[@]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="사전에-정의된-지역-변수"><a href="#사전에-정의된-지역-변수" class="headerlink" title="사전에 정의된 지역 변수"></a>사전에 정의된 지역 변수</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$$ <span class="comment"># 쉘의 프로세스 번호 (pid)</span></span><br><span class="line"><span class="variable">$0</span> <span class="comment"># 쉘스크립트 이름 ex) ls </span></span><br><span class="line"><span class="variable">$1</span> ~ <span class="variable">$9</span> <span class="comment"># 명령줄 인수 </span></span><br><span class="line">$* <span class="comment"># 모든 명령줄 인수리스트 ex) -al -z</span></span><br><span class="line"><span class="variable">$#</span> <span class="comment"># 인수의 갯수 ex) 2개 (la -al -z)</span></span><br><span class="line">$? <span class="comment"># 최근 실행한 명령어의 종료 값 0은 성공 나머지는 실패 </span></span><br></pre></td></tr></table></figure>

<h3 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h3><ul>
<li>expr: 숫자 연산</li>
<li>expr을 사용하는 경우 backquote를 사용해야함</li>
<li>연산자 *와 () 앞에는 \를 사용해야함</li>
<li>숫자,변수,기호 사이에는 space가 있어야 구분됨</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num = `expr \(3 \* 5\) / + 4 + 7 `</span><br><span class="line"><span class="comment"># (3*5)/4+7</span></span><br></pre></td></tr></table></figure>

<h3 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h3><ul>
<li><p>if로 시작해서 fi로 끝남</p>
</li>
<li><p>indent는 필요없지만 가독성을 위해 써야함 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ state ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="comment">#TODO</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  <span class="comment">#TODO</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
<li><p>한줄로 작성하기 위해선 ; 으로 구분함</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 조건 ]; <span class="keyword">then</span> TODO; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>예시</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> != <span class="variable">$2</span> ] <span class="comment"># 인자를 2개를 받아 비교</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  ehco <span class="string">&quot;different value&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -z <span class="variable">$2</span> ] </span><br><span class="line">-z <span class="comment"># 문자가 null이면 참</span></span><br><span class="line">-n <span class="comment"># 문자가 not null 이면 참 </span></span><br><span class="line">-eq <span class="comment"># equal == </span></span><br><span class="line">-ne <span class="comment"># not equal !=</span></span><br><span class="line">-lt <span class="comment"># less than &lt;</span></span><br><span class="line">-le <span class="comment"># less equal &lt;=</span></span><br><span class="line">-gt <span class="comment"># greater than &gt;</span></span><br><span class="line">-ge <span class="comment"># greater equal &gt;=</span></span><br></pre></td></tr></table></figure>

<h4 id="파일검사-조건"><a href="#파일검사-조건" class="headerlink" title="파일검사 조건"></a>파일검사 조건</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-e <span class="comment"># 파일이 존재하면 참</span></span><br><span class="line">-d <span class="comment"># 파일이 디렉토리이면 참</span></span><br><span class="line">-h <span class="comment"># 심볼릭 링크파일이면 침</span></span><br><span class="line">-f <span class="comment"># 파일이 일반파일이면 참 (directory X)</span></span><br><span class="line">-s <span class="comment"># 파일 크기가 0이 아니면 참</span></span><br><span class="line">-u <span class="comment"># 파일이 set-user-id 설정되면 참</span></span><br><span class="line">-r <span class="comment"># 파일이 읽기 가능 상태이면 참</span></span><br><span class="line">-w <span class="comment"># 파일이 쓰기 가능 상태이면 참</span></span><br><span class="line">-x <span class="comment"># 파일이 실행 가능 상태이면 참</span></span><br></pre></td></tr></table></figure>

<h4 id="명령어-해석"><a href="#명령어-해석" class="headerlink" title="명령어 해석"></a>명령어 해석</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping -c 1 192.168.0.1 1&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Success Ping&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Failed Ping&quot;</span></span><br><span class="line"><span class="keyword">fi</span> </span><br></pre></td></tr></table></figure>
<ul>
<li>-c 1 : ping을 한번만 보냄</li>
<li>192.168.0.1 : 타겟 IP</li>
<li>1&gt;/dev/null : 표준출력을 /dev/null로 리디렉션 따라서 출력내용은 버려짐</li>
<li>$? ==0 : 가장 최근 인자를 가져옴 </li>
</ul>
<h3 id="For-반복문"><a href="#For-반복문" class="headerlink" title="For 반복문"></a>For 반복문</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 <span class="keyword">in</span> 변수값1 변수값2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  TODO</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> database <span class="keyword">in</span> $(ls)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$database</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="While-반복문"><a href="#While-반복문" class="headerlink" title="While 반복문"></a>While 반복문</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> [ 조건문 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  TODO</span><br><span class="line"><span class="keyword">while</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">list=$(ls) <span class="comment"># list변수에 ls명령의 결과를 저장</span></span><br><span class="line">num=<span class="variable">$&#123;#lists[@]&#125;</span> <span class="comment"># 리스트의 갯수를 저장</span></span><br><span class="line">index = 0;</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$num</span> -ge 0 ] <span class="comment"># num &gt;= 0</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  ehco <span class="variable">$&#123;list[$index]&#125;</span></span><br><span class="line">  index=`expr <span class="variable">$index</span> + 1`</span><br><span class="line">  num=`expr <span class="variable">$num</span> -1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>System Programming - ABI</title>
    <url>/2021/07/28/System-Programming-ABI/</url>
    <content><![CDATA[<h1 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h1><h2 id="ABI란"><a href="#ABI란" class="headerlink" title="ABI란?"></a>ABI란?</h2><ul>
<li>Application Binary Interface</li>
<li>함수 실행 방식, 레지스터 활용, 시스템콜 실행등 정의해놓은 인터페이스</li>
<li>응용 프로그램과 라이브러리사이의 연결과 통신에 대한 정의 </li>
<li>함수의 파라미터들을 어떤 레지스터에 넣을지 정의</li>
<li>컴파일 , 링커 ,툴체인에서 제공 한다.</li>
</ul>
]]></content>
      <categories>
        <category>System Programming</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>ABI</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>System-Programming-IPC(2)</title>
    <url>/2021/08/04/System-Programming-IPC-2/</url>
    <content><![CDATA[<p>커널 영역에 메시지큐나 공유메모리가 생성이되면 명시적으로 컨트롤 해주는 것이 필요하다</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">msgctl(msgid, PIC_RMID,<span class="number">0</span>); <span class="comment">//삭제예시, 메시지 아이디와 컨트롤에대한 인자를 받는다. </span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ipcs <span class="comment">#명령어를 통해 확인 할 수 있다.</span></span><br></pre></td></tr></table></figure>

<h2 id="공유메모리-Shared-Memory"><a href="#공유메모리-Shared-Memory" class="headerlink" title="공유메모리 (Shared Memory)"></a>공유메모리 (Shared Memory)</h2><ul>
<li>모든 프로세스는 커널영역을 공유한다는 점을 이용하여<br>커널에 공간을 확보하여 그 공간을 변수처럼 사용하는 방식이다</li>
<li>큐와 다르게 주소를 변수처럼 접근한다</li>
<li>공유 메모리 Key를 통하여 여러 프로세스가 접근이 가능하다</li>
</ul>
<h3 id="공유-메모리-생성"><a href="#공유-메모리-생성" class="headerlink" title="공유 메모리 생성"></a>공유 메모리 생성</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">key: 임의의 숫자 또는 ftok 함수로 생성한 키 값</span></span><br><span class="line"><span class="comment">size: 공유 메모리의 크기</span></span><br><span class="line"><span class="comment">shmflg: 공유 메모리의 속성</span></span><br><span class="line"><span class="comment">return value : 공유 메모리 식별자 리턴</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">size_t</span>, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line">shmid = shmget((<span class="keyword">key_t</span>)<span class="number">1234</span>,SIZE , IPC_CREAT|<span class="number">0666</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="공유-메모리-연결"><a href="#공유-메모리-연결" class="headerlink" title="공유 메모리 연결"></a>공유 메모리 연결</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shmid: shmget 함수로 생성한 공유 메모리 식별자</span></span><br><span class="line"><span class="comment">shmaddr : 공유 메모리 연결 주소 (char *) NULL로 설정하면 적절한 주소로 연결된다</span></span><br><span class="line"><span class="comment">shmflg: 공유 메모리의 권한 설정 (0이면 읽기쓰기, SHM_RDONLY면 읽기만)</span></span><br><span class="line"><span class="comment">return value: 연결이 성공하면 메모리의 시작 주소를 리턴</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">const</span> <span class="keyword">void</span> *shamddr, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line"></span><br><span class="line">shmaddr = (<span class="keyword">char</span> *)shmat(shmid, (<span class="keyword">char</span> *)<span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="공유-메모리-해제"><a href="#공유-메모리-해제" class="headerlink" title="공유 메모리 해제"></a>공유 메모리 해제</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">char</span> * shmaddr)</span></span>; <span class="comment">// 공유 메모리 연결 주소로 인자를 갖는다.</span></span><br></pre></td></tr></table></figure>

<h3 id="공유-메모리-읽기-쓰기"><a href="#공유-메모리-읽기-쓰기" class="headerlink" title="공유 메모리 읽기/쓰기"></a>공유 메모리 읽기/쓰기</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;%s&quot;</span> \n<span class="string">&quot;), (char *)shmaddr); </span></span><br><span class="line"><span class="string">strcpy((char*)shmaddr, &quot;</span>to write<span class="string">&quot;);</span></span><br></pre></td></tr></table></figure>

<h3 id="공유-메모리-컨트롤"><a href="#공유-메모리-컨트롤" class="headerlink" title="공유 메모리 컨트롤"></a>공유 메모리 컨트롤</h3><p>커널영역을 끊임없이 만들 수 없기때문에 메모리를 컨트롤해줘야한다</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shmid: shmget 함수로 생성한 공유 메모리 식별자</span></span><br><span class="line"><span class="comment">cmd: 수행할 컨트롤 (ex: IPC_RMID - shmid로 지정한 공유 메모리 제거)</span></span><br><span class="line"><span class="comment">buf: 제어 기능에 사용되는 공유 메모리 구조체의 구조</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">int</span> cmd, struct shmid_ds *buf)</span></span>;</span><br><span class="line"></span><br><span class="line">shmctl(shmid, IPC_RMID, (struct shmid_ds *)<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h2 id="활용-예시"><a href="#활용-예시" class="headerlink" title="활용 예시"></a>활용 예시</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> shmid, pid;</span><br><span class="line">    <span class="keyword">char</span> *shmaddr_parent, *shmaddr_child;</span><br><span class="line">    shmid = shmget((<span class="keyword">key_t</span>)<span class="number">1234</span>, <span class="number">10</span>, IPC_CREAT|<span class="number">0644</span>);</span><br><span class="line">    <span class="keyword">if</span>(shmid == <span class="number">-1</span>) &#123; <span class="comment">// ocurred error</span></span><br><span class="line">            perror(<span class="string">&quot;shmget err&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123; <span class="comment">// parent process</span></span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">            shmaddr_parent = (<span class="keyword">char</span> *)shmat(shmid, (<span class="keyword">char</span> *)<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, shmaddr_parent);</span><br><span class="line">            shmdt((<span class="keyword">char</span> *)shmaddr_parent);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            shmaddr_child = (<span class="keyword">char</span> *)shmat(shmid, (<span class="keyword">char</span> *)<span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">strcpy</span>((<span class="keyword">char</span> *)shmaddr_child, <span class="string">&quot;Hello Parent!&quot;</span>);</span><br><span class="line">            shmdt((<span class="keyword">char</span> *)shmaddr_child);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// shmctl(shmid, IPC_RMID, (struct shmid_ds *)NULL); ipcs로 확인하기위해 삭제하지 않았음.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/System-Programming-IPC-2_images/example.png"></p>
]]></content>
      <categories>
        <category>System Programming</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
        <tag>Shared Memory</tag>
      </tags>
  </entry>
  <entry>
    <title>System Programming - Process</title>
    <url>/2021/07/28/System-Programming-Process/</url>
    <content><![CDATA[<h1 id="Program-Process-Thread의-개념"><a href="#Program-Process-Thread의-개념" class="headerlink" title="Program , Process ,Thread의 개념"></a>Program , Process ,Thread의 개념</h1><h2 id="프로그램"><a href="#프로그램" class="headerlink" title="프로그램"></a>프로그램</h2><ul>
<li>특정한 일을 수행하기위한 명령어로 구성된 실행 가능한 파일</li>
<li>바이너리, 코드이미지 , Application …</li>
</ul>
<h2 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h2><ul>
<li>실행중인 프로그램 (메모리 적재+ 프로세스 상태 정보 포함)<br><img src="/image/System-Programming-Process_images/processMemeryStructure.png"></li>
</ul>
<h2 id="스레드"><a href="#스레드" class="headerlink" title="스레드"></a>스레드</h2><ul>
<li>가장 최소 단위의 실행가능한 프로세스<br><img src="/image/System-Programming-Process_images/processthread.png"></li>
</ul>
<h1 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h1><h2 id="Process-ID"><a href="#Process-ID" class="headerlink" title="Process ID"></a>Process ID</h2><ul>
<li>각 프로세스 해당 시점에 유니크한 pid를 가진다</li>
<li>pid는 Linux에서는 signed 16비트 정수값을 사용하여 최대 32678이다<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /proc/sys/kernel/pid_max <span class="comment"># 명령어를 통하여 확인 가능</span></span><br><span class="line">32768</span><br></pre></td></tr></table></figure>
<h2 id="Process-계층"><a href="#Process-계층" class="headerlink" title="Process 계층"></a>Process 계층</h2></li>
<li>최초 프로세스는 init 프로세스 (pid : 1)</li>
<li>init 프로세스는 운영체제가 생성한다.</li>
<li>다른 프로세스는 또 다른 프로세스로부터 생성되어 계층 구조를 가진다</li>
<li>ppid 값이 부모 프로세스의 pid를 뜻한다<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef <span class="comment"># -e 시스템상의 모든 프로세스 -f UID,PID PPID등 모든 정보 출력</span></span><br></pre></td></tr></table></figure>
<img src="/image/System-Programming-Process_images/psef_result.png"></li>
</ul>
<h2 id="Process와-Owner-관리"><a href="#Process와-Owner-관리" class="headerlink" title="Process와 Owner 관리"></a>Process와 Owner 관리</h2><p>리눅스에서 File은 inode 프로세스는 pid로 관리하듯이</p>
<p>프로세스의 소유자와 그룹또한 UID / GID로 관리된다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/passwd <span class="comment">#uid와 gid및 사용자에 관한 정보들이 출력된다.</span></span><br></pre></td></tr></table></figure>
<p><img src="/image/System-Programming-Process_images/passwd.png"> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/shadow <span class="comment">#암호화된 상태의 password가 적혀있음</span></span><br></pre></td></tr></table></figure>

<h2 id="Process관리-관련-시스템콜"><a href="#Process관리-관련-시스템콜" class="headerlink" title="Process관리 관련 시스템콜"></a>Process관리 관련 시스템콜</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid=%d\n&quot;</span>), getpid();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ppid=%d\n&quot;</span>), getppid();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/System-Programming-Process_images/pidinfo.png"></p>
<ul>
<li>실행할때마다 pid가 1씩 순차적으로 증가하는것을 확인 할 수 있다</li>
</ul>
<h2 id="Process-생성"><a href="#Process-생성" class="headerlink" title="Process 생성"></a>Process 생성</h2><ul>
<li>process 생성 과정 <ol>
<li>TEXT,DATA,BSS같은 정적인 공간을 먼저 확보</li>
<li>실행하면서 STACK과 HEAP의 공간을 생성한다</li>
</ol>
</li>
</ul>
<h1 id="fork-amp-exec"><a href="#fork-amp-exec" class="headerlink" title="fork() &amp; exec()"></a>fork() &amp; exec()</h1><h2 id="fork-시스템콜"><a href="#fork-시스템콜" class="headerlink" title="fork() 시스템콜"></a>fork() 시스템콜</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">// 부모 프로세스를 그대로 복사하기떄문에 인자가 없다. </span></span><br></pre></td></tr></table></figure>
<ul>
<li>새로운 프로세스 공간을 별도로 만들고 실행중이였던 부모 프로세스 모든 내용을 복사</li>
<li>자식 프로세스는 부모프로세스 공간을 모두 복사 후 fork() 시스템콜 이후 코드부터 실행된다.</li>
<li>자식 프로세스는 pid가 0으로 리턴되며 부모 프로세스는 실제 pid를 리턴</li>
<li>부모자식간의 플세스의  변수와 Program Count 값은 동일하다</li>
</ul>
<h2 id="execl-execp-execle"><a href="#execl-execp-execle" class="headerlink" title="execl() execp() execle()"></a>execl() execp() execle()</h2><ul>
<li><p>exec() 시스템콜을 호출한 프로세스의 공간의 TEXT,DATA,BSS영역을</p>
<p>새로운 프로세스의 이미지로 덮어 씌움</p>
</li>
<li><p>별도의 프로세스 공간을 만들지 않음 </p>
</li>
<li><p>부모 프로세스가 사라짐.</p>
</li>
</ul>
<p>execl.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;excute ls\n&quot;</span>);</span><br><span class="line">  execl(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;ls&quot;</span> , <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span>); <span class="comment">// 실행파일의 이름, argv[0], argv[1]... , NULL) </span></span><br><span class="line">  perror(<span class="string">&quot;execl is failed\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>execl이 실행되면 코드영역이 ls로 덮어 씌워지게 되고<br>밑의 코드는 실행되지 않는다.<br><img src="/image/System-Programming-Process_images/execl.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">execl(<span class="string">&quot;디렉토리와 파일 이름이 합친 전체이름&quot;</span>,<span class="string">&quot;명령어 리스트&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">execp(<span class="string">&quot;파일 이름&quot;</span>, <span class="string">&quot;명령어 인수 리스트&quot;</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
<p>execp의 execl과의 차이점은 파일 이름을 해당 프로세스를 실행한 프로세스 환경변수를 검색한다.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *evmp[] = &#123;<span class="string">&quot;USER=name&quot;</span>, <span class="string">&quot;PATH=/bin&quot;</span>, (<span class="keyword">char</span> *)<span class="number">0</span>&#125;;</span><br><span class="line">execle(<span class="string">&quot;ls, &quot;</span>ls<span class="string">&quot;, &quot;</span>-al<span class="string">&quot; NULL, envp);</span></span><br></pre></td></tr></table></figure>
<p>환경 변수를 지정하고자 할때는 execle을 사용한다.</p>
<h3 id="execv-execvp-execve-시스템콜"><a href="#execv-execvp-execve-시스템콜" class="headerlink" title="execv(),execvp(),execve() 시스템콜"></a>execv(),execvp(),execve() 시스템콜</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *envp[] = &#123;<span class="string">&quot;USER=NAME&quot;</span>, <span class="string">&quot;PATH=/bin&quot;</span>, (<span class="keyword">char</span>*<span class="number">0</span>); <span class="comment">// 환경변수 배열</span></span><br><span class="line"><span class="keyword">char</span> *arg[] &#123;<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-al&quot;</span> ,<span class="literal">NULL</span>&#125;; <span class="comment">// 인수 리스트 배열</span></span><br><span class="line"></span><br><span class="line">execv(<span class="string">&quot;/bin/ls&quot;</span> arg);</span><br><span class="line">exevp(<span class="string">&quot;ls&quot;</span>,arg);</span><br><span class="line">exeve(<span class="string">&quot;ls&quot;</span>,arg)</span><br></pre></td></tr></table></figure>

<h2 id="wait-시스템콜"><a href="#wait-시스템콜" class="headerlink" title="wait() 시스템콜"></a>wait() 시스템콜</h2><ul>
<li>wait()을 사용하면 fork() 호출 시 자식 프로세스가 종료할 때 까지 부모 프로세스가 기다린다.</li>
<li>부자 프로세스간의 동기화와 고아 프로세스가 생기는 것을 방지 할 수있다.</li>
</ul>
<p><img src="/image/System-Programming-Process_images/wait.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">wait</span> <span class="params">(<span class="keyword">int</span> *status)</span> <span class="comment">// wait 시스템 콜은 자식 프로세스의 pid를 반환한다</span></span></span><br><span class="line"><span class="function">                         <span class="comment">// 자식 프로세스의 종료 상태값을 인자로 갖는다.</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WIFEXITED</span><span class="params">(status)</span></span>; <span class="comment">// 자식 프로세스의 정상 종료 시 리턴값은 0이 아닌값</span></span><br></pre></td></tr></table></figure>


<h2 id="fork-execl-wait-정리"><a href="#fork-execl-wait-정리" class="headerlink" title="fork, execl wait 정리"></a>fork, execl wait 정리</h2><p>execl()만 사용하면 부모프로세스가 사라지므로<br>이를 유지하기위해 fork로 새로운 프로세스 공간후 execl을 호출한다<br>wait함수를 사용해서 부모 프로세스가 자식 프로세스가 끝날 떄 까지 기다릴 수 있음.</p>
<h1 id="copy-on-write"><a href="#copy-on-write" class="headerlink" title="copy on write"></a>copy on write</h1><ul>
<li><p>fork()는 새로운 프로세스 공간 생성 후 부모의 프로세스 공간을 모두 복사한다</p>
</li>
<li><p>메모리를 모두 복사하려면 시간이 오래 걸린다.</p>
</li>
<li><p>자식프로세스 생성시 부모 프로세스 페이지를 우선 사용한다.</p>
</li>
<li><p>이때 자식 프로세스에 쓰기가 발생할때 해당 페이지만 복사하고 분리한다</p>
<ul>
<li>+모두 복사하지 않기 때문에 프로세스 생성 시간을 줄일 수 있음</li>
<li>+새로 생성된 프로세스에 할당되어야하는 페이지수도 최소화 할 수 있음</li>
<li><img src="/image/System-Programming-Process_images/cowr.png"><br><img src="/image/System-Programming-Process_images/coww.png"></li>
</ul>
</li>
<li><p>커널공간을 공유하여 읽기만 있을때에는 복사 없이 Process A에서 사용 하고있던 물리주소를 그대로 사용한다.</p>
</li>
<li><p>코드 실행중 write를 요청하게되면 그 시점에 child process가 복사하여 페이지 포인터를 변경하여 사용한다</p>
</li>
</ul>
<h1 id="Process-종료"><a href="#Process-종료" class="headerlink" title="Process 종료"></a>Process 종료</h1><h2 id="exit"><a href="#exit" class="headerlink" title="exit()"></a>exit()</h2><p>프로세스를 종료하는 시스템콜</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span>; <span class="comment">// 프로세스 종료 상태 번호를 인자로 갖는다</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>main함수의 return  와 exit(0)의 차이는 </p>
<p>exit()는 즉시 프로세스를 종료한다<br>return 0는 함수를 종료한다.</p>
<p>  main에서 return시에는 C언어 실행파일에 기본으로 포함된 _start() 함수를 호출하고</p>
<p>  그함수는 main을 실행하고 모두 실행후 exit()를 호출하게 된다.</p>
</li>
<li><p>exit를 실행하면 </p>
<ul>
<li>atexit()에 등록된 함수 실행</li>
<li>열려 있는 모든 입출력 스트림 버퍼 삭제 (stdin, stdout, stderr)</li>
<li>프로세스가 오픈한 파일을 모두 닫음</li>
<li>tmpfile()함수를 통해 생성된 임시 파일들 삭제</li>
</ul>
</li>
</ul>
<h2 id="atexit"><a href="#atexit" class="headerlink" title="atexit()"></a>atexit()</h2><p>프로세스가 종료될때 실행될 함수를 등록하는 함수이다.<br>스택형식으로 등록되어 들어온순의 역순으로 실행된다.</p>
<hr>
<p>출처 :<br>본 내용은 Fastcampus KDT BE과정 수업을 기반으로 작성되었음을 알립니다. </p>
<p>기타 출처:<br><a href="https://kyu9341.github.io/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/2020/10/04/OS_Process_Structure/">https://kyu9341.github.io/운영체제/2020/10/04/OS_Process_Structure/</a></p>
]]></content>
      <categories>
        <category>System Programming</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>System Programming - IPC</title>
    <url>/2021/07/29/System-Programming-IPC/</url>
    <content><![CDATA[<h1 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h1><h2 id="IPC란"><a href="#IPC란" class="headerlink" title="IPC란"></a>IPC란</h2><ul>
<li><p>OS에서 할당받은 독립적인 공간을 갖는 Process는 서로 물리적인 주소를 접근 할 수 </p>
<p>없어서 프로세스간 통신을 하는데 어려움을 겪는다 이때 사용하는 기술이 IPC이다!</p>
</li>
</ul>
<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><ul>
<li>두 프로세스 모두 저장매체를 접근 할 수 있기 때문에 파일을 통해서 통신할 수 있다.</li>
<li>+가장 간단한 방법</li>
<li>-서로 접근하고 있는지 확인할 방법이 없다</li>
</ul>
<h2 id="Others-IPC"><a href="#Others-IPC" class="headerlink" title="Others IPC"></a>Others IPC</h2><ul>
<li>프로세스들의 커널공간은 공유한다는 아이디어를 기반으로<br>페이지테이블에 같은 물리주소를 가리킴으로써 다양한 IPC기법이 개발되었다.</li>
</ul>
<h3 id="PIPE"><a href="#PIPE" class="headerlink" title="PIPE"></a>PIPE</h3><ul>
<li>fork()를 통해 자식 프로세스를 만들었을때 부모와 자식간의 통신</li>
<li>단방향 통신</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MSGSIZE 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* msg = <span class="string">&quot;Hello Child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">255</span>];</span><br><span class="line">  <span class="keyword">int</span> fd[<span class="number">2</span>], pid, nbyes;</span><br><span class="line">  <span class="keyword">if</span> (pipe(fd) &lt; <span class="number">0</span>) <span class="built_in">exit</span>(<span class="number">1</span>); <span class="comment">// 커널영역에 pipe 생성하고 오류시 exit(1)</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123; <span class="comment">// 부모 프로세스이면 pid값을 출력</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;praent PID:%d, child PID:%d\n&quot;</span>, getpid(), pid);</span><br><span class="line">    write(fd[<span class="number">1</span>], msg, MSGSIZE); <span class="comment">// fd[1]에 메시지를 씀</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>) <span class="comment">// 정상 종료  </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child PID %d\n, getpid());</span></span><br><span class="line"><span class="string">    nbytes= read(fd[0], buf , MSGSIZE); // 파일을 읽는 시스템콜 공란에 255사이즈데이터를 읽음 </span></span><br><span class="line"><span class="string">                                        // 동일한 커널영역에 들어가서 buf에 넣어주게됨 </span></span><br><span class="line"><span class="string">    printf(&quot;</span>%d %s\n, nbytes, buf);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h3><ul>
<li>선입선출 방식으로 데이터를 전송</li>
<li>파이프와 다르게 양방향 통신도 가능하며 부모 자식간 프로세스가 아니어도 가능하다</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ipcs</span> <span class="comment"># 이 명령어를 통해 메시지를 포함한 ipc 정보를 확인할 수 있다</span></span><br></pre></td></tr></table></figure>

<p><img src="/image/System-Programming-IPC_images/ipcs.png"></p>
<p>메시지를 보낼떄의 예</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">msqid = msgget(key, msgflg) <span class="comment">// 다른 메시지큐와 구분될 key , 메시지 큐의 옵션을 인자로 갖는다</span></span><br><span class="line">msgsnd(msqid, &amp;sbuf, buf_length, IPC_NOWAIT) <span class="comment">// 메시지를 보낼때의 함수</span></span><br><span class="line"> <span class="comment">//IPC_NOWAIT은 읽지않더라도 다음 코드를 실행할때 사용, 0이면 실행할떄까지 기다린다.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span> &#123;</span> <span class="comment">// 데이터를 전송할때 구조체의 값에 알맞게 넣어서 전송한다</span></span><br><span class="line">  <span class="keyword">long</span> type;</span><br><span class="line">  <span class="keyword">char</span> text[<span class="number">50</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> msgid, len;</span><br><span class="line">  MsgBuf msg;</span><br><span class="line">  Key_t key = <span class="number">1111</span>;</span><br><span class="line">  msgid = msgget(key, IPC_CREAT|<span class="number">0644</span>); <span class="comment">// 메시지를 0644권한으로 새로 만든다</span></span><br><span class="line">  <span class="keyword">if</span> (msgid == <span class="number">-1</span>) &#123; <span class="comment">// 메시지생성에 실패했을경우</span></span><br><span class="line">    perror(<span class="string">&quot;msgget&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  msg.type = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(msg.text, <span class="string">&quot;Hello Message Queue\n&quot;</span>); <span class="comment">// 메시지 구조체에 텍스트를 넣는다</span></span><br><span class="line">  <span class="keyword">if</span> (msgsnd(msgid, (<span class="keyword">void</span> *)&amp;msg, <span class="number">50</span>, IPC_NOWAIT) == <span class="number">-1</span>) &#123; <span class="comment">// 메시지를 보내며 에러 확인</span></span><br><span class="line">    <span class="comment">// 메시지의 아이디, 구조체의 주소, 사이즈를 인자로 보낸다</span></span><br><span class="line">    perror(<span class="string">&quot;msgsnd&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>메시지를 받을떄의 예</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sszie_t</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">void</span> *msgp, <span class="keyword">size_t</span> msgsz, <span class="keyword">long</span> msgtyp, <span class="keyword">int</span> msgflg)</span></span></span><br><span class="line"><span class="function"><span class="title">msgrcv</span><span class="params">(msqid, &amp;rbuf, MSGSZ, <span class="number">1</span> ,<span class="number">0</span>)</span> <span class="comment">// msgtype 0: 첫번째메시지 다른 양수이면 일치하는 첫번째 메시지</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span> &#123;</span> <span class="comment">// 데이터를 전송할때 구조체의 값에 알맞게 넣어서 전송한다</span></span><br><span class="line">  <span class="keyword">long</span> type;</span><br><span class="line">  <span class="keyword">char</span> text[<span class="number">50</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  MsgBuf msg;</span><br><span class="line">  <span class="keyword">int</span> msgid, len;</span><br><span class="line">  <span class="keyword">key_t</span> key = <span class="number">1111</span>; <span class="comment">// snd할때 키값과 동일해야한다.</span></span><br><span class="line">  <span class="keyword">if</span>((msgid == msgget(key, IPC_CREAT|<span class="number">0644</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;msgget&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  len = msgrcv(msgid, &amp;msg, <span class="number">50</span>, <span class="number">0</span> ,<span class="number">0</span>); <span class="comment">// (메시지id, size , type, wait);</span></span><br><span class="line">  <span class="comment">//type에 일치하는 가장먼저오는 메시지를 수신한다</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Received Message is [%d] %s]\n&quot;</span>, len, msg.text);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>System Programming</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
        <tag>File</tag>
        <tag>Pipe</tag>
        <tag>Message Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>System-Programming-Pthread</title>
    <url>/2021/08/05/System-Programming-Pthread/</url>
    <content><![CDATA[<h1 id="Pthread"><a href="#Pthread" class="headerlink" title="Pthread"></a>Pthread</h1><h2 id="Pthread란"><a href="#Pthread란" class="headerlink" title="Pthread란"></a>Pthread란</h2><ul>
<li>POSIX thread는 유닉스 시스템 핵심 스레딩 라이브러리이다</li>
<li>대부분 다른 스레딩 솔루션도 Pthread를 기반으로 구현되어있다</li>
</ul>
<h2 id="Pthread-라이브러리"><a href="#Pthread-라이브러리" class="headerlink" title="Pthread 라이브러리"></a>Pthread 라이브러리</h2><ul>
<li><p>&lt;pthread.h&gt; 헤더파일에 정의 되어있음</p>
</li>
<li><p>모든 함수는 pthread_ 로 시작</p>
</li>
<li><p>크게 두가지로 분류 된다</p>
<ul>
<li>스레드 관리: 생성 종료 조인 디테치 함수등</li>
<li>동기화: 뮤텍스같은 동기화 관련 함수가있음</li>
</ul>
</li>
<li><p>기본 라이브러리인 glibc와 분리된 libpthread 라이브러리에 별도로 pthread가 구현되어있으므로</p>
<p>컴파일시에 명시적으로 -pthread 옵션을 사용해야함</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -pthread test.c -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h2 id="스레드-사용"><a href="#스레드-사용" class="headerlink" title="스레드 사용"></a>스레드 사용</h2><h3 id="Create-Thread"><a href="#Create-Thread" class="headerlink" title="Create Thread"></a>Create Thread</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_create</span> <span class="params">(<span class="keyword">pthread_t</span> *thread, <span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">void</span> *(*start_routine) (<span class="keyword">void</span>*), <span class="keyword">void</span>*arg)</span></span>;</span><br><span class="line"><span class="comment">/* thread: 생성된 스레드 식별자</span></span><br><span class="line"><span class="comment">   attr: 스레드 특징 설정</span></span><br><span class="line"><span class="comment">   start_routine: 스레드 함수(스레드로 분기해서 실행할 함수)</span></span><br><span class="line"><span class="comment">   arg: 스레드 함수 인자 */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_t</span> thread1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread_function</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line"></span><br><span class="line">ret = pthread_create(&amp;thread1,<span class="literal">NULL</span>, thread_function, (<span class="keyword">void</span>*)message1);</span><br><span class="line"><span class="comment">// return갑은 성공하면 0 </span></span><br></pre></td></tr></table></figure>

<h3 id="Exit-Thread"><a href="#Exit-Thread" class="headerlink" title="Exit Thread"></a>Exit Thread</h3><ul>
<li><p>프로세스가 끝나면 자동으로 스레드가 종료되지만 명시적으로 종료해야할때 사용함</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="keyword">void</span> *retaval)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="Thread-Join"><a href="#Thread-Join" class="headerlink" title="Thread Join"></a>Thread Join</h3></li>
<li><p>프로세스가 실행이되어 여러 스레드를 생성했을때 메인 스레드에서 다른 스레드를 기다리지않고</p>
<p>그 후의 코드를 실행하거나 다른 스레드의 작업을 기다리지 않고 바로 실행하게되면 오류가 발생할 수 있는데</p>
<p>이때 스레드 조인을 통하여 다른 스레드를 기다릴 수 있다</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span> <span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">void</span> **thread_return)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pthread_join (p_thread, (<span class="keyword">void</span> *) &amp;status); <span class="comment">// p_thread식별자를 가진 스레드의 종료를 기다리고 status 값을 포인터로 가져온다</span></span><br><span class="line"></span><br><span class="line">prtinf(<span class="string">&quot;thread join %d\n&quot;</span> , status); </span><br></pre></td></tr></table></figure>

<h3 id="Thread-Detach"><a href="#Thread-Detach" class="headerlink" title="Thread Detach"></a>Thread Detach</h3><ul>
<li><p>해당 스레드가 종료될 경우 그 즉시 관련 리소스를 해제한다</p>
<ul>
<li>조인을 기다리지 않고 종료 즉시 리소스 해제</li>
</ul>
</li>
<li><p>예를들어 메인스레드에서 여러 스레드를 생성 했을 때 그 스레드들이 사용한 메모리영역이나 변수는<br>메인 스레드가 종료되기전까지는 해제 되지않는데 이때 해제하는 방법은 join과 detach이다.</p>
<ul>
<li>join은 메인스레드에서 해당 스레드가 종료되고 종료 상태값을 가지고 추가작업을 하게된다.</li>
<li>detach는 해당 스레드가 종료되면 바로 해제</li>
</ul>
</li>
</ul>
<h3 id="Thread-Mutex-Mutual-exclusion"><a href="#Thread-Mutex-Mutual-exclusion" class="headerlink" title="Thread Mutex - Mutual exclusion"></a>Thread Mutex - Mutual exclusion</h3><ul>
<li>서로 다른 프로세스가 공유 자원을 사용하고 있을 경우에 다른 프로세스가 사용하지 못하게 제어하는 기법</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_mutext_t</span> mutex_lock = PTHREAD_MUTEX_INITIALIZER;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex_lock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="keyword">int</span> g_count =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">t_function</span><span class="params">(<span class="keyword">void</span> *data)</span> </span>&#123; <span class="comment">// 스레드 함수</span></span><br><span class="line">  <span class="keyword">char</span>* thread_name = (<span class="keyword">char</span> *)data;</span><br><span class="line">  pthread_mutex_lock(&amp;mutex_lock); <span class="comment">// Mutex로 락</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s start\n&quot;</span>, thread_name); </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    g_count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s, g_count = %d\n&quot;</span> thread_name, g_count);</span><br><span class="line">  pthread_mutex_unlock(&amp;mutex_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">pthread_t</span> p_thread1, p_thread2;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  pthread_create(&amp;p_thread1, <span class="literal">NULL</span>, t_function, (<span class="keyword">void</span> *)<span class="string">&quot;Thread1&quot;</span>);</span><br><span class="line">  pthread_create(&amp;p_thread2, <span class="literal">NULL</span>, t_function, (<span class="keyword">void</span> *)<span class="string">&quot;Thread2&quot;</span>);</span><br><span class="line">  pthread_join(p_thread1, (<span class="keyword">void</span> *)&amp;status);</span><br><span class="line">  pthread_join(p_thread2, (<span class="keyword">void</span> *)&amp;status);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>System Programming - Scheduling</title>
    <url>/2021/07/29/System-Programming-Scheduling/</url>
    <content><![CDATA[<h1 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h1><h2 id="우선순위-기반-스케쥴러"><a href="#우선순위-기반-스케쥴러" class="headerlink" title="우선순위 기반 스케쥴러"></a>우선순위 기반 스케쥴러</h2><ul>
<li>정적 우선순위<ul>
<li>프로세스마다 우선순위를 미리 지정</li>
</ul>
</li>
<li>동적 우선순위<ul>
<li>상황에 따라 스케쥴러가 우선순위를 동적으로 변경</li>
</ul>
</li>
</ul>
<h2 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h2><ul>
<li><p>Portable Operating system interface의 약자로</p>
<p>  서로 다른 UNIX OS의 공통 API를 정의하여 이식성이 높은 개발하기 위한 목적으로 IEEE에서 책정한 Application 규격이다.</p>
</li>
<li><p>리눅스는 POSIX에서 정한 규격으로 시스템콜을 정의했다</p>
</li>
</ul>
<h2 id="우선순위-관련-System-Call"><a href="#우선순위-관련-System-Call" class="headerlink" title="우선순위 관련 System Call"></a>우선순위 관련 System Call</h2><h3 id="nice"><a href="#nice" class="headerlink" title="nice()"></a>nice()</h3><ul>
<li>root가 소유한 프로세스만 우선순위를 높일 수 있고 </li>
</ul>
<p>그외 다른 프로세스의 우선순위는 낮출수만 있다.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nice</span> <span class="params">(<span class="keyword">int</span> inc)</span></span>; </span><br></pre></td></tr></table></figure>


<h3 id="getpriority-setpriority"><a href="#getpriority-setpriority" class="headerlink" title="getpriority(), setpriority()"></a>getpriority(), setpriority()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getpriority</span><span class="params">(<span class="keyword">int</span> which, <span class="keyword">id_t</span> who)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setpriority</span><span class="params">(<span class="keyword">int</span> which, <span class="keyword">in_t</span> who, <span class="keyword">int</span> value)</span></span>; </span><br></pre></td></tr></table></figure>
<ul>
<li>이름에도 알 수 있듯이 프로세스의 우선순위를 가져오거나 정할 수 있다.</li>
<li>which는 가져오거나 세팅할 대상(PRIO_PROCESS,PRIO_PGRP,PRIO_USER), </li>
<li>who는 process ID (0을 넣으면 현재 프로세스이다), value는 우선순위로 인자를 갖는다</li>
</ul>
]]></content>
      <categories>
        <category>System Programming</category>
        <category>OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>System-Programming-Signal</title>
    <url>/2021/08/04/System-Programming-Signal/</url>
    <content><![CDATA[<h1 id="시그널-signal"><a href="#시그널-signal" class="headerlink" title="시그널 (signal)"></a>시그널 (signal)</h1><ul>
<li>유닉스에서 사용되는 커널 또는 프로세스에서 다른 프로세스에 어떤 이벤트가 발생되었는지를 알려주는 기법</li>
<li>ex) Ctrl + C 프로세스 종료 , Ctrl + Z 프로세스를 백그라운드로</li>
</ul>
<h2 id="주요-Signal"><a href="#주요-Signal" class="headerlink" title="주요 Signal"></a>주요 Signal</h2><ul>
<li>시그널 종류와 각 시그널에 따라 기능이 매핑되어있음<ul>
<li>SIGKILL : 프로세스를 죽임</li>
<li>SIGALARM: 알람 발생</li>
<li>SIGSTP : 프로세스 멈춤 (= ctrl + Z)</li>
<li>SIGCONT: 멈춰진 프로세스 재개</li>
<li>SIGINT : 프로세스에 인터럽트를 보내고 죽임 (=Ctrl + C)</li>
<li>SIGSEGV: 프로세스가 다른 메모리영역을 침법</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$kill</span> -l <span class="comment">#명령어를 통해 시그널 명령어들을 볼 수 있음 </span></span><br></pre></td></tr></table></figure>
<p><img src="/image/System-Programming-Signal_images/killll.png"></p>
<h2 id="Signal-동작"><a href="#Signal-동작" class="headerlink" title="Signal 동작"></a>Signal 동작</h2><ul>
<li>프로그램에서 특정 시그널의 기본 동작대신 다른 동작하도록 재정의가 가능하다.</li>
<li>각 프로세스에서  시그널 처리에 대해 다음과 같은 동작 설정 가능하다.<ol>
<li>시그널 무시</li>
<li>시그널 블록</li>
<li>프로그램 안에 등록된 시그널 핸들러로 재정의한 특정 동작 수행</li>
</ol>
</li>
</ul>
<h2 id="Send-Signal"><a href="#Send-Signal" class="headerlink" title="Send Signal"></a>Send Signal</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> sig)</span> <span class="comment">// pid와 sig#를 인자로 받는다 </span></span></span><br></pre></td></tr></table></figure>

<h2 id="받은-Signal-기본-동작-재정의"><a href="#받은-Signal-기본-동작-재정의" class="headerlink" title="받은 Signal 기본 동작 재정의"></a>받은 Signal 기본 동작 재정의</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">void</span> (*signal(<span class="keyword">int</span> signum, <span class="keyword">void</span> (*handler)(<span class="keyword">int</span>)))(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">singal(SIGINT, SIG_IGN); <span class="comment">// SIGINT를 받으면 SIG_IGN(시그널 무시) 동작</span></span><br><span class="line"></span><br><span class="line">signal(SIGINT, (<span class="keyword">void</span> *)signal_handler); <span class="comment">// SIGINT를 받으면 핸들러를 통해 재정의한 동작을 실행</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><p>sigloop.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">signal_handler</span> <span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Catch SIGINT!, but no stop\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (signal (SIGINT, signal_handler) == SIG_ERR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t catch SIGINT!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">          pause();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sigkill.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pid, sig_num;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;usage %s [pid][signum]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">  sig_num = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( kill(pid, sig_num)) &#123; <span class="comment">// Kill 시스템콜을 통해 해당 프로세스에 SIG_NUM을 넘겨줌</span></span><br><span class="line">    perror(<span class="string">&quot;To send Signal is failed\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/image/System-Programming-Signal_images/sigexam.png"><br>다음과 같이 원래 SIGINT의 디폴트는 종료이지만 종료하지않고<br>재정의한대로 메시지가 출력된다.</p>
]]></content>
      <categories>
        <category>System Programming</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>System Programming</tag>
        <tag>Signal</tag>
      </tags>
  </entry>
  <entry>
    <title>Git ignore 적용 안될때</title>
    <url>/2021/08/06/git-add/</url>
    <content><![CDATA[<h1 id="gitIgnore-적용-안될-때"><a href="#gitIgnore-적용-안될-때" class="headerlink" title=".gitIgnore 적용 안될 때"></a>.gitIgnore 적용 안될 때</h1><p>분명 .gitignore에 macOS에서 메타데이터가 저장되는 .DS_Store와<br>intellij에서 해당프로젝트에 Configuration과 관련되어있는 .IDEA 폴더를 추가했는데도<br>add commit push를 하고나서 레포지토리에 가서 확인하면 깃이그노어가 이그노어되어있어 모든 파일이 다올라갔다.</p>
<p>그 이유는 <code>git add *</code> 에 있었다 <code>git add *</code>의 경우</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git add * The following paths are ignored by one of your .gitignore files: git-add/ignore.txt</span><br><span class="line">Use -f <span class="keyword">if</span> you really want to add them.</span><br></pre></td></tr></table></figure>
<p>라는 경고가 뜨는데, 네가 gitignore에 작성한 파일에 add할 파일이 있던데 그래도 올릴거야? 하고 친절히 물어보는 것이였다.</p>
<p>이때는  <code>zsh git add .</code> 를 써서 해결 할 수 있다. </p>
<h2 id="결론-모든-메시지는-잘-읽어보고-확인하자-👀"><a href="#결론-모든-메시지는-잘-읽어보고-확인하자-👀" class="headerlink" title="결론: 모든 메시지는 잘 읽어보고 확인하자! 👀"></a>결론: 모든 메시지는 잘 읽어보고 확인하자! 👀</h2>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
        <tag>Git</tag>
        <tag>Trouble Shooting</tag>
      </tags>
  </entry>
  <entry>
    <title>내 개발환경 셋팅하기 Oh My ZSH , iTerm2 , power10k</title>
    <url>/2021/07/30/mac-setting-iterm/</url>
    <content><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>모종의 이유로 맥 셋팅을 처음부터 다시 하게되는 경우가 생긴다.<br>Time Machine이나 Migration을 사용하기엔 레거시가 남을 것 같아 찝찝한 기분이 들어 일일히 한땀한땀 셋팅을 한다.<br>그렇기 때문에 구글링하고 여러 블로그를 서핑하면서 셋팅하는데 꽤 많은 시간을 소비하게 된다..<br>그래서 그 시간을 줄이기위해 나의 맥 셋팅을 포스팅를 하게 되었다.</p>
<h2 id="🍺-Homebrew"><a href="#🍺-Homebrew" class="headerlink" title="🍺 Homebrew"></a>🍺 <a href="https://brew.sh/index_ko">Homebrew</a></h2><ul>
<li>포멧을하고나서 가장 먼저 설치하는 MacOS 전용 패키기 관리자이다.<br> 앱을 설치하기 위해서는 App Store서 설치하거나<br> 앱을 배포하는 공식 홈페이지에서 다운받아서 Application 폴더에 옮겨줘야하는 귀찮은 작업을 해야하지만<br> Homebrew를 이용하면 간단한 명령어를 통해서 등록된 앱들을 설치, 업데이트, 삭제 할 수 있다! 🙃</li>
</ul>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ul>
<li>설치법은 매우간단하다 터미널 앱을 켜서 다음 명령어를 입력해주면 된다.</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>homebrew를 설치했으면 다음은 gui에서 사용가능한 앱을 설치해주는 패키지인 cask를 설치해야한다</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">brew install cask</span><br></pre></td></tr></table></figure>

<p>cask를 설치헀으면 <code>brew list</code> 명령어를 통하여 설치한 앱을 확인 할 수 있다. </p>
<p>그리고 웹서버로부터 콘텐츠를 가져오는 프로그램인 ‘wget’을 설치해야한다</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">brew install wget</span><br></pre></td></tr></table></figure>

<p>gui프로그램이 아니므로 –cask 옵션을 사용하지 않는다</p>
<p><img src="/image/mac-setting-iterm_images/img.png"></p>
<p>원하는 앱을 찾고싶을땐 <code>brew search &#123;appname&#125;</code>으로 검색하여 설치 할 수 있다.</p>
<h2 id="iterm2"><a href="#iterm2" class="headerlink" title=" iterm2"></a><img src="/image/mac-setting-iterm_images/icon_iterm.png" style="float:left;"> <a href="https://iterm2.com/">iterm2</a></h2><ul>
<li>정말 기본 쉘명령어만 사용할 수 있는 기본 terminal에 iterm은 테마를 적용시켜 가독성뿐만 아니라<br>  예쁜 UI를 가질 수 있고 split view나 리소스 모니터링등 여러가지 기능을 제공한다</li>
</ul>
<h3 id="Install-1"><a href="#Install-1" class="headerlink" title="Install"></a>Install</h3><ul>
<li>위에서 설치한 homebrew를 패키지 관리자를 통해서 설치 할 수있다 다음의 명령어를 복사해서 입력해보자</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">homebrew install --cask iterm2</span><br></pre></td></tr></table></figure>

<h3 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h3><h4 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h4><ul>
<li>iterm을 설치했으면 이제 차례차레 셋팅을 해줄 차례가 된다. 가독성이 떨어지는 기본 폰트부터 바꿔보자<br>  내가 사용하는 폰트는 <a href="https://github.com/naver/d2codingfont">D2 Coding</a> 이다 이 폰트는 i,l,1,I와 0,o,O,ㅇ과 같이 구분하기 힘든 폰트들을<br>  나눔바른고딕을 기반으로 수정한 폰트이다.</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">wget -P ./Downloads -L https://github.com/naver/d2codingfont/raw/master/D2Coding-Ver1.3.2-20180524.zip</span><br></pre></td></tr></table></figure>

<ul>
<li><p>다운로드 폴더에서 다운받은 .zip 파일을 압축해제하고 D2Coding-Ver1.3.2-20180524-all.ttc를 실행하여 폰트를 설치하자</p>
<p>  그 후 Preferences (cmd + ,)에서 Profile - Default - text - font를 D2Coding으로 변경한다</p>
</li>
</ul>
<p><img src="/image/mac-setting-iterm_images/font.png"></p>
<ul>
<li>그러면 훨씬 보기 좋은 글씨체로 변경된다! 👍</li>
</ul>
<h2 id="OH-MY-ZSH"><a href="#OH-MY-ZSH" class="headerlink" title=" OH MY ZSH"></a><img src="/image/mac-setting-iterm_images/ohmyzsh.png" style="float:left;"> <a href="https://ohmyz.sh/">OH MY ZSH</a></h2><ul>
<li><em>oh my zsh</em> 은 zsh쉘 터미널 환경을 플러그인 프레임워크이다 내장 플러그인과 테마도 갖추고있고<br>  필요에따라서 다양한 플러그인을 설치하여 사용 할 수 있다</li>
</ul>
<h3 id="Install-2"><a href="#Install-2" class="headerlink" title="Install"></a>Install</h3><ul>
<li>마찬가지로 다음 명령어를 복사하여 입력해 설치하자!<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Setting-1"><a href="#Setting-1" class="headerlink" title="Setting"></a>Setting</h3><p>Oh my zsh를 설치후엔 플러그인과 테마를 적용해주도록 한다</p>
<h4 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h4><p>현재사용 하고있는 플러그인은 다음과 같다</p>
<ol>
<li>zsh-completions : 자동완성 기능을 제공한다<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">brew install zsh zsh-completions</span><br></pre></td></tr></table></figure></li>
<li>zsh-autosuggestions : 과거에 썻던 명령어를 기반으로 명령어를 추천해준다<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li>
</ol>
<p>이렇게 설치한 플러그인들은 <code>vi ~/.zshrc</code> 명령어를 통해 plugins에 다음 그림과 같이 입력해주도록 한다.</p>
<p><img src="/image/mac-setting-iterm_images/zshrc.png"></p>
<h4 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h4><p>현재 사용하는 테마는 powerlevel10k이다.<br>이 테마는 쉘을 입력한 시간, 현재 위치, 브랜치 등등 다양한 정보를 가독성 높게 표현해준다</p>
<p>다음 명령어를 복사해서 입력해주자</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>
<p>설치후에 <code>vi ~/.zshrc</code> 명령어를 통해 zshrc파일에 <code>ZSH_THEME</code>에<br><code>=&quot;powerlevel10k/powerlevel10k&quot;</code> 를 입력후 저장하고 iterm을 재실행 해주면 설정이 시작된다.</p>
]]></content>
      <categories>
        <category>mac</category>
        <category>setting</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>setting</tag>
        <tag>zsh</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
</search>
